"use strict";(self.webpackChunkgloomhavensecretariat=self.webpackChunkgloomhavensecretariat||[]).push([[196],{196:(le,I,u)=>{u.r(I),u.d(I,{diagram:()=>ue});var O,T=u(9204),X=u(5027),Y=u(9374),b=u(6974),g=u(5767),f=u(5595),S=u(1113),s=u(4110),E=u(2233),p=u(3172),K=(class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=s.SV,this.getAccTitle=s.iN,this.setDiagramTitle=s.ke,this.getDiagramTitle=s.ab,this.getAccDescription=s.m7,this.setAccDescription=s.EI}getNodes(){return this.nodes}getConfig(){const n=s.UI,l=(0,s.zj)();return(0,f.$t)({...n.treemap,...l.treemap??{}})}addNode(n,l){this.nodes.push(n),this.levels.set(n,l),0===l&&(this.outerNodes.push(n),this.root??=n)}getRoot(){return{name:"",children:this.outerNodes}}addClass(n,l){const i=this.classes.get(n)??{id:n,styles:[],textStyles:[]},d=l.replace(/\\,/g,"\xa7\xa7\xa7").replace(/,/g,";").replace(/\xa7\xa7\xa7/g,",").split(";");d&&d.forEach(c=>{(0,b.KX)(c)&&(i?.textStyles?i.textStyles.push(c):i.textStyles=[c]),i?.styles?i.styles.push(c):i.styles=[c]}),this.classes.set(n,i)}getClasses(){return this.classes}getStylesForClass(n){return this.classes.get(n)?.styles??[]}clear(){(0,s.IU)(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}static#e=O=()=>((0,X.A)(this,"TreeMapDB"),(0,s.K2)(this,"TreeMapDB"),this)},O());function k(n){if(!n.length)return[];const l=[],i=[];return n.forEach(d=>{const c={name:d.name,children:"Leaf"===d.type?void 0:[]};for(c.classSelector=d?.classSelector,d?.cssCompiledStyles&&(c.cssCompiledStyles=[d.cssCompiledStyles]),"Leaf"===d.type&&void 0!==d.value&&(c.value=d.value);i.length>0&&i[i.length-1].level>=d.level;)i.pop();if(0===i.length)l.push(c);else{const o=i[i.length-1].node;o.children?o.children.push(c):o.children=[c]}"Leaf"!==d.type&&i.push({node:c,level:d.level})}),l}(0,s.K2)(k,"buildHierarchy");var se=(0,s.K2)((n,l)=>{(0,g.S)(n,l);const i=[];for(const o of n.TreemapRows??[])"ClassDefStatement"===o.$type&&l.addClass(o.className??"",o.styleText??"");for(const o of n.TreemapRows??[]){const m=o.item;if(!m)continue;const x=o.indent?parseInt(o.indent):0,G=ne(m),a=m.classSelector?l.getStylesForClass(m.classSelector):[],N=a.length>0?a.join(";"):void 0;i.push({level:x,name:G,type:m.$type,value:m.value,classSelector:m.classSelector,cssCompiledStyles:N})}const d=k(i),c=(0,s.K2)((o,m)=>{for(const x of o)l.addNode(x,m),x.children&&x.children.length>0&&c(x.children,m+1)},"addNodesRecursively");c(d,0)},"populate"),ne=(0,s.K2)(n=>n.name?String(n.name):"","getItemName"),J={parser:{yy:void 0},parse:(0,s.K2)(function(){var n=(0,T.A)(function*(l){try{const i=E.qg,d=yield i("treemap",l);s.Rm.debug("Treemap AST:",d);const c=J.parser?.yy;if(!(c instanceof K))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");se(d,c)}catch(i){throw s.Rm.error("Error parsing treemap:",i),i}});return function(l){return n.apply(this,arguments)}}(),"parse")},ce={draw:(0,s.K2)((n,l,i,d)=>{const c=d.db,o=c.getConfig(),m=o.padding??10,x=c.getDiagramTitle(),G=c.getRoot(),{themeVariables:a}=(0,s.zj)();if(!G)return;const N=x?30:0,$=(0,S.D)(l),Q=o.nodeWidth?10*o.nodeWidth:960,q=o.nodeHeight?10*o.nodeHeight:500,Z=Q,ee=q+N;let M;$.attr("viewBox",`0 0 ${Z} ${ee}`),(0,s.a$)($,ee,Z,o.useMaxWidth);try{const e=o.valueFormat||",";if("$0,0"===e)M=(0,s.K2)(t=>"$"+(0,p.GPZ)(",")(t),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){const t=/\.\d+/.exec(e),r=t?t[0]:"";M=(0,s.K2)(y=>"$"+(0,p.GPZ)(","+r)(y),"valueFormat")}else if(e.startsWith("$")){const t=e.substring(1);M=(0,s.K2)(r=>"$"+(0,p.GPZ)(t||"")(r),"valueFormat")}else M=(0,p.GPZ)(e)}catch(e){s.Rm.error("Error creating format function:",e),M=(0,p.GPZ)(",")}const R=(0,p.UMr)().range(["transparent",a.cScale0,a.cScale1,a.cScale2,a.cScale3,a.cScale4,a.cScale5,a.cScale6,a.cScale7,a.cScale8,a.cScale9,a.cScale10,a.cScale11]),me=(0,p.UMr)().range(["transparent",a.cScalePeer0,a.cScalePeer1,a.cScalePeer2,a.cScalePeer3,a.cScalePeer4,a.cScalePeer5,a.cScalePeer6,a.cScalePeer7,a.cScalePeer8,a.cScalePeer9,a.cScalePeer10,a.cScalePeer11]),U=(0,p.UMr)().range([a.cScaleLabel0,a.cScaleLabel1,a.cScaleLabel2,a.cScaleLabel3,a.cScaleLabel4,a.cScaleLabel5,a.cScaleLabel6,a.cScaleLabel7,a.cScaleLabel8,a.cScaleLabel9,a.cScaleLabel10,a.cScaleLabel11]);x&&$.append("text").attr("x",Z/2).attr("y",N/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(x);const te=$.append("g").attr("transform",`translate(0, ${N})`).attr("class","treemapContainer"),fe=(0,p.Sk5)(G).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),ae=(0,p.hkb)().size([Q,q]).paddingTop(e=>e.children&&e.children.length>0?35:0).paddingInner(m).paddingLeft(e=>e.children&&e.children.length>0?10:0).paddingRight(e=>e.children&&e.children.length>0?10:0).paddingBottom(e=>e.children&&e.children.length>0?10:0).round(!0)(fe),ye=ae.descendants().filter(e=>e.children&&e.children.length>0),V=te.selectAll(".treemapSection").data(ye).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);V.append("rect").attr("width",e=>e.x1-e.x0).attr("height",25).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>0===e.depth?"display: none;":""),V.append("clipPath").attr("id",(e,t)=>`clip-section-${l}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",25),V.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>R(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>me(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(0===e.depth)return"display: none;";const t=(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),V.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",12.5).attr("dominant-baseline","middle").text(e=>0===e.depth?"":e.data.name).attr("font-weight","bold").attr("style",e=>0===e.depth?"display: none;":"dominant-baseline: middle; font-size: 12px; fill:"+U(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).each(function(e){if(0===e.depth)return;const t=(0,p.Ltv)(this),r=e.data.name;t.text(r);const y=e.x1-e.x0;let L;L=!1!==o.showValues&&e.value?y-10-30-10-6:y-6-6;const _=Math.max(15,L),h=t.node();if(h.getComputedTextLength()>_){let v=r;for(;v.length>0;){if(v=r.substring(0,v.length-1),0===v.length){t.text("..."),h.getComputedTextLength()>_&&t.text("");break}if(t.text(v+"..."),h.getComputedTextLength()<=_)break}}}),!1!==o.showValues&&V.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",12.5).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?M(e.value):"").attr("font-style","italic").attr("style",e=>0===e.depth?"display: none;":"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+U(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:"));const ge=ae.leaves(),H=te.selectAll(".treemapLeafGroup").data(ge).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);H.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>R(e.parent?e.parent.data.name:e.data.name)).attr("style",e=>(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>R(e.parent?e.parent.data.name:e.data.name)).attr("stroke-width",3),H.append("clipPath").attr("id",(e,t)=>`clip-${l}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),H.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+U(e.data.name)+";"+(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(e,t)=>`url(#clip-${l}-${t})`).text(e=>e.data.name).each(function(e){const t=(0,p.Ltv)(this),r=e.x1-e.x0,y=e.y1-e.y0,C=t.node(),F=r-8,_=y-8;if(F<10||_<10)return void t.style("display","none");let h=parseInt(t.style("font-size"),10);for(;C.getComputedTextLength()>F&&h>8;)h--,t.style("font-size",`${h}px`);let W=Math.max(6,Math.min(28,Math.round(.6*h))),j=h+2+W;for(;j>_&&h>8&&(h--,W=Math.max(6,Math.min(28,Math.round(.6*h))),!(W<6&&8===h));)t.style("font-size",`${h}px`),j=h+2+W;t.style("font-size",`${h}px`),(C.getComputedTextLength()>F||h<8||_<h)&&t.style("display","none")}),!1!==o.showValues&&H.append("text").attr("class","treemapValue").attr("x",t=>(t.x1-t.x0)/2).attr("y",function(t){return(t.y1-t.y0)/2}).attr("style",t=>"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+U(t.data.name)+";"+(0,b.GX)({cssCompiledStyles:t.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(t,r)=>`url(#clip-${l}-${r})`).text(t=>t.value?M(t.value):"").each(function(t){const r=(0,p.Ltv)(this),y=this.parentNode;if(!y)return void r.style("display","none");const C=(0,p.Ltv)(y).select(".treemapLabel");if(C.empty()||"none"===C.style("display"))return void r.style("display","none");const L=parseFloat(C.style("font-size")),P=Math.max(6,Math.min(28,Math.round(.6*L)));r.style("font-size",`${P}px`);const w=(t.y1-t.y0)/2+L/2+2;r.attr("y",w);const xe=t.y1-t.y0-4,_e=t.x1-t.x0-8;r.node().getComputedTextLength()>_e||w+P>xe||P<6?r.style("display","none"):r.style("display",null)}),(0,Y.P)($,o.diagramPadding??8,"flowchart",o?.useMaxWidth||!1)},"draw"),getClasses:(0,s.K2)(function(n,l){return l.db.getClasses()},"getClasses")},de={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},pe=(0,s.K2)(({treemap:n}={})=>{const l=(0,f.$t)(de,n);return`\n  .treemapNode.section {\n    stroke: ${l.sectionStrokeColor};\n    stroke-width: ${l.sectionStrokeWidth};\n    fill: ${l.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${l.leafStrokeColor};\n    stroke-width: ${l.leafStrokeWidth};\n    fill: ${l.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${l.labelColor};\n    font-size: ${l.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${l.valueColor};\n    font-size: ${l.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${l.titleColor};\n    font-size: ${l.titleFontSize};\n  }\n  `},"getStyles"),ue={parser:J,get db(){return new K},renderer:ce,styles:pe}},9374:(le,I,u)=>{u.d(I,{P:()=>X});var T=u(4110),X=(0,T.K2)((g,f,S,s)=>{g.attr("class",S);const{width:E,height:p,x:O,y:K}=Y(g,f);(0,T.a$)(g,p,E,s);const k=b(O,K,E,p,f);g.attr("viewBox",k),T.Rm.debug(`viewBox configured: ${k} with padding: ${f}`)},"setupViewPortForSVG"),Y=(0,T.K2)((g,f)=>{const S=g.node()?.getBBox()||{width:0,height:0,x:0,y:0};return{width:S.width+2*f,height:S.height+2*f,x:S.x,y:S.y}},"calculateDimensionsWithPadding"),b=(0,T.K2)((g,f,S,s,E)=>`${g-E} ${f-E} ${S} ${s}`,"createViewBox")}}]);
//# sourceMappingURL=196.b033e33b2b1fe7e9.js.map