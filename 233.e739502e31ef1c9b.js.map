{"version":3,"file":"233.e739502e31ef1c9b.js","mappings":"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","names":["PieTokenBuilder","AbstractMermaidTokenBuilder","constructor","super","static","_staticBlock","_setFunctionName","this","__name","PieValueConverter","AbstractMermaidValueConverter","runCustomConverter","rule","input","_cstNode","name","replace","trim","_staticBlock2","PieModule","parser","TokenBuilder","ValueConverter","createPieServices","context","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","MermaidGeneratedSharedModule","Pie","createDefaultCoreModule","PieGeneratedModule","ServiceRegistry","register","RadarTokenBuilder","RadarModule","CommonValueConverter","createRadarServices","Radar","RadarGeneratedModule","PacketTokenBuilder","PacketModule","createPacketServices","Packet","PacketGeneratedModule","InfoTokenBuilder","InfoModule","createInfoServices","Info","InfoGeneratedModule","parsers","initializers","info","_asyncToGenerator","createInfoServices2","__webpack_require__","e","then","bind","LangiumParser","packet","createPacketServices2","pie","createPieServices2","architecture","createArchitectureServices","createArchitectureServices2","Architecture","gitGraph","createGitGraphServices","createGitGraphServices2","GitGraph","radar","createRadarServices2","treemap","createTreemapServices","createTreemapServices2","Treemap","parse","_x","_x2","_parse","apply","arguments","diagramType","text","initializer","Error","result","lexerErrors","length","parserErrors","MermaidParseError","value","map","err","message","join","GitGraphTokenBuilder","GitGraphModule","GitGraphGeneratedModule","ArchitectureTokenBuilder","ArchitectureValueConverter","ArchitectureModule","ArchitectureGeneratedModule","TreemapTokenBuilder","classDefRegex","TreemapValueConverter","parseFloat","substring","match","exec","$type","className","styleText","registerValidationChecks","services","validator","validation","TreemapValidator","registry","ValidationRegistry","checks","checkSingleRoot","doc","accept","rootNodeIndentation","row","TreemapRows","item","indent","parseInt","node","property","_staticBlock3","TreemapModule","TreemapGeneratedModule","isAstNode","obj","isReference","$refText","isLinkingError","container","reference","AbstractAstReflection","subtypes","allSubtypes","isInstance","type","isSubtype","subtype","supertype","nested","existing","undefined","computeIsSubtype","getAllSubTypes","allTypes","getAllTypes","types","possibleSubType","push","isCompositeCstNode","Array","isArray","content","isLeafCstNode","tokenType","isRootCstNode","fullText","StreamImpl","startFn","nextFn","iterator","state","next","Symbol","isEmpty","done","count","toArray","toSet","Set","toMap","keyFn","valueFn","entryStream","element","Map","toString","concat","other","first","firstDone","DONE_RESULT","separator","addSeparator","indexOf","searchElement","fromIndex","index","every","predicate","some","forEach","callbackfn","filter","nonNullable","reduce","initialValue","previousValue","reduceRight","recursiveReduce","find","findIndex","includes","flatMap","mapped","isIterable","flat","depth","stream","head","tail","skipCount","i","limit","maxSize","size","distinct","by","set","internalState","has","add","exclude","key","otherKeySet","ownKey","Object","prototype","call","EMPTY_STREAM","freeze","collections","collection","collIndex","arrIndex","array","TreeStreamImpl","root","children","options","iterators","includeRoot","pruned","pop","prune","Reduction","streamCst","tokenToRange","token","start","character","startColumn","line","startLine","end","endColumn","endLine","toDocumentSegment","offset","range","sum","a","b","product","min","Math","max","RangeComparison","Before","After","OverlapFront","OverlapBack","Inside","Outside","DefaultNameRegexp","isCommentNode","cstNode","commentNames","ErrorWithLocation","assertUnreachable","_","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","isAbstractElement","reflection","ArrayLiteral","ArrayType","BooleanLiteral","Conjunction","Disjunction","Grammar","GrammarImport","InferredType","isInferredType","Interface","isInterface","NamedArgument","Negation","NumberLiteral","Parameter","ParameterReference","ParserRule","isParserRule","ReferenceType","ReturnType","SimpleType","isSimpleType","StringLiteral","TerminalRule","isTerminalRule","Type","isType","TypeAttribute","UnionType","Action","isAction","Alternatives","isAlternatives","Assignment","isAssignment","CharacterRange","CrossReference","isCrossReference","EndOfFile","Group","isGroup","Keyword","isKeyword","NegatedToken","RegexToken","RuleCall","isRuleCall","TerminalAlternatives","TerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","isUnorderedGroup","UntilToken","Wildcard","LangiumGrammarAstReflection","getReferenceType","refInfo","referenceId","getTypeMetaData","properties","defaultValue","getContainerOfType","typePredicate","$container","getDocument","findRootNode","$document","streamContents","keys","keyIndex","arrayIndex","startsWith","isAstNodeInRange","streamAllContents","streamAst","astNode","_a","nodeRange","$cstNode","inRange","to","compareRange","startInside","endInside","streamReferences","copyDefaultValue","propertyType","cc","char","charCodeAt","insertToSet","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","idx","groupIdx","saveState","restoreState","newState","pattern","consumeChar","disjunction","flags","loc","begin","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","isBacktracking","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","classPatternCharacterAtom","isClassAtom","from","classAtom","isRangeDash","classEscape","capturing","groupAst","number","nextChar","howMuch","isAtom","prevState","howMany","hexString","hexChar","BaseRegExpVisitor","visitChildren","child","hasOwnProperty","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","NEWLINE_REGEXP","regexpParser","visitor","TerminalRegExpVisitor","isStarting","endRegexpStack","multiline","endRegex","reset","regex","startRegexp","String","fromCharCode","escapedChar","escapeRegExp","RegExp","isMultilineComment","regexp","whitespaceCharacters","split","isWhitespace","ws","getAllReachableRules","grammar","allTerminals","ruleNames","entryRule","getEntryRule","rules","ast","entry","topMostRules","getHiddenRules","hidden","ruleDfs","visitedSet","refRule","ref","isCommentTerminal","terminalRule","terminalRegex","findNodeForProperty","nodes","findNodesForPropertyInternal","nodeFeature","grammarSource","feature","findNameAssignment","startNode","findNameAssignmentInternal","cache","go","refType","childAssignment","get","toLowerCase","typeRef","isDataTypeRule","isDataTypeRuleInternal","visited","definition","getExplicitRuleType","inferredType","dataType","returnType","getTypeName","isReturnType","actionType","getActionType","action","s","u","source","abstractElementToRegex","flagText","entries","WILDCARD","isTerminalAlternatives","terminalAlternativesToRegex","alternatives","withCardinality","elements","cardinality","lookahead","isTerminalGroup","terminalGroupToRegex","isCharacterRange","characterRangeToRegex","right","keywordToRegex","left","wrap","isNegatedToken","negateTokenToRegex","negate","terminal","isUntilToken","untilTokenToRegex","until","isRegexToken","lastSlash","lastIndexOf","regexFlags","isWildcard","keyword","PRINT_ERROR","msg","console","error","PRINT_WARNING","warn","timer","func","Date","getTime","val","time","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","tokenLabel","tokType","hasTokenLabel","isString","LABEL","AbstractProduction","_definition","prod","NonTerminal","assign","pickBy","v","referencedRule","Rule","orgText","Alternative","ignoreAmbiguities","Option","RepetitionMandatory","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","Alternation","hasPredicates","Terminal","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","label","terminalType","serializedTerminal","terminalLabel","PATTERN","isRegExp","GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","isOptionalProd","alreadyVisited","subProd","getProductionDslName","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","repSepProd","firstForTerminal","isSequenceProd","firstForSequence","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","isBranchingProd","firstForBranching","allAlternativesFirsts","innerProd","flatten","ResyncFollowsWalker","topProd","follows","startWalking","followName","buildBetweenProdsFollowPrefix","inner","occurenceInParent","fullRest","t_in_topProd_follows","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","code","rangeCode","minOptimizationVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","values","optimizedCharIdx","handleIgnoreCase","upperChar","lowerChar","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","end_of_input","start_of_input","addStartOfInput","addStickyFlag","isCustomPattern","isFunction","isShortPattern","LineTerminatorOptimizedTester","len","lastIndex","c","checkLineBreaksIssues","lineTerminatorCharCodes","issue","LexerDefinitionErrorType","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","details","getCharCodes","charsOrCodes","numOrString","addToMapOfArrays","charCodeToOptimizedIdxMap","charCode","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","tokenTypeIdx","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypes","tokenTypesAndParents","expandCategories","clone","categories","searching","compact","currTokType","CATEGORIES","newCategories","difference","assignTokenDefaultProps","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesProperty","categoryMatches","hasExtendingTokensTypesMapProperty","assignCategoriesMapProp","singleAssignCategoriesToksMap","assignCategoriesTokensProp","path","nextNode","pathNode","nextCategory","newPath","isTokenType","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","image","buildUnexpectedCharactersMessage","startOffset","column","charAt","MISSING_PATTERN","INVALID_PATTERN","EOI_ANCHOR_FOUND","UNSUPPORTED_FLAGS_FOUND","DUPLICATE_PATTERNS_FOUND","INVALID_GROUP_TYPE_FOUND","PUSH_MODE_DOES_NOT_EXIST","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","SOI_ANCHOR_FOUND","EMPTY_MATCH_PATTERN","NO_LINE_BREAKS_FLAGS","UNREACHABLE_PATTERN","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","positionTracking","lineTerminatorsPattern","lineTerminatorCharacters","safeMode","errorMessageProvider","traceInitPerf","skipValidations","recoveryEnabled","Lexer","lexerDefinition","config","lexerDefinitionErrors","lexerDefinitionWarning","patternIdxToConfig","charCodeToPatternIdxToConfig","modes","emptyGroups","trackStartLines","trackEndLines","hasCustom","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","traceInitMaxIdent","log","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","performRuntimeChecks","errors","currModeValue","currModeName","currIdx","isUndefined","longerAlt","LONGER_ALT","currLongerAlt","performWarningRuntimeChecks","trackLines","warnings","hasAnyLineBreak","allTokenTypes","concreteTokenTypes","reject","currType","NA","terminatorCharCodes","currIssue","warningDescriptor","LINE_BREAKS","allModeNames","currModDef","currModName","validatePatterns","validModesNames","missingResult","findMissingPatterns","tokenTypesWithMissingPattern","valid","invalidResult","findInvalidPatterns","tokenTypesWithInvalidPattern","validTokenTypes","validateRegExpPattern","withRegExpPatterns","findEndOfInputAnchor","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","findStartOfInputAnchor","StartAnchorFinder","startAnchorVisitor","findUnsupportedFlags","invalidFlags","findDuplicatePatterns","identicalPatterns","outerType","innerType","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","findEmptyMatchRegExps","matchesEmptyString","findInvalidGroupType","invalidTypes","clazz","GROUP","SKIPPED","findModesThatDoNotExist","validModes","invalidModes","PUSH_MODE","findUnreachablePatterns","canBeTested","str","noMetaChar","testIdx","testTokenType","regExpArray","currAnalyzeResult","analyzeTokenTypes","tracer","defaults","useSticky","debug","onlyRelevantTypes","initCharCodeToOptimizedIndexMap","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","currPattern","regExpSource","escapedRegExpString","wrappedRegExp","groupName","longerAltType","acc","x","canLineTerminator","isCustom","short","canBeOptimized","optimizedIdx","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","clearRegExpParserCache","tokenize","initialMode","tokenizeInternal","j","k","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","floor","matchedTokens","groups","cloneEmptyGroups","clonedResult","groupKeys","currKey","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","last","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","tokens","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","endOffset","tokenVector","tokenToAdd","POP_MODE","createToken","createTokenInternal","EOF","tokenMatcher","defaultParserErrorProvider","buildMismatchTokenMessage","expected","actual","buildNotAllInputParsedMessage","firstRedundant","buildNoViableAltMessage","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","buildEarlyExitMessage","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","getExtraProductionArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","currMessage","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","ruleName","pathNames","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","remainingPathWith","nextDef","newDef","currAlt","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getProdType","getLookaheadPaths","prodType","maxLookahead","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","dynamicTokensEnabled","numOfAlts","areAllOneTokenLookahead","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","currPathLength","nextToken","LA","singleTokenAlts","choiceToAlt","currExtendingType","buildSingleAlternativeLookaheadFunction","numOfPaths","singleTokensTypes","expectedTokenUniqueKey","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","identifyProductionForDuplicates","OccurrenceValidationCollector","allProductions","subrule","option","manySep","atLeastOne","atLeastOneSep","many","or","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","firstProd","currSubDef","rest","OrCollector","alternations","RepetitionCollector","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","setPrototypeOf","captureStackTrace","MismatchedTokenException","previousToken","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","args","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","currRuleName","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","RULE_STACK","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","ruleIdx","LLkLookaheadStrategy","DEFAULT_PARSER_CONFIG","validate","leftRecursionErrors","emptyAltErrors","validateEmptyOrAlternatives","ambiguousAltsErrors","validateAmbiguousAlternationAlternatives","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","validateEmptyOrAlternative","orCollector","currOr","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","globalMaxLookahead","ors","altsAmbiguityErrors","checkAlternativesAmbiguities","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","altsPrefixAmbiguityErrors","checkPrefixAlternativesAmbiguities","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","isStrictPrefixOfPath","prefix","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","topLevelRules","collectorVisitor","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","buildLookaheadForAlternation","buildLookaheadFuncForOr","laFuncBuilder","buildLookaheadForOptional","buildLookaheadFuncForOptionalProd","lookaheadBuilder","DslMethodsCollectorVisitor","dslMethods","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","setNodeLocationFull","defineNameProp","nameValue","defineProperty","enumerable","configurable","writable","defaultVisit","ctx","param","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","CstVisitorDefinitionError","REDUNDANT_METHOD","MISSING_METHOD","RECORDING_NULL_OBJECT","description","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","DEF","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","ALT","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","nodeLocationTracking","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","INVALID_RULE_NAME","DUPLICATE_RULE_NAME","INVALID_RULE_OVERRIDE","DUPLICATE_PRODUCTIONS","CONFLICT_TOKENS_RULES_NAMESPACE","INVALID_TOKEN_NAME","TOO_MANY_ALTS","CUSTOM_LOOKAHEAD_VALIDATION","EMPTY_ALT","Parser","performSelfAnalysis","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","resolveGrammar","actualOptions","topRulesTable","topLevels","refResolver","orgResolveGrammar","definitionErrors","validationErrors","validateGrammar","duplicateErrors","validateDuplicateProductions","productionGroups","groupBy","duplicates","currGroup","currDuplicates","defError","parameter","termsNamespaceConflictErrors","checkTerminalAndNoneTerminalsNameSpace","tokenNames","currToken","tooManyAltsErrors","curRule","validateTooManyAlts","duplicateRulesError","validateRuleDoesNotAlreadyExist","allRules","orgValidateGrammar","tokensMap","lookaheadValidationErrors","validateLookahead","lookaheadValidationErrorMessages","lookaheadStrategy","errorMessage","allFollows","computeAllProdsFollows","topProductions","reSyncFollows","currRefsFollow","resyncFollows","_b","initialize","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","tokenVocabulary","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","applyMixins","derivedCtor","baseCtors","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","Recoverable","getTokenToInsert","tokToInsert","isInsertedInRecovery","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","previous","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","pathOccurrenceStack","currShortName","LooksAhead","lookAheadFuncsCache","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","TreeBuilder","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","location","fullRuleName","create","ruleCstNode","prevToken","consumedToken","rootCst","addTerminalToCst","tokenTypeName","ruleCstResult","preCstNode","addNoneTerminalToCst","ruleResult","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","createBaseSemanticVisitorConstructor","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","validateMissingCstMethods","missingRuleNames","methodName","errorMessages","currDefError","_RULE_NAMES","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","LexerAdapter","tokVector","tokVectorLength","newInput","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","RecognizerEngine","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","isObject","noTokenCategoriesUsed","tokenConstructor","defineRule","impl","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","cst","invokeRuleCatch","ruleFinallyStateUpdate","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","ARGS","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","RecognizerApi","ACTION","consume","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","RULE","implementation","ruleImplementation","OVERRIDE_RULE","ruleErrors","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","serializeGrammar","topRules","ErrorHandler","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","ContentAssist","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","GastRecorder","RECORDING_PHASE","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","JSON","stringify","newNoneTerminal","PerformanceTracer","userTraceInitPerf","traceIsNumber","EmbeddedActionsParser","configClone","buildATNKey","AbstractTransition","target","isEpsilon","AtomTransition","EpsilonTransition","RuleTransition","ruleStart","followState","atn","production","tokenRef","ruleRef","currentRule","nonTerminal","ruleToStartState","addTransition","defineDecisionState","makeAlts","optional","handle","epsilon","decisionMap","block","starState","star","repetitionSep","plusState","plus","repetitionMandatorySep","handles","makeBlock","altsLength","transition","transitions","isRuleTransition","removeState","sep","blkStart","blkEnd","loop","loopback","loopEnd","decisionStates","decision","buildRuleHandle","stop","ruleToStopState","partial","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","states","splice","DFA_ERROR","ATNConfigSet","configs","finalize","getATNConfigKey","stack","createDFACache","startState","predicateSet","atnStartState","PredicateSet","is","EMPTY_PREDICATES","LLStarLookaheadStrategy","logging","createATN","createRuleStartAndStopATNStates","ruleLength","ruleBlock","dfas","initATNSimulator","decisionLength","decisionToDFA","decisionIndex","isLL1Sequence","prediction","gate","adaptivePredict","g","sequences","allowEmpty","fullSet","altSet","indices","dfaCaches","dfa","closure","computeStartState","atnState","numberOfTransitions","addDFAState","newDFAState","performLookahead","s0","previousD","d","getExistingTargetState","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","reach","computeReachSet","intermediate","skippedStopStates","transitionLength","getReachableTarget","hasConfigInRuleStopState","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","hasConflictTerminatingPrediction","allConfigsInRuleStopStates","altSets","getConflictingAltSets","configToAlts","hasConflictingAltSet","hasStateAssociatedWithOneAlt","reportLookaheadAmbiguity","buildAmbiguityError","current","nextTransitions","actualToken","possibleTokenTypes","nextTokenTypes","uniqBy","tokenPath","edges","mapKey","p","atnStack","getEpsilonTarget","DocumentUri","URI","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRange","DiagnosticRelatedInformation","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","InsertReplaceEdit","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlight","SymbolInformation","WorkspaceSymbol","DocumentSymbol","MIN_VALUE","MAX_VALUE","Number","candidate","Is","objectLiteral","one","two","three","four","uri","string","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","textEdit","additionalTextEdits","typedArray","startCharacter","endCharacter","kind","collapsedText","defined","href","severity","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","boolean","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","version","languageId","PlainText","Markdown","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","containerName","selectionRange","deprecated","tags","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","TextDocument","CodeActionTriggerKind","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","parent","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","mergeSort","compare","slice","leftIdx","rightIdx","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","low","high","mid","lineOffset","check","CstNodeBuilder","nodeStack","rootNode","buildRootNode","RootCstNodeImpl","buildCompositeNode","compositeNode","CompositeCstNodeImpl","buildLeafNode","leafNode","LeafCstNodeImpl","removeNode","addHiddenNodes","added","unshift","construct","AbstractCstNode","_astNode","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","addParents","_text","DatatypeSymbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","_unorderedGroups","lexer","LanguageMetaData","mode","wrapper","ChevrotainWrapper","ParserConfig","ParserErrorMessageProvider","choices","wrapOr","callback","wrapOption","wrapMany","wrapAtLeastOne","getRule","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","wrapSelfAnalysis","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","AstReflection","computeRuleType","ruleMethod","DEFINE_RULE","startImplementation","mainRule","fragment","lexerResult","clear","lexerReport","report","createNode","extractHiddenTokens","hiddenTokens","wrapConsume","isValidToken","assignment","isCrossRef","getAssignment","convertedValue","convert","operator","subruleResult","wrapSubrule","performSubruleAssignment","newItem","assignWithoutOverride","linkContentToContainer","$containerProperty","$containerIndex","assignMandatoryProperties","typeMetaData","genericNode","buildReference","existingValue","newValue","targetCstNode","AbstractParserErrorMessageProvider","LangiumParserErrorMessageProvider","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","before","after","defaultConfig","useDefaultLookahead","createParser","buildRules","parserContext","reachable","parserRules","buildElement","ignoreGuard","method","buildKeyword","buildAction","buildCrossReference","buildRuleCall","ruleCall","buildRuleCallPredicate","namedArgs","buildPredicate","ruleArgs","getToken","buildAlternatives","methods","predicatedMethod","guard","getGuardCondition","buildUnorderedGroup","orIdx","idFunc","lParser","wrapped","groupState","trackedAlternatives","delete","buildGroup","isEndOfFile","condition","isDisjunction","isConjunction","isNegation","isParameterReference","isBooleanLiteral","true","guardCondition","crossRef","assignTerminal","getRuleName","DefaultTokenBuilder","buildTokens","reachableRules","terminalTokens","buildTerminalTokens","buildKeywordTokens","terminalToken","flushLexingReport","popDiagnostics","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","sort","buildKeywordToken","caseInsensitive","keywordPattern","buildKeywordPattern","findLongerAlt","getCaseInsensitivePattern","longerAlts","partialMatches","partialRegExp","re","process","tmp","appendRaw","nbChars","substr","appendOptional","DefaultValueConverter","getCrossReferenceTerminal","nameAssigment","runConverter","convertInt","convertString","convertID","getRuleType","_c","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","lastTick","OperationCancelled","isOperationCancelled","interruptAndCheck","_interruptAndCheck","CancellationToken","None","performance","now","delayNextTick","Promise","resolve","setImmediate","setTimeout","isCancellationRequested","Deferred","promise","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","rangeLength","LIB","isAtLineStart","textOffset","getWellformedEdit","spans","TypeError","r","n","o","h","cwd","normalize","isAbsolute","relative","f","l","_makeLong","dirname","basename","extname","format","base","ext","dir","delimiter","win32","posix","exports","toStringTag","Utils","P","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","with","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","A","w","joinPath","resolvePath","esm_URI","UriUtils","equals","toPath","fromParts","toParts","repeat","DocumentState","Changed","Parsed","IndexedContent","ComputedScopes","Linked","IndexedReferences","Validated","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","workspace","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","_this","cancellationToken","readFile","createAsync","fromTextDocument","fromString","fromModel","model","$model","parseResult","createLangiumDocument","cancelToken","_this2","parseAsync","textDocumentGetter","createTextDocumentGetter","_this3","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","LangiumDocumentFactory","all","addDocument","uriString","getOrCreateDocument","_this4","createDocument","hasDocument","invalidateDocument","langiumDoc","unlink","precomputedScopes","deleteDocument","ref_resolving","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","doLink","_ref","getCandidate","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","getScope","getElement","refNode","refText","$refNode","isAstNodeDescription","refData","getLinkedNode","descr","getAstNodePath","$nodeDescription","nodeDescription","getAstNode","targetDescription","referenceType","DefaultNameProvider","getName","isNamed","getNameNode","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","findAssignment","nodeElem","nameNode","isChildNode","findDeclarationNode","findReferences","targetNode","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","sourceUri","sourcePath","segment","local","MultiMap","addAll","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","_x3","parentNode","exportNode","createDescription","computeLocalScopes","_x4","scopes","processNode","StreamScope","outerScope","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","dispose","throwIfDisposed","SimpleCache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onBuildPhase","onUpdate","_changed","deleted","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","serializeOptions","specificReplacer","replacer","defaultReplacer","currentDocument","space","deserialize","deserializeOptions","linkNode","sourceText","textRegions","comments","uriConverter","_d","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","$sourceText","comment","getComment","$comment","createDocumentSegment","assignments","propertyAssignments","findNodesForProperty","containerProperty","containerIndex","propertyName","reviveReference","mutable","getRefNode","fragmentIndex","DefaultServiceRegistry","fileExtensionMap","languageIdMap","fileExtensions","singleton","hasServices","diagnosticData","ValidationCategory","entriesBefore","entriesAfter","checksRecord","thisObj","category","callbacks","wrapValidationException","addEntry","handleException","functionality","messageContext","messageDetails","getChecks","registerBeforeDocument","checkBefore","wrapPreparationException","registerAfterDocument","checkAfter","_ref2","_x5","_x6","_x7","checksBefore","checksAfter","DefaultDocumentValidator","validationRegistry","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","DocumentValidator","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","_options","lexerDiagnostics","lexerDiagnostic","diagnostic","toDiagnosticSeverity","toDiagnosticData","getSource","parserError","linkingError","toDiagnostic","containerType","validationItems","acceptor","validateAstBefore","validateAstNodes","validateAstAfter","_x8","_x9","_x0","_x1","_x10","_x11","_this5","getDiagnosticRange","findNodeForKeyword","findNodesForKeywordInternal","treeIterator","keywordNodes","childNode","LexingWarning","LexingInfo","LexingHint","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","currentValue","propertyIndex","Disposable","DefaultConfigurationProvider","_ready","settings","workspaceConfig","onConfigurationSectionUpdateEmitter","Emitter","ready","params","capabilities","configuration","initialized","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","fire","getConfiguration","sectionName","onConfigurationSectionUpdate","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","documentPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deletedUri","remove","changedUri","newDocument","allChangedUris","shouldRelink","rebuildDocuments","sortDocuments","listener","hasTextDocument","changedUris","isAffected","prepareBuild","runCancelable","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","targetState","filtered","notifyDocumentPhase","targetStateDocs","notifyBuildPhase","onDocumentPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","onCancellationRequested","_this6","listenersCopy","_this7","getBuildOptions","_this8","validationSetting","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","workspaceFolders","folders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexerErrorMessageProvider","DEFAULT_TOKENIZE_OPTIONS","DefaultLexer","LexerErrorMessageProvider","tokenBuilder","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","chevrotainResult","isIMultiModeLexerDefinition","res","isTokenTypeArray","getLines","tagRegex","inlineTagRegex","buildInlineTokens","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","skipWhitespace","lastCharacter","parseJSDocElement","parseJSDocTag","parseJSDocText","appendEmptyLine","JSDocLineImpl","inlines","firstToken","lastToken","lines","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOptions","normalizeOption","escaped","JSDocCommentImpl","getTag","getAllTags","getTags","fillNewlines","toMarkdown","renderTag","toMarkdownDefault","rendered","renderInlineTag","tag","display","displayStart","renderLink","renderLinkDefault","marker","JSDocDocumentationProvider","getDocumentation","isJSDoc","normalizedOptions","firstRegex","lastRegex","parseJSDoc","opts","currentLine","currentCharacter","tagMatch","fullMatch","inlineTagMatches","matchAll","parseJSDocComment","startPosition","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","findCommentNode","getPreviousNode","endIndex","multilineCommentRules","DefaultAsyncParser","syncParser","_cancelToken","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","startCancelableOperation","enqueue","read","queue","deferred","performNextOperation","shift","cancel","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateLexerReport","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","dehydrateCstNode","arr","dehydrateReference","getGrammarElementId","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","DocumentationProvider","createGrammarConfig","nameRegexp","createLangiumParser","prepareLangiumParser","CompletionParser","createCompletionParser","References","serializer","Hydrator","JsonSerializer","WorkspaceManager","ConfigurationProvider","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","isProxy","module","injector","proxy","Proxy","deleteProperty","prop","_resolve","ownKeys","__requested__","cause","value2","value1","EmptyFileSystemProvider","minimalGrammarModule","minimalSharedGrammarModule","loadGrammarFromJson","json","createMinimalGrammarServices","__defProp","Statement","isArchitecture","Axis","Branch","isBranch","Checkout","CherryPicking","ClassDefStatement","Commit","isCommit","Curve","Edge","Entry","isGitGraph","isInfo","Item","Junction","Merge","isMerge","isPacket","PacketBlock","isPacketBlock","isPie","PieSection","isPieSection","Service","isTreemap","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","loadedRadarGrammar","loadedTreemapGrammar","TreemapRow","Direction","Leaf","Section","MermaidAstReflection","InfoGrammar","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","RadarGrammar","TreemapGrammar","InfoLanguageMetaData","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","RadarLanguageMetaData","TreemapLanguageMetaData","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","runCommonConverter","_rule","_input","keywords","_staticBlock4","_staticBlock5"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-T53DSG4Q.mjs","./node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-LHMN2FUI.mjs","./node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-76Q3JFCE.mjs","./node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-LBM3YZW2.mjs","./node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","./node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-S6J4BHB3.mjs","./node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-O7ZBX7Z2.mjs","./node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-FWNWRKHM.mjs","./node_modules/langium/lib/syntax-tree.js","./node_modules/langium/lib/utils/stream.js","./node_modules/langium/lib/utils/cst-utils.js","./node_modules/langium/lib/utils/errors.js","./node_modules/langium/lib/languages/generated/ast.js","./node_modules/langium/lib/utils/ast-utils.js","./node_modules/@chevrotain/regexp-to-ast/lib/src/utils.js","./node_modules/@chevrotain/regexp-to-ast/lib/src/character-classes.js","./node_modules/@chevrotain/regexp-to-ast/lib/src/regexp-parser.js","./node_modules/@chevrotain/regexp-to-ast/lib/src/base-regexp-visitor.js","./node_modules/langium/lib/utils/regexp-utils.js","./node_modules/langium/lib/utils/grammar-utils.js","./node_modules/@chevrotain/utils/lib/src/print.js","./node_modules/@chevrotain/utils/lib/src/timer.js","./node_modules/@chevrotain/utils/lib/src/to-fast-properties.js","./node_modules/@chevrotain/gast/lib/src/model.js","./node_modules/@chevrotain/gast/lib/src/visitor.js","./node_modules/@chevrotain/gast/lib/src/helpers.js","./node_modules/chevrotain/lib/src/parse/grammar/rest.js","./node_modules/chevrotain/lib/src/parse/grammar/first.js","./node_modules/chevrotain/lib/src/parse/grammar/follow.js","./node_modules/chevrotain/lib/src/parse/constants.js","./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js","./node_modules/chevrotain/lib/src/scan/reg_exp.js","./node_modules/chevrotain/lib/src/scan/lexer.js","./node_modules/chevrotain/lib/src/scan/tokens.js","./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js","./node_modules/chevrotain/lib/src/scan/lexer_public.js","./node_modules/chevrotain/lib/src/scan/tokens_public.js","./node_modules/chevrotain/lib/src/parse/errors_public.js","./node_modules/chevrotain/lib/src/parse/grammar/resolver.js","./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js","./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js","./node_modules/chevrotain/lib/src/parse/grammar/checks.js","./node_modules/chevrotain/lib/src/parse/exceptions_public.js","./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js","./node_modules/chevrotain/lib/src/parse/grammar/keys.js","./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js","./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js","./node_modules/chevrotain/lib/src/parse/cst/cst.js","./node_modules/chevrotain/lib/src/lang/lang_extensions.js","./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js","./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js","./node_modules/chevrotain/lib/src/parse/parser/parser.js","./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js","./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js","./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js","./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js","./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js","./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js","./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js","./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js","./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js","./node_modules/chevrotain-allstar/lib/atn.js","./node_modules/chevrotain-allstar/lib/dfa.js","./node_modules/chevrotain-allstar/lib/all-star-lookahead.js","./node_modules/vscode-languageserver-types/lib/esm/main.js","./node_modules/langium/lib/parser/cst-node-builder.js","./node_modules/langium/lib/parser/langium-parser.js","./node_modules/langium/lib/parser/parser-builder-base.js","./node_modules/langium/lib/parser/token-builder.js","./node_modules/langium/lib/parser/value-converter.js","./node_modules/langium/lib/utils/promise-utils.js","./node_modules/vscode-languageserver-textdocument/lib/esm/main.js","./node_modules/vscode-uri/lib/esm/index.mjs","./node_modules/langium/lib/utils/uri-utils.js","./node_modules/langium/lib/workspace/documents.js","./node_modules/langium/lib/references/linker.js","./node_modules/langium/lib/references/name-provider.js","./node_modules/langium/lib/references/references.js","./node_modules/langium/lib/utils/collections.js","./node_modules/langium/lib/references/scope-computation.js","./node_modules/langium/lib/references/scope.js","./node_modules/langium/lib/utils/caching.js","./node_modules/langium/lib/references/scope-provider.js","./node_modules/langium/lib/serializer/json-serializer.js","./node_modules/langium/lib/service-registry.js","./node_modules/langium/lib/validation/validation-registry.js","./node_modules/langium/lib/validation/document-validator.js","./node_modules/langium/lib/workspace/ast-descriptions.js","./node_modules/langium/lib/workspace/ast-node-locator.js","./node_modules/langium/lib/utils/disposable.js","./node_modules/langium/lib/workspace/configuration.js","./node_modules/langium/lib/workspace/document-builder.js","./node_modules/langium/lib/workspace/index-manager.js","./node_modules/langium/lib/workspace/workspace-manager.js","./node_modules/langium/lib/parser/lexer.js","./node_modules/langium/lib/documentation/jsdoc.js","./node_modules/langium/lib/documentation/documentation-provider.js","./node_modules/langium/lib/documentation/comment-provider.js","./node_modules/langium/lib/parser/async-parser.js","./node_modules/langium/lib/workspace/workspace-lock.js","./node_modules/langium/lib/serializer/hydrator.js","./node_modules/langium/lib/default-module.js","./node_modules/langium/lib/languages/grammar-config.js","./node_modules/langium/lib/parser/langium-parser-builder.js","./node_modules/langium/lib/parser/completion-parser-builder.js","./node_modules/langium/lib/dependency-injection.js","./node_modules/langium/lib/workspace/file-system-provider.js","./node_modules/langium/lib/utils/grammar-loader.js","./node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-FPAJGGOC.mjs"],"sourcesContent":["import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  RadarGeneratedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/radar/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"RadarTokenBuilder\");\n  }\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n};\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Radar = inject(\n    createDefaultCoreModule({ shared }),\n    RadarGeneratedModule,\n    RadarModule\n  );\n  shared.ServiceRegistry.register(Radar);\n  return { shared, Radar };\n}\n__name(createRadarServices, \"createRadarServices\");\n\nexport {\n  RadarModule,\n  createRadarServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-S6J4BHB3.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-LBM3YZW2.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-76Q3JFCE.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-T53DSG4Q.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-O7ZBX7Z2.mjs\";\nimport {\n  RadarModule,\n  createRadarServices\n} from \"./chunks/mermaid-parser.core/chunk-LHMN2FUI.mjs\";\nimport {\n  TreemapModule,\n  createTreemapServices\n} from \"./chunks/mermaid-parser.core/chunk-FWNWRKHM.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  Statement,\n  Treemap,\n  TreemapGeneratedModule,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemap\n} from \"./chunks/mermaid-parser.core/chunk-FPAJGGOC.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-NVLQJR56.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-BFZMPI3H.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-7BOR55EZ.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-U656AL7Q.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-F6HP7TQM.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\"),\n  radar: /* @__PURE__ */ __name(async () => {\n    const { createRadarServices: createRadarServices2 } = await import(\"./chunks/mermaid-parser.core/radar-NHE76QYJ.mjs\");\n    const parser = createRadarServices2().Radar.parser.LangiumParser;\n    parsers.radar = parser;\n  }, \"radar\"),\n  treemap: /* @__PURE__ */ __name(async () => {\n    const { createTreemapServices: createTreemapServices2 } = await import(\"./chunks/mermaid-parser.core/treemap-KMMF4GRG.mjs\");\n    const parser = createTreemapServices2().Treemap.parser.LangiumParser;\n    parsers.treemap = parser;\n  }, \"treemap\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  RadarModule,\n  Statement,\n  Treemap,\n  TreemapGeneratedModule,\n  TreemapModule,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  createRadarServices,\n  createTreemapServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemap,\n  parse\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  TreemapGeneratedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/treemap/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/treemap/tokenBuilder.ts\nvar TreemapTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"TreemapTokenBuilder\");\n  }\n  constructor() {\n    super([\"treemap\"]);\n  }\n};\n\n// src/language/treemap/valueConverter.ts\nvar classDefRegex = /classDef\\s+([A-Z_a-z]\\w+)(?:\\s+([^\\n\\r;]*))?;?/;\nvar TreemapValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"TreemapValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"NUMBER2\") {\n      return parseFloat(input.replace(/,/g, \"\"));\n    } else if (rule.name === \"SEPARATOR\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"STRING2\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"INDENTATION\") {\n      return input.length;\n    } else if (rule.name === \"ClassDef\") {\n      if (typeof input !== \"string\") {\n        return input;\n      }\n      const match = classDefRegex.exec(input);\n      if (match) {\n        return {\n          $type: \"ClassDefStatement\",\n          className: match[1],\n          styleText: match[2] || void 0\n        };\n      }\n    }\n    return void 0;\n  }\n};\n\n// src/language/treemap/treemap-validator.ts\nfunction registerValidationChecks(services) {\n  const validator = services.validation.TreemapValidator;\n  const registry = services.validation.ValidationRegistry;\n  if (registry) {\n    const checks = {\n      Treemap: validator.checkSingleRoot.bind(validator)\n      // Remove unused validation for TreemapRow\n    };\n    registry.register(checks, validator);\n  }\n}\n__name(registerValidationChecks, \"registerValidationChecks\");\nvar TreemapValidator = class {\n  static {\n    __name(this, \"TreemapValidator\");\n  }\n  /**\n   * Validates that a treemap has only one root node.\n   * A root node is defined as a node that has no indentation.\n   */\n  checkSingleRoot(doc, accept) {\n    let rootNodeIndentation;\n    for (const row of doc.TreemapRows) {\n      if (!row.item) {\n        continue;\n      }\n      if (rootNodeIndentation === void 0 && // Check if this is a root node (no indentation)\n      row.indent === void 0) {\n        rootNodeIndentation = 0;\n      } else if (row.indent === void 0) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      } else if (rootNodeIndentation !== void 0 && rootNodeIndentation >= parseInt(row.indent, 10)) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      }\n    }\n  }\n};\n\n// src/language/treemap/module.ts\nvar TreemapModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new TreemapTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new TreemapValueConverter(), \"ValueConverter\")\n  },\n  validation: {\n    TreemapValidator: /* @__PURE__ */ __name(() => new TreemapValidator(), \"TreemapValidator\")\n  }\n};\nfunction createTreemapServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Treemap = inject(\n    createDefaultCoreModule({ shared }),\n    TreemapGeneratedModule,\n    TreemapModule\n  );\n  shared.ServiceRegistry.register(Treemap);\n  registerValidationChecks(Treemap);\n  return { shared, Treemap };\n}\n__name(createTreemapServices, \"createTreemapServices\");\n\nexport {\n  TreemapModule,\n  createTreemapServices\n};\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport function isAstNode(obj) {\n    return typeof obj === 'object' && obj !== null && typeof obj.$type === 'string';\n}\nexport function isReference(obj) {\n    return typeof obj === 'object' && obj !== null && typeof obj.$refText === 'string';\n}\nexport function isAstNodeDescription(obj) {\n    return typeof obj === 'object' && obj !== null\n        && typeof obj.name === 'string'\n        && typeof obj.type === 'string'\n        && typeof obj.path === 'string';\n}\nexport function isLinkingError(obj) {\n    return typeof obj === 'object' && obj !== null\n        && isAstNode(obj.container)\n        && isReference(obj.reference)\n        && typeof obj.message === 'string';\n}\n/**\n * An abstract implementation of the {@link AstReflection} interface.\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\n */\nexport class AbstractAstReflection {\n    constructor() {\n        this.subtypes = {};\n        this.allSubtypes = {};\n    }\n    isInstance(node, type) {\n        return isAstNode(node) && this.isSubtype(node.$type, type);\n    }\n    isSubtype(subtype, supertype) {\n        if (subtype === supertype) {\n            return true;\n        }\n        let nested = this.subtypes[subtype];\n        if (!nested) {\n            nested = this.subtypes[subtype] = {};\n        }\n        const existing = nested[supertype];\n        if (existing !== undefined) {\n            return existing;\n        }\n        else {\n            const result = this.computeIsSubtype(subtype, supertype);\n            nested[supertype] = result;\n            return result;\n        }\n    }\n    getAllSubTypes(type) {\n        const existing = this.allSubtypes[type];\n        if (existing) {\n            return existing;\n        }\n        else {\n            const allTypes = this.getAllTypes();\n            const types = [];\n            for (const possibleSubType of allTypes) {\n                if (this.isSubtype(possibleSubType, type)) {\n                    types.push(possibleSubType);\n                }\n            }\n            this.allSubtypes[type] = types;\n            return types;\n        }\n    }\n}\nexport function isCompositeCstNode(node) {\n    return typeof node === 'object' && node !== null && Array.isArray(node.content);\n}\nexport function isLeafCstNode(node) {\n    return typeof node === 'object' && node !== null && typeof node.tokenType === 'object';\n}\nexport function isRootCstNode(node) {\n    return isCompositeCstNode(node) && typeof node.fullText === 'string';\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n/**\n * The default implementation of `Stream` works with two input functions:\n *  - The first function creates the initial state of an iteration.\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\n */\nexport class StreamImpl {\n    constructor(startFn, nextFn) {\n        this.startFn = startFn;\n        this.nextFn = nextFn;\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n    [Symbol.iterator]() {\n        return this.iterator();\n    }\n    isEmpty() {\n        const iterator = this.iterator();\n        return Boolean(iterator.next().done);\n    }\n    count() {\n        const iterator = this.iterator();\n        let count = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            count++;\n            next = iterator.next();\n        }\n        return count;\n    }\n    toArray() {\n        const result = [];\n        const iterator = this.iterator();\n        let next;\n        do {\n            next = iterator.next();\n            if (next.value !== undefined) {\n                result.push(next.value);\n            }\n        } while (!next.done);\n        return result;\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap(keyFn, valueFn) {\n        const entryStream = this.map(element => [\n            keyFn ? keyFn(element) : element,\n            valueFn ? valueFn(element) : element\n        ]);\n        return new Map(entryStream);\n    }\n    toString() {\n        return this.join();\n    }\n    concat(other) {\n        return new StreamImpl(() => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }), state => {\n            let result;\n            if (!state.firstDone) {\n                do {\n                    result = this.nextFn(state.first);\n                    if (!result.done) {\n                        return result;\n                    }\n                } while (!result.done);\n                state.firstDone = true;\n            }\n            do {\n                result = state.iterator.next();\n                if (!result.done) {\n                    return result;\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    join(separator = ',') {\n        const iterator = this.iterator();\n        let value = '';\n        let result;\n        let addSeparator = false;\n        do {\n            result = iterator.next();\n            if (!result.done) {\n                if (addSeparator) {\n                    value += separator;\n                }\n                value += toString(result.value);\n            }\n            addSeparator = true;\n        } while (!result.done);\n        return value;\n    }\n    indexOf(searchElement, fromIndex = 0) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (index >= fromIndex && next.value === searchElement) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    every(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (!predicate(next.value)) {\n                return false;\n            }\n            next = iterator.next();\n        }\n        return true;\n    }\n    some(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    forEach(callbackfn) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            callbackfn(next.value, index);\n            next = iterator.next();\n            index++;\n        }\n    }\n    map(callbackfn) {\n        return new StreamImpl(this.startFn, (state) => {\n            const { done, value } = this.nextFn(state);\n            if (done) {\n                return DONE_RESULT;\n            }\n            else {\n                return { done: false, value: callbackfn(value) };\n            }\n        });\n    }\n    filter(predicate) {\n        return new StreamImpl(this.startFn, state => {\n            let result;\n            do {\n                result = this.nextFn(state);\n                if (!result.done && predicate(result.value)) {\n                    return result;\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    nonNullable() {\n        return this.filter(e => e !== undefined && e !== null);\n    }\n    reduce(callbackfn, initialValue) {\n        const iterator = this.iterator();\n        let previousValue = initialValue;\n        let next = iterator.next();\n        while (!next.done) {\n            if (previousValue === undefined) {\n                previousValue = next.value;\n            }\n            else {\n                previousValue = callbackfn(previousValue, next.value);\n            }\n            next = iterator.next();\n        }\n        return previousValue;\n    }\n    reduceRight(callbackfn, initialValue) {\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\n    }\n    recursiveReduce(iterator, callbackfn, initialValue) {\n        const next = iterator.next();\n        if (next.done) {\n            return initialValue;\n        }\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\n        if (previousValue === undefined) {\n            return next.value;\n        }\n        return callbackfn(previousValue, next.value);\n    }\n    find(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return next.value;\n            }\n            next = iterator.next();\n        }\n        return undefined;\n    }\n    findIndex(predicate) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    includes(searchElement) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (next.value === searchElement) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    flatMap(callbackfn) {\n        return new StreamImpl(() => ({ this: this.startFn() }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    }\n                    else {\n                        return next;\n                    }\n                }\n                const { done, value } = this.nextFn(state.this);\n                if (!done) {\n                    const mapped = callbackfn(value);\n                    if (isIterable(mapped)) {\n                        state.iterator = mapped[Symbol.iterator]();\n                    }\n                    else {\n                        return { done: false, value: mapped };\n                    }\n                }\n            } while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    flat(depth) {\n        if (depth === undefined) {\n            depth = 1;\n        }\n        if (depth <= 0) {\n            return this;\n        }\n        const stream = depth > 1 ? this.flat(depth - 1) : this;\n        return new StreamImpl(() => ({ this: stream.startFn() }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    }\n                    else {\n                        return next;\n                    }\n                }\n                const { done, value } = stream.nextFn(state.this);\n                if (!done) {\n                    if (isIterable(value)) {\n                        state.iterator = value[Symbol.iterator]();\n                    }\n                    else {\n                        return { done: false, value: value };\n                    }\n                }\n            } while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    head() {\n        const iterator = this.iterator();\n        const result = iterator.next();\n        if (result.done) {\n            return undefined;\n        }\n        return result.value;\n    }\n    tail(skipCount = 1) {\n        return new StreamImpl(() => {\n            const state = this.startFn();\n            for (let i = 0; i < skipCount; i++) {\n                const next = this.nextFn(state);\n                if (next.done) {\n                    return state;\n                }\n            }\n            return state;\n        }, this.nextFn);\n    }\n    limit(maxSize) {\n        return new StreamImpl(() => ({ size: 0, state: this.startFn() }), state => {\n            state.size++;\n            if (state.size > maxSize) {\n                return DONE_RESULT;\n            }\n            return this.nextFn(state.state);\n        });\n    }\n    distinct(by) {\n        return new StreamImpl(() => ({ set: new Set(), internalState: this.startFn() }), state => {\n            let result;\n            do {\n                result = this.nextFn(state.internalState);\n                if (!result.done) {\n                    const value = by ? by(result.value) : result.value;\n                    if (!state.set.has(value)) {\n                        state.set.add(value);\n                        return result;\n                    }\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    exclude(other, key) {\n        const otherKeySet = new Set();\n        for (const item of other) {\n            const value = key ? key(item) : item;\n            otherKeySet.add(value);\n        }\n        return this.filter(e => {\n            const ownKey = key ? key(e) : e;\n            return !otherKeySet.has(ownKey);\n        });\n    }\n}\nfunction toString(item) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    if (typeof item === 'undefined') {\n        return 'undefined';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof item.toString === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return item.toString();\n    }\n    return Object.prototype.toString.call(item);\n}\nfunction isIterable(obj) {\n    return !!obj && typeof obj[Symbol.iterator] === 'function';\n}\n/**\n * An empty stream of any type.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const EMPTY_STREAM = new StreamImpl(() => undefined, () => DONE_RESULT);\n/**\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\n */\nexport const DONE_RESULT = Object.freeze({ done: true, value: undefined });\n/**\n * Create a stream from one or more iterables or array-likes.\n */\nexport function stream(...collections) {\n    if (collections.length === 1) {\n        const collection = collections[0];\n        if (collection instanceof StreamImpl) {\n            return collection;\n        }\n        if (isIterable(collection)) {\n            return new StreamImpl(() => collection[Symbol.iterator](), (iterator) => iterator.next());\n        }\n        if (typeof collection.length === 'number') {\n            return new StreamImpl(() => ({ index: 0 }), (state) => {\n                if (state.index < collection.length) {\n                    return { done: false, value: collection[state.index++] };\n                }\n                else {\n                    return DONE_RESULT;\n                }\n            });\n        }\n    }\n    if (collections.length > 1) {\n        return new StreamImpl(() => ({ collIndex: 0, arrIndex: 0 }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (!next.done) {\n                        return next;\n                    }\n                    state.iterator = undefined;\n                }\n                if (state.array) {\n                    if (state.arrIndex < state.array.length) {\n                        return { done: false, value: state.array[state.arrIndex++] };\n                    }\n                    state.array = undefined;\n                    state.arrIndex = 0;\n                }\n                if (state.collIndex < collections.length) {\n                    const collection = collections[state.collIndex++];\n                    if (isIterable(collection)) {\n                        state.iterator = collection[Symbol.iterator]();\n                    }\n                    else if (collection && typeof collection.length === 'number') {\n                        state.array = collection;\n                    }\n                }\n            } while (state.iterator || state.array || state.collIndex < collections.length);\n            return DONE_RESULT;\n        });\n    }\n    return EMPTY_STREAM;\n}\n/**\n * The default implementation of `TreeStream` takes a root element and a function that computes the\n * children of its argument. Whether the root node included in the stream is controlled with the\n * `includeRoot` option, which defaults to `false`.\n */\nexport class TreeStreamImpl extends StreamImpl {\n    constructor(root, children, options) {\n        super(() => ({\n            iterators: (options === null || options === void 0 ? void 0 : options.includeRoot) ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\n            pruned: false\n        }), state => {\n            if (state.pruned) {\n                state.iterators.pop();\n                state.pruned = false;\n            }\n            while (state.iterators.length > 0) {\n                const iterator = state.iterators[state.iterators.length - 1];\n                const next = iterator.next();\n                if (next.done) {\n                    state.iterators.pop();\n                }\n                else {\n                    state.iterators.push(children(next.value)[Symbol.iterator]());\n                    return next;\n                }\n            }\n            return DONE_RESULT;\n        });\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            prune: () => {\n                iterator.state.pruned = true;\n            },\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n}\n/**\n * A set of utility functions that reduce a stream to a single value.\n */\nexport var Reduction;\n(function (Reduction) {\n    /**\n     * Compute the sum of a number stream.\n     */\n    function sum(stream) {\n        return stream.reduce((a, b) => a + b, 0);\n    }\n    Reduction.sum = sum;\n    /**\n     * Compute the product of a number stream.\n     */\n    function product(stream) {\n        return stream.reduce((a, b) => a * b, 0);\n    }\n    Reduction.product = product;\n    /**\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    function min(stream) {\n        return stream.reduce((a, b) => Math.min(a, b));\n    }\n    Reduction.min = min;\n    /**\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    function max(stream) {\n        return stream.reduce((a, b) => Math.max(a, b));\n    }\n    Reduction.max = max;\n})(Reduction || (Reduction = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\nimport { TreeStreamImpl } from './stream.js';\n/**\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamCst(node) {\n    return new TreeStreamImpl(node, element => {\n        if (isCompositeCstNode(element)) {\n            return element.content;\n        }\n        else {\n            return [];\n        }\n    }, { includeRoot: true });\n}\n/**\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\n */\nexport function flattenCst(node) {\n    return streamCst(node).filter(isLeafCstNode);\n}\n/**\n * Determines whether the specified cst node is a child of the specified parent node.\n */\nexport function isChildNode(child, parent) {\n    while (child.container) {\n        child = child.container;\n        if (child === parent) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tokenToRange(token) {\n    // Chevrotain uses 1-based indices everywhere\n    // So we subtract 1 from every value to align with the LSP\n    return {\n        start: {\n            character: token.startColumn - 1,\n            line: token.startLine - 1\n        },\n        end: {\n            character: token.endColumn, // endColumn uses the correct index\n            line: token.endLine - 1\n        }\n    };\n}\nexport function toDocumentSegment(node) {\n    if (!node) {\n        return undefined;\n    }\n    const { offset, end, range } = node;\n    return {\n        range,\n        offset,\n        end,\n        length: end - offset\n    };\n}\nexport var RangeComparison;\n(function (RangeComparison) {\n    RangeComparison[RangeComparison[\"Before\"] = 0] = \"Before\";\n    RangeComparison[RangeComparison[\"After\"] = 1] = \"After\";\n    RangeComparison[RangeComparison[\"OverlapFront\"] = 2] = \"OverlapFront\";\n    RangeComparison[RangeComparison[\"OverlapBack\"] = 3] = \"OverlapBack\";\n    RangeComparison[RangeComparison[\"Inside\"] = 4] = \"Inside\";\n    RangeComparison[RangeComparison[\"Outside\"] = 5] = \"Outside\";\n})(RangeComparison || (RangeComparison = {}));\nexport function compareRange(range, to) {\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\n        return RangeComparison.Before;\n    }\n    else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\n        return RangeComparison.After;\n    }\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\n    if (startInside && endInside) {\n        return RangeComparison.Inside;\n    }\n    else if (startInside) {\n        return RangeComparison.OverlapBack;\n    }\n    else if (endInside) {\n        return RangeComparison.OverlapFront;\n    }\n    else {\n        return RangeComparison.Outside;\n    }\n}\nexport function inRange(range, to) {\n    const comparison = compareRange(range, to);\n    return comparison > RangeComparison.After;\n}\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\n// Together with \\w it matches any kind of character which can commonly appear in IDs\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\n/**\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\n * it will instead return the leaf node at the `offset - 1` position.\n *\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\n */\nexport function findDeclarationNodeAtOffset(cstNode, offset, nameRegexp = DefaultNameRegexp) {\n    if (cstNode) {\n        if (offset > 0) {\n            const localOffset = offset - cstNode.offset;\n            const textAtOffset = cstNode.text.charAt(localOffset);\n            if (!nameRegexp.test(textAtOffset)) {\n                offset--;\n            }\n        }\n        return findLeafNodeAtOffset(cstNode, offset);\n    }\n    return undefined;\n}\nexport function findCommentNode(cstNode, commentNames) {\n    if (cstNode) {\n        const previous = getPreviousNode(cstNode, true);\n        if (previous && isCommentNode(previous, commentNames)) {\n            return previous;\n        }\n        if (isRootCstNode(cstNode)) {\n            // Go from the first non-hidden node through all nodes in reverse order\n            // We do this to find the comment node which directly precedes the root node\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\n            for (let i = endIndex - 1; i >= 0; i--) {\n                const child = cstNode.content[i];\n                if (isCommentNode(child, commentNames)) {\n                    return child;\n                }\n            }\n        }\n    }\n    return undefined;\n}\nexport function isCommentNode(cstNode, commentNames) {\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * Note that the given offset will be within the range of the returned leaf node.\n *\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node at the specified offset.\n */\nexport function findLeafNodeAtOffset(node, offset) {\n    if (isLeafCstNode(node)) {\n        return node;\n    }\n    else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, false);\n        if (searchResult) {\n            return findLeafNodeAtOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * If no CST node exists at the specified position, it will return the leaf node before it.\n *\n * If there is no leaf node before the specified offset, this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node closest to the specified offset.\n */\nexport function findLeafNodeBeforeOffset(node, offset) {\n    if (isLeafCstNode(node)) {\n        return node;\n    }\n    else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, true);\n        if (searchResult) {\n            return findLeafNodeBeforeOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\nfunction binarySearch(node, offset, closest) {\n    let left = 0;\n    let right = node.content.length - 1;\n    let closestNode = undefined;\n    while (left <= right) {\n        const middle = Math.floor((left + right) / 2);\n        const middleNode = node.content[middle];\n        if (middleNode.offset <= offset && middleNode.end > offset) {\n            // Found an exact match\n            return middleNode;\n        }\n        if (middleNode.end <= offset) {\n            // Update the closest node (less than offset) and move to the right half\n            closestNode = closest ? middleNode : undefined;\n            left = middle + 1;\n        }\n        else {\n            // Move to the left half\n            right = middle - 1;\n        }\n    }\n    return closestNode;\n}\nexport function getPreviousNode(node, hidden = true) {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        while (index > 0) {\n            index--;\n            const previous = parent.content[index];\n            if (hidden || !previous.hidden) {\n                return previous;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nexport function getNextNode(node, hidden = true) {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        const last = parent.content.length - 1;\n        while (index < last) {\n            index++;\n            const next = parent.content[index];\n            if (hidden || !next.hidden) {\n                return next;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nexport function getStartlineNode(node) {\n    if (node.range.start.character === 0) {\n        return node;\n    }\n    const line = node.range.start.line;\n    let last = node;\n    let index;\n    while (node.container) {\n        const parent = node.container;\n        const selfIndex = index !== null && index !== void 0 ? index : parent.content.indexOf(node);\n        if (selfIndex === 0) {\n            node = parent;\n            index = undefined;\n        }\n        else {\n            index = selfIndex - 1;\n            node = parent.content[index];\n        }\n        if (node.range.start.line !== line) {\n            break;\n        }\n        last = node;\n    }\n    return last;\n}\nexport function getInteriorNodes(start, end) {\n    const commonParent = getCommonParent(start, end);\n    if (!commonParent) {\n        return [];\n    }\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\n}\nfunction getCommonParent(a, b) {\n    const aParents = getParentChain(a);\n    const bParents = getParentChain(b);\n    let current;\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\n        const aParent = aParents[i];\n        const bParent = bParents[i];\n        if (aParent.parent === bParent.parent) {\n            current = {\n                parent: aParent.parent,\n                a: aParent.index,\n                b: bParent.index\n            };\n        }\n        else {\n            break;\n        }\n    }\n    return current;\n}\nfunction getParentChain(node) {\n    const chain = [];\n    while (node.container) {\n        const parent = node.container;\n        const index = parent.content.indexOf(node);\n        chain.push({\n            parent,\n            index\n        });\n        node = parent;\n    }\n    return chain.reverse();\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport class ErrorWithLocation extends Error {\n    constructor(node, message) {\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\n    }\n}\nexport function assertUnreachable(_) {\n    throw new Error('Error! The input value was not handled.');\n}\n","/******************************************************************************\n * This file was generated by langium-cli 3.3.0.\n * DO NOT EDIT MANUALLY!\n ******************************************************************************/\nimport { AbstractAstReflection } from '../../syntax-tree.js';\nexport const LangiumGrammarTerminals = {\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\n    WS: /\\s+/,\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\n};\nexport const AbstractRule = 'AbstractRule';\nexport function isAbstractRule(item) {\n    return reflection.isInstance(item, AbstractRule);\n}\nexport const AbstractType = 'AbstractType';\nexport function isAbstractType(item) {\n    return reflection.isInstance(item, AbstractType);\n}\nexport const Condition = 'Condition';\nexport function isCondition(item) {\n    return reflection.isInstance(item, Condition);\n}\nexport function isFeatureName(item) {\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\n}\nexport function isPrimitiveType(item) {\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\n}\nexport const TypeDefinition = 'TypeDefinition';\nexport function isTypeDefinition(item) {\n    return reflection.isInstance(item, TypeDefinition);\n}\nexport const ValueLiteral = 'ValueLiteral';\nexport function isValueLiteral(item) {\n    return reflection.isInstance(item, ValueLiteral);\n}\nexport const AbstractElement = 'AbstractElement';\nexport function isAbstractElement(item) {\n    return reflection.isInstance(item, AbstractElement);\n}\nexport const ArrayLiteral = 'ArrayLiteral';\nexport function isArrayLiteral(item) {\n    return reflection.isInstance(item, ArrayLiteral);\n}\nexport const ArrayType = 'ArrayType';\nexport function isArrayType(item) {\n    return reflection.isInstance(item, ArrayType);\n}\nexport const BooleanLiteral = 'BooleanLiteral';\nexport function isBooleanLiteral(item) {\n    return reflection.isInstance(item, BooleanLiteral);\n}\nexport const Conjunction = 'Conjunction';\nexport function isConjunction(item) {\n    return reflection.isInstance(item, Conjunction);\n}\nexport const Disjunction = 'Disjunction';\nexport function isDisjunction(item) {\n    return reflection.isInstance(item, Disjunction);\n}\nexport const Grammar = 'Grammar';\nexport function isGrammar(item) {\n    return reflection.isInstance(item, Grammar);\n}\nexport const GrammarImport = 'GrammarImport';\nexport function isGrammarImport(item) {\n    return reflection.isInstance(item, GrammarImport);\n}\nexport const InferredType = 'InferredType';\nexport function isInferredType(item) {\n    return reflection.isInstance(item, InferredType);\n}\nexport const Interface = 'Interface';\nexport function isInterface(item) {\n    return reflection.isInstance(item, Interface);\n}\nexport const NamedArgument = 'NamedArgument';\nexport function isNamedArgument(item) {\n    return reflection.isInstance(item, NamedArgument);\n}\nexport const Negation = 'Negation';\nexport function isNegation(item) {\n    return reflection.isInstance(item, Negation);\n}\nexport const NumberLiteral = 'NumberLiteral';\nexport function isNumberLiteral(item) {\n    return reflection.isInstance(item, NumberLiteral);\n}\nexport const Parameter = 'Parameter';\nexport function isParameter(item) {\n    return reflection.isInstance(item, Parameter);\n}\nexport const ParameterReference = 'ParameterReference';\nexport function isParameterReference(item) {\n    return reflection.isInstance(item, ParameterReference);\n}\nexport const ParserRule = 'ParserRule';\nexport function isParserRule(item) {\n    return reflection.isInstance(item, ParserRule);\n}\nexport const ReferenceType = 'ReferenceType';\nexport function isReferenceType(item) {\n    return reflection.isInstance(item, ReferenceType);\n}\nexport const ReturnType = 'ReturnType';\nexport function isReturnType(item) {\n    return reflection.isInstance(item, ReturnType);\n}\nexport const SimpleType = 'SimpleType';\nexport function isSimpleType(item) {\n    return reflection.isInstance(item, SimpleType);\n}\nexport const StringLiteral = 'StringLiteral';\nexport function isStringLiteral(item) {\n    return reflection.isInstance(item, StringLiteral);\n}\nexport const TerminalRule = 'TerminalRule';\nexport function isTerminalRule(item) {\n    return reflection.isInstance(item, TerminalRule);\n}\nexport const Type = 'Type';\nexport function isType(item) {\n    return reflection.isInstance(item, Type);\n}\nexport const TypeAttribute = 'TypeAttribute';\nexport function isTypeAttribute(item) {\n    return reflection.isInstance(item, TypeAttribute);\n}\nexport const UnionType = 'UnionType';\nexport function isUnionType(item) {\n    return reflection.isInstance(item, UnionType);\n}\nexport const Action = 'Action';\nexport function isAction(item) {\n    return reflection.isInstance(item, Action);\n}\nexport const Alternatives = 'Alternatives';\nexport function isAlternatives(item) {\n    return reflection.isInstance(item, Alternatives);\n}\nexport const Assignment = 'Assignment';\nexport function isAssignment(item) {\n    return reflection.isInstance(item, Assignment);\n}\nexport const CharacterRange = 'CharacterRange';\nexport function isCharacterRange(item) {\n    return reflection.isInstance(item, CharacterRange);\n}\nexport const CrossReference = 'CrossReference';\nexport function isCrossReference(item) {\n    return reflection.isInstance(item, CrossReference);\n}\nexport const EndOfFile = 'EndOfFile';\nexport function isEndOfFile(item) {\n    return reflection.isInstance(item, EndOfFile);\n}\nexport const Group = 'Group';\nexport function isGroup(item) {\n    return reflection.isInstance(item, Group);\n}\nexport const Keyword = 'Keyword';\nexport function isKeyword(item) {\n    return reflection.isInstance(item, Keyword);\n}\nexport const NegatedToken = 'NegatedToken';\nexport function isNegatedToken(item) {\n    return reflection.isInstance(item, NegatedToken);\n}\nexport const RegexToken = 'RegexToken';\nexport function isRegexToken(item) {\n    return reflection.isInstance(item, RegexToken);\n}\nexport const RuleCall = 'RuleCall';\nexport function isRuleCall(item) {\n    return reflection.isInstance(item, RuleCall);\n}\nexport const TerminalAlternatives = 'TerminalAlternatives';\nexport function isTerminalAlternatives(item) {\n    return reflection.isInstance(item, TerminalAlternatives);\n}\nexport const TerminalGroup = 'TerminalGroup';\nexport function isTerminalGroup(item) {\n    return reflection.isInstance(item, TerminalGroup);\n}\nexport const TerminalRuleCall = 'TerminalRuleCall';\nexport function isTerminalRuleCall(item) {\n    return reflection.isInstance(item, TerminalRuleCall);\n}\nexport const UnorderedGroup = 'UnorderedGroup';\nexport function isUnorderedGroup(item) {\n    return reflection.isInstance(item, UnorderedGroup);\n}\nexport const UntilToken = 'UntilToken';\nexport function isUntilToken(item) {\n    return reflection.isInstance(item, UntilToken);\n}\nexport const Wildcard = 'Wildcard';\nexport function isWildcard(item) {\n    return reflection.isInstance(item, Wildcard);\n}\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\n    getAllTypes() {\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\n    }\n    computeIsSubtype(subtype, supertype) {\n        switch (subtype) {\n            case Action:\n            case Alternatives:\n            case Assignment:\n            case CharacterRange:\n            case CrossReference:\n            case EndOfFile:\n            case Group:\n            case Keyword:\n            case NegatedToken:\n            case RegexToken:\n            case RuleCall:\n            case TerminalAlternatives:\n            case TerminalGroup:\n            case TerminalRuleCall:\n            case UnorderedGroup:\n            case UntilToken:\n            case Wildcard: {\n                return this.isSubtype(AbstractElement, supertype);\n            }\n            case ArrayLiteral:\n            case NumberLiteral:\n            case StringLiteral: {\n                return this.isSubtype(ValueLiteral, supertype);\n            }\n            case ArrayType:\n            case ReferenceType:\n            case SimpleType:\n            case UnionType: {\n                return this.isSubtype(TypeDefinition, supertype);\n            }\n            case BooleanLiteral: {\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\n            }\n            case Conjunction:\n            case Disjunction:\n            case Negation:\n            case ParameterReference: {\n                return this.isSubtype(Condition, supertype);\n            }\n            case InferredType:\n            case Interface:\n            case Type: {\n                return this.isSubtype(AbstractType, supertype);\n            }\n            case ParserRule: {\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\n            }\n            case TerminalRule: {\n                return this.isSubtype(AbstractRule, supertype);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n    getReferenceType(refInfo) {\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n        switch (referenceId) {\n            case 'Action:type':\n            case 'CrossReference:type':\n            case 'Interface:superTypes':\n            case 'ParserRule:returnType':\n            case 'SimpleType:typeRef': {\n                return AbstractType;\n            }\n            case 'Grammar:hiddenTokens':\n            case 'ParserRule:hiddenTokens':\n            case 'RuleCall:rule': {\n                return AbstractRule;\n            }\n            case 'Grammar:usedGrammars': {\n                return Grammar;\n            }\n            case 'NamedArgument:parameter':\n            case 'ParameterReference:parameter': {\n                return Parameter;\n            }\n            case 'TerminalRuleCall:rule': {\n                return TerminalRule;\n            }\n            default: {\n                throw new Error(`${referenceId} is not a valid reference id.`);\n            }\n        }\n    }\n    getTypeMetaData(type) {\n        switch (type) {\n            case AbstractElement: {\n                return {\n                    name: AbstractElement,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case ArrayLiteral: {\n                return {\n                    name: ArrayLiteral,\n                    properties: [\n                        { name: 'elements', defaultValue: [] }\n                    ]\n                };\n            }\n            case ArrayType: {\n                return {\n                    name: ArrayType,\n                    properties: [\n                        { name: 'elementType' }\n                    ]\n                };\n            }\n            case BooleanLiteral: {\n                return {\n                    name: BooleanLiteral,\n                    properties: [\n                        { name: 'true', defaultValue: false }\n                    ]\n                };\n            }\n            case Conjunction: {\n                return {\n                    name: Conjunction,\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case Disjunction: {\n                return {\n                    name: Disjunction,\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case Grammar: {\n                return {\n                    name: Grammar,\n                    properties: [\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'imports', defaultValue: [] },\n                        { name: 'interfaces', defaultValue: [] },\n                        { name: 'isDeclared', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'rules', defaultValue: [] },\n                        { name: 'types', defaultValue: [] },\n                        { name: 'usedGrammars', defaultValue: [] }\n                    ]\n                };\n            }\n            case GrammarImport: {\n                return {\n                    name: GrammarImport,\n                    properties: [\n                        { name: 'path' }\n                    ]\n                };\n            }\n            case InferredType: {\n                return {\n                    name: InferredType,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case Interface: {\n                return {\n                    name: Interface,\n                    properties: [\n                        { name: 'attributes', defaultValue: [] },\n                        { name: 'name' },\n                        { name: 'superTypes', defaultValue: [] }\n                    ]\n                };\n            }\n            case NamedArgument: {\n                return {\n                    name: NamedArgument,\n                    properties: [\n                        { name: 'calledByName', defaultValue: false },\n                        { name: 'parameter' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case Negation: {\n                return {\n                    name: Negation,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case NumberLiteral: {\n                return {\n                    name: NumberLiteral,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case Parameter: {\n                return {\n                    name: Parameter,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case ParameterReference: {\n                return {\n                    name: ParameterReference,\n                    properties: [\n                        { name: 'parameter' }\n                    ]\n                };\n            }\n            case ParserRule: {\n                return {\n                    name: ParserRule,\n                    properties: [\n                        { name: 'dataType' },\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'definition' },\n                        { name: 'entry', defaultValue: false },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'inferredType' },\n                        { name: 'name' },\n                        { name: 'parameters', defaultValue: [] },\n                        { name: 'returnType' },\n                        { name: 'wildcard', defaultValue: false }\n                    ]\n                };\n            }\n            case ReferenceType: {\n                return {\n                    name: ReferenceType,\n                    properties: [\n                        { name: 'referenceType' }\n                    ]\n                };\n            }\n            case ReturnType: {\n                return {\n                    name: ReturnType,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case SimpleType: {\n                return {\n                    name: SimpleType,\n                    properties: [\n                        { name: 'primitiveType' },\n                        { name: 'stringType' },\n                        { name: 'typeRef' }\n                    ]\n                };\n            }\n            case StringLiteral: {\n                return {\n                    name: StringLiteral,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case TerminalRule: {\n                return {\n                    name: TerminalRule,\n                    properties: [\n                        { name: 'definition' },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hidden', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case Type: {\n                return {\n                    name: Type,\n                    properties: [\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case TypeAttribute: {\n                return {\n                    name: TypeAttribute,\n                    properties: [\n                        { name: 'defaultValue' },\n                        { name: 'isOptional', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case UnionType: {\n                return {\n                    name: UnionType,\n                    properties: [\n                        { name: 'types', defaultValue: [] }\n                    ]\n                };\n            }\n            case Action: {\n                return {\n                    name: Action,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'inferredType' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case Alternatives: {\n                return {\n                    name: Alternatives,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Assignment: {\n                return {\n                    name: Assignment,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case CharacterRange: {\n                return {\n                    name: CharacterRange,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'left' },\n                        { name: 'lookahead' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case CrossReference: {\n                return {\n                    name: CrossReference,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'deprecatedSyntax', defaultValue: false },\n                        { name: 'lookahead' },\n                        { name: 'terminal' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case EndOfFile: {\n                return {\n                    name: EndOfFile,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Group: {\n                return {\n                    name: Group,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'guardCondition' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Keyword: {\n                return {\n                    name: Keyword,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case NegatedToken: {\n                return {\n                    name: NegatedToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case RegexToken: {\n                return {\n                    name: RegexToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'regex' }\n                    ]\n                };\n            }\n            case RuleCall: {\n                return {\n                    name: RuleCall,\n                    properties: [\n                        { name: 'arguments', defaultValue: [] },\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case TerminalAlternatives: {\n                return {\n                    name: TerminalAlternatives,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case TerminalGroup: {\n                return {\n                    name: TerminalGroup,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case TerminalRuleCall: {\n                return {\n                    name: TerminalRuleCall,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case UnorderedGroup: {\n                return {\n                    name: UnorderedGroup,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case UntilToken: {\n                return {\n                    name: UntilToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case Wildcard: {\n                return {\n                    name: Wildcard,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            default: {\n                return {\n                    name: type,\n                    properties: []\n                };\n            }\n        }\n    }\n}\nexport const reflection = new LangiumGrammarAstReflection();\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\nimport { inRange } from './cst-utils.js';\n/**\n * Link the `$container` and other related properties of every AST node that is directly contained\n * in the given `node`.\n */\nexport function linkContentToContainer(node) {\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (Array.isArray(value)) {\n                value.forEach((item, index) => {\n                    if (isAstNode(item)) {\n                        item.$container = node;\n                        item.$containerProperty = name;\n                        item.$containerIndex = index;\n                    }\n                });\n            }\n            else if (isAstNode(value)) {\n                value.$container = node;\n                value.$containerProperty = name;\n            }\n        }\n    }\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\n * node that matches the type predicate. If the start node itself matches, it is returned.\n * If no container matches, `undefined` is returned.\n */\nexport function getContainerOfType(node, typePredicate) {\n    let item = node;\n    while (item) {\n        if (typePredicate(item)) {\n            return item;\n        }\n        item = item.$container;\n    }\n    return undefined;\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\n * of a container that matches the given predicate. The start node is included in the checks.\n */\nexport function hasContainerOfType(node, predicate) {\n    let item = node;\n    while (item) {\n        if (predicate(item)) {\n            return true;\n        }\n        item = item.$container;\n    }\n    return false;\n}\n/**\n * Retrieve the document in which the given AST node is contained. A reference to the document is\n * usually held by the root node of the AST.\n *\n * @throws an error if the node is not contained in a document.\n */\nexport function getDocument(node) {\n    const rootNode = findRootNode(node);\n    const result = rootNode.$document;\n    if (!result) {\n        throw new Error('AST node has no document.');\n    }\n    return result;\n}\n/**\n * Returns the root node of the given AST node by following the `$container` references.\n */\nexport function findRootNode(node) {\n    while (node.$container) {\n        node = node.$container;\n    }\n    return node;\n}\n/**\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamContents(node, options) {\n    if (!node) {\n        throw new Error('Node must be an AstNode.');\n    }\n    const range = options === null || options === void 0 ? void 0 : options.range;\n    return new StreamImpl(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = node[property];\n                if (isAstNode(value)) {\n                    state.keyIndex++;\n                    if (isAstNodeInRange(value, range)) {\n                        return { done: false, value };\n                    }\n                }\n                else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\n                            return { done: false, value: element };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\n * This does not include the root node itself.\n */\nexport function streamAllContents(root, options) {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options));\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamAst(root, options) {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.range) && !isAstNodeInRange(root, options.range)) {\n        // Return an empty stream if the root node isn't in range\n        return new TreeStreamImpl(root, () => []);\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\n}\nfunction isAstNodeInRange(astNode, range) {\n    var _a;\n    if (!range) {\n        return true;\n    }\n    const nodeRange = (_a = astNode.$cstNode) === null || _a === void 0 ? void 0 : _a.range;\n    if (!nodeRange) {\n        return false;\n    }\n    return inRange(nodeRange, range);\n}\n/**\n * Create a stream of all cross-references that are held by the given AST node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamReferences(node) {\n    return new StreamImpl(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = node[property];\n                if (isReference(value)) {\n                    state.keyIndex++;\n                    return { done: false, value: { reference: value, container: node, property } };\n                }\n                else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isReference(element)) {\n                            return { done: false, value: { reference: element, container: node, property, index } };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n/**\n * Returns a Stream of references to the target node from the AstNode tree\n *\n * @param targetNode AstNode we are looking for\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\n */\nexport function findLocalReferences(targetNode, lookup = getDocument(targetNode).parseResult.value) {\n    const refs = [];\n    streamAst(lookup).forEach(node => {\n        streamReferences(node).forEach(refInfo => {\n            if (refInfo.reference.ref === targetNode) {\n                refs.push(refInfo.reference);\n            }\n        });\n    });\n    return stream(refs);\n}\n/**\n * Assigns all mandatory AST properties to the specified node.\n *\n * @param reflection Reflection object used to gather mandatory properties for the node.\n * @param node Specified node is modified in place and properties are directly assigned.\n */\nexport function assignMandatoryProperties(reflection, node) {\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\n    const genericNode = node;\n    for (const property of typeMetaData.properties) {\n        // Only set the value if the property is not already set and if it has a default value\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\n        }\n    }\n}\nfunction copyDefaultValue(propertyType) {\n    if (Array.isArray(propertyType)) {\n        return [...propertyType.map(copyDefaultValue)];\n    }\n    else {\n        return propertyType;\n    }\n}\n/**\n * Creates a deep copy of the specified AST node.\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\n *\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\n */\nexport function copyAstNode(node, buildReference) {\n    const copy = { $type: node.$type };\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (isAstNode(value)) {\n                copy[name] = copyAstNode(value, buildReference);\n            }\n            else if (isReference(value)) {\n                copy[name] = buildReference(copy, name, value.$refNode, value.$refText);\n            }\n            else if (Array.isArray(value)) {\n                const copiedArray = [];\n                for (const element of value) {\n                    if (isAstNode(element)) {\n                        copiedArray.push(copyAstNode(element, buildReference));\n                    }\n                    else if (isReference(element)) {\n                        copiedArray.push(buildReference(copy, name, element.$refNode, element.$refText));\n                    }\n                    else {\n                        copiedArray.push(element);\n                    }\n                }\n                copy[name] = copiedArray;\n            }\n            else {\n                copy[name] = value;\n            }\n        }\n    }\n    linkContentToContainer(copy);\n    return copy;\n}\n","export function cc(char) {\n    return char.charCodeAt(0);\n}\nexport function insertToSet(item, set) {\n    if (Array.isArray(item)) {\n        item.forEach(function (subItem) {\n            set.push(subItem);\n        });\n    }\n    else {\n        set.push(item);\n    }\n}\nexport function addFlag(flagObj, flagKey) {\n    if (flagObj[flagKey] === true) {\n        throw \"duplicate flag \" + flagKey;\n    }\n    const x = flagObj[flagKey];\n    flagObj[flagKey] = true;\n}\nexport function ASSERT_EXISTS(obj) {\n    // istanbul ignore next\n    if (obj === undefined) {\n        throw Error(\"Internal Error - Should never get here!\");\n    }\n    return true;\n}\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE() {\n    throw Error(\"Internal Error - Should never get here!\");\n}\nexport function isCharacter(obj) {\n    return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\nexport const digitsCharCodes = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n    digitsCharCodes.push(i);\n}\nexport const wordCharCodes = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n    wordCharCodes.push(i);\n}\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n    wordCharCodes.push(i);\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes = [\n    cc(\" \"),\n    cc(\"\\f\"),\n    cc(\"\\n\"),\n    cc(\"\\r\"),\n    cc(\"\\t\"),\n    cc(\"\\v\"),\n    cc(\"\\t\"),\n    cc(\"\\u00a0\"),\n    cc(\"\\u1680\"),\n    cc(\"\\u2000\"),\n    cc(\"\\u2001\"),\n    cc(\"\\u2002\"),\n    cc(\"\\u2003\"),\n    cc(\"\\u2004\"),\n    cc(\"\\u2005\"),\n    cc(\"\\u2006\"),\n    cc(\"\\u2007\"),\n    cc(\"\\u2008\"),\n    cc(\"\\u2009\"),\n    cc(\"\\u200a\"),\n    cc(\"\\u2028\"),\n    cc(\"\\u2029\"),\n    cc(\"\\u202f\"),\n    cc(\"\\u205f\"),\n    cc(\"\\u3000\"),\n    cc(\"\\ufeff\"),\n];\n","import { addFlag, ASSERT_EXISTS, ASSERT_NEVER_REACH_HERE, cc, insertToSet, isCharacter, } from \"./utils.js\";\nimport { digitsCharCodes, whitespaceCodes, wordCharCodes, } from \"./character-classes.js\";\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n    constructor() {\n        this.idx = 0;\n        this.input = \"\";\n        this.groupIdx = 0;\n    }\n    saveState() {\n        return {\n            idx: this.idx,\n            input: this.input,\n            groupIdx: this.groupIdx,\n        };\n    }\n    restoreState(newState) {\n        this.idx = newState.idx;\n        this.input = newState.input;\n        this.groupIdx = newState.groupIdx;\n    }\n    pattern(input) {\n        // parser state\n        this.idx = 0;\n        this.input = input;\n        this.groupIdx = 0;\n        this.consumeChar(\"/\");\n        const value = this.disjunction();\n        this.consumeChar(\"/\");\n        const flags = {\n            type: \"Flags\",\n            loc: { begin: this.idx, end: input.length },\n            global: false,\n            ignoreCase: false,\n            multiLine: false,\n            unicode: false,\n            sticky: false,\n        };\n        while (this.isRegExpFlag()) {\n            switch (this.popChar()) {\n                case \"g\":\n                    addFlag(flags, \"global\");\n                    break;\n                case \"i\":\n                    addFlag(flags, \"ignoreCase\");\n                    break;\n                case \"m\":\n                    addFlag(flags, \"multiLine\");\n                    break;\n                case \"u\":\n                    addFlag(flags, \"unicode\");\n                    break;\n                case \"y\":\n                    addFlag(flags, \"sticky\");\n                    break;\n            }\n        }\n        if (this.idx !== this.input.length) {\n            throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n        }\n        return {\n            type: \"Pattern\",\n            flags: flags,\n            value: value,\n            loc: this.loc(0),\n        };\n    }\n    disjunction() {\n        const alts = [];\n        const begin = this.idx;\n        alts.push(this.alternative());\n        while (this.peekChar() === \"|\") {\n            this.consumeChar(\"|\");\n            alts.push(this.alternative());\n        }\n        return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n    }\n    alternative() {\n        const terms = [];\n        const begin = this.idx;\n        while (this.isTerm()) {\n            terms.push(this.term());\n        }\n        return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n    }\n    term() {\n        if (this.isAssertion()) {\n            return this.assertion();\n        }\n        else {\n            return this.atom();\n        }\n    }\n    assertion() {\n        const begin = this.idx;\n        switch (this.popChar()) {\n            case \"^\":\n                return {\n                    type: \"StartAnchor\",\n                    loc: this.loc(begin),\n                };\n            case \"$\":\n                return { type: \"EndAnchor\", loc: this.loc(begin) };\n            // '\\b' or '\\B'\n            case \"\\\\\":\n                switch (this.popChar()) {\n                    case \"b\":\n                        return {\n                            type: \"WordBoundary\",\n                            loc: this.loc(begin),\n                        };\n                    case \"B\":\n                        return {\n                            type: \"NonWordBoundary\",\n                            loc: this.loc(begin),\n                        };\n                }\n                // istanbul ignore next\n                throw Error(\"Invalid Assertion Escape\");\n            // '(?=' or '(?!'\n            case \"(\":\n                this.consumeChar(\"?\");\n                let type;\n                switch (this.popChar()) {\n                    case \"=\":\n                        type = \"Lookahead\";\n                        break;\n                    case \"!\":\n                        type = \"NegativeLookahead\";\n                        break;\n                }\n                ASSERT_EXISTS(type);\n                const disjunction = this.disjunction();\n                this.consumeChar(\")\");\n                return {\n                    type: type,\n                    value: disjunction,\n                    loc: this.loc(begin),\n                };\n        }\n        // istanbul ignore next\n        return ASSERT_NEVER_REACH_HERE();\n    }\n    quantifier(isBacktracking = false) {\n        let range = undefined;\n        const begin = this.idx;\n        switch (this.popChar()) {\n            case \"*\":\n                range = {\n                    atLeast: 0,\n                    atMost: Infinity,\n                };\n                break;\n            case \"+\":\n                range = {\n                    atLeast: 1,\n                    atMost: Infinity,\n                };\n                break;\n            case \"?\":\n                range = {\n                    atLeast: 0,\n                    atMost: 1,\n                };\n                break;\n            case \"{\":\n                const atLeast = this.integerIncludingZero();\n                switch (this.popChar()) {\n                    case \"}\":\n                        range = {\n                            atLeast: atLeast,\n                            atMost: atLeast,\n                        };\n                        break;\n                    case \",\":\n                        let atMost;\n                        if (this.isDigit()) {\n                            atMost = this.integerIncludingZero();\n                            range = {\n                                atLeast: atLeast,\n                                atMost: atMost,\n                            };\n                        }\n                        else {\n                            range = {\n                                atLeast: atLeast,\n                                atMost: Infinity,\n                            };\n                        }\n                        this.consumeChar(\"}\");\n                        break;\n                }\n                // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n                // causes severe performance degradations\n                if (isBacktracking === true && range === undefined) {\n                    return undefined;\n                }\n                ASSERT_EXISTS(range);\n                break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n            return undefined;\n        }\n        // istanbul ignore else\n        if (ASSERT_EXISTS(range)) {\n            if (this.peekChar(0) === \"?\") {\n                this.consumeChar(\"?\");\n                range.greedy = false;\n            }\n            else {\n                range.greedy = true;\n            }\n            range.type = \"Quantifier\";\n            range.loc = this.loc(begin);\n            return range;\n        }\n    }\n    atom() {\n        let atom;\n        const begin = this.idx;\n        switch (this.peekChar()) {\n            case \".\":\n                atom = this.dotAll();\n                break;\n            case \"\\\\\":\n                atom = this.atomEscape();\n                break;\n            case \"[\":\n                atom = this.characterClass();\n                break;\n            case \"(\":\n                atom = this.group();\n                break;\n        }\n        if (atom === undefined && this.isPatternCharacter()) {\n            atom = this.patternCharacter();\n        }\n        // istanbul ignore else\n        if (ASSERT_EXISTS(atom)) {\n            atom.loc = this.loc(begin);\n            if (this.isQuantifier()) {\n                atom.quantifier = this.quantifier();\n            }\n            return atom;\n        }\n        // istanbul ignore next\n        return ASSERT_NEVER_REACH_HERE();\n    }\n    dotAll() {\n        this.consumeChar(\".\");\n        return {\n            type: \"Set\",\n            complement: true,\n            value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n        };\n    }\n    atomEscape() {\n        this.consumeChar(\"\\\\\");\n        switch (this.peekChar()) {\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                return this.decimalEscapeAtom();\n            case \"d\":\n            case \"D\":\n            case \"s\":\n            case \"S\":\n            case \"w\":\n            case \"W\":\n                return this.characterClassEscape();\n            case \"f\":\n            case \"n\":\n            case \"r\":\n            case \"t\":\n            case \"v\":\n                return this.controlEscapeAtom();\n            case \"c\":\n                return this.controlLetterEscapeAtom();\n            case \"0\":\n                return this.nulCharacterAtom();\n            case \"x\":\n                return this.hexEscapeSequenceAtom();\n            case \"u\":\n                return this.regExpUnicodeEscapeSequenceAtom();\n            default:\n                return this.identityEscapeAtom();\n        }\n    }\n    decimalEscapeAtom() {\n        const value = this.positiveInteger();\n        return { type: \"GroupBackReference\", value: value };\n    }\n    characterClassEscape() {\n        let set;\n        let complement = false;\n        switch (this.popChar()) {\n            case \"d\":\n                set = digitsCharCodes;\n                break;\n            case \"D\":\n                set = digitsCharCodes;\n                complement = true;\n                break;\n            case \"s\":\n                set = whitespaceCodes;\n                break;\n            case \"S\":\n                set = whitespaceCodes;\n                complement = true;\n                break;\n            case \"w\":\n                set = wordCharCodes;\n                break;\n            case \"W\":\n                set = wordCharCodes;\n                complement = true;\n                break;\n        }\n        // istanbul ignore else\n        if (ASSERT_EXISTS(set)) {\n            return { type: \"Set\", value: set, complement: complement };\n        }\n        // istanbul ignore next\n        return ASSERT_NEVER_REACH_HERE();\n    }\n    controlEscapeAtom() {\n        let escapeCode;\n        switch (this.popChar()) {\n            case \"f\":\n                escapeCode = cc(\"\\f\");\n                break;\n            case \"n\":\n                escapeCode = cc(\"\\n\");\n                break;\n            case \"r\":\n                escapeCode = cc(\"\\r\");\n                break;\n            case \"t\":\n                escapeCode = cc(\"\\t\");\n                break;\n            case \"v\":\n                escapeCode = cc(\"\\v\");\n                break;\n        }\n        // istanbul ignore else\n        if (ASSERT_EXISTS(escapeCode)) {\n            return { type: \"Character\", value: escapeCode };\n        }\n        // istanbul ignore next\n        return ASSERT_NEVER_REACH_HERE();\n    }\n    controlLetterEscapeAtom() {\n        this.consumeChar(\"c\");\n        const letter = this.popChar();\n        if (/[a-zA-Z]/.test(letter) === false) {\n            throw Error(\"Invalid \");\n        }\n        const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n        return { type: \"Character\", value: letterCode };\n    }\n    nulCharacterAtom() {\n        // TODO implement '[lookahead ∉ DecimalDigit]'\n        // TODO: for the deprecated octal escape sequence\n        this.consumeChar(\"0\");\n        return { type: \"Character\", value: cc(\"\\0\") };\n    }\n    hexEscapeSequenceAtom() {\n        this.consumeChar(\"x\");\n        return this.parseHexDigits(2);\n    }\n    regExpUnicodeEscapeSequenceAtom() {\n        this.consumeChar(\"u\");\n        return this.parseHexDigits(4);\n    }\n    identityEscapeAtom() {\n        // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n        // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n        const escapedChar = this.popChar();\n        return { type: \"Character\", value: cc(escapedChar) };\n    }\n    classPatternCharacterAtom() {\n        switch (this.peekChar()) {\n            // istanbul ignore next\n            case \"\\n\":\n            // istanbul ignore next\n            case \"\\r\":\n            // istanbul ignore next\n            case \"\\u2028\":\n            // istanbul ignore next\n            case \"\\u2029\":\n            // istanbul ignore next\n            case \"\\\\\":\n            // istanbul ignore next\n            case \"]\":\n                throw Error(\"TBD\");\n            default:\n                const nextChar = this.popChar();\n                return { type: \"Character\", value: cc(nextChar) };\n        }\n    }\n    characterClass() {\n        const set = [];\n        let complement = false;\n        this.consumeChar(\"[\");\n        if (this.peekChar(0) === \"^\") {\n            this.consumeChar(\"^\");\n            complement = true;\n        }\n        while (this.isClassAtom()) {\n            const from = this.classAtom();\n            const isFromSingleChar = from.type === \"Character\";\n            if (isCharacter(from) && this.isRangeDash()) {\n                this.consumeChar(\"-\");\n                const to = this.classAtom();\n                const isToSingleChar = to.type === \"Character\";\n                // a range can only be used when both sides are single characters\n                if (isCharacter(to)) {\n                    if (to.value < from.value) {\n                        throw Error(\"Range out of order in character class\");\n                    }\n                    set.push({ from: from.value, to: to.value });\n                }\n                else {\n                    // literal dash\n                    insertToSet(from.value, set);\n                    set.push(cc(\"-\"));\n                    insertToSet(to.value, set);\n                }\n            }\n            else {\n                insertToSet(from.value, set);\n            }\n        }\n        this.consumeChar(\"]\");\n        return { type: \"Set\", complement: complement, value: set };\n    }\n    classAtom() {\n        switch (this.peekChar()) {\n            // istanbul ignore next\n            case \"]\":\n            // istanbul ignore next\n            case \"\\n\":\n            // istanbul ignore next\n            case \"\\r\":\n            // istanbul ignore next\n            case \"\\u2028\":\n            // istanbul ignore next\n            case \"\\u2029\":\n                throw Error(\"TBD\");\n            case \"\\\\\":\n                return this.classEscape();\n            default:\n                return this.classPatternCharacterAtom();\n        }\n    }\n    classEscape() {\n        this.consumeChar(\"\\\\\");\n        switch (this.peekChar()) {\n            // Matches a backspace.\n            // (Not to be confused with \\b word boundary outside characterClass)\n            case \"b\":\n                this.consumeChar(\"b\");\n                return { type: \"Character\", value: cc(\"\\u0008\") };\n            case \"d\":\n            case \"D\":\n            case \"s\":\n            case \"S\":\n            case \"w\":\n            case \"W\":\n                return this.characterClassEscape();\n            case \"f\":\n            case \"n\":\n            case \"r\":\n            case \"t\":\n            case \"v\":\n                return this.controlEscapeAtom();\n            case \"c\":\n                return this.controlLetterEscapeAtom();\n            case \"0\":\n                return this.nulCharacterAtom();\n            case \"x\":\n                return this.hexEscapeSequenceAtom();\n            case \"u\":\n                return this.regExpUnicodeEscapeSequenceAtom();\n            default:\n                return this.identityEscapeAtom();\n        }\n    }\n    group() {\n        let capturing = true;\n        this.consumeChar(\"(\");\n        switch (this.peekChar(0)) {\n            case \"?\":\n                this.consumeChar(\"?\");\n                this.consumeChar(\":\");\n                capturing = false;\n                break;\n            default:\n                this.groupIdx++;\n                break;\n        }\n        const value = this.disjunction();\n        this.consumeChar(\")\");\n        const groupAst = {\n            type: \"Group\",\n            capturing: capturing,\n            value: value,\n        };\n        if (capturing) {\n            groupAst[\"idx\"] = this.groupIdx;\n        }\n        return groupAst;\n    }\n    positiveInteger() {\n        let number = this.popChar();\n        // istanbul ignore next - can't ever get here due to previous lookahead checks\n        // still implementing this error checking in case this ever changes.\n        if (decimalPatternNoZero.test(number) === false) {\n            throw Error(\"Expecting a positive integer\");\n        }\n        while (decimalPattern.test(this.peekChar(0))) {\n            number += this.popChar();\n        }\n        return parseInt(number, 10);\n    }\n    integerIncludingZero() {\n        let number = this.popChar();\n        if (decimalPattern.test(number) === false) {\n            throw Error(\"Expecting an integer\");\n        }\n        while (decimalPattern.test(this.peekChar(0))) {\n            number += this.popChar();\n        }\n        return parseInt(number, 10);\n    }\n    patternCharacter() {\n        const nextChar = this.popChar();\n        switch (nextChar) {\n            // istanbul ignore next\n            case \"\\n\":\n            // istanbul ignore next\n            case \"\\r\":\n            // istanbul ignore next\n            case \"\\u2028\":\n            // istanbul ignore next\n            case \"\\u2029\":\n            // istanbul ignore next\n            case \"^\":\n            // istanbul ignore next\n            case \"$\":\n            // istanbul ignore next\n            case \"\\\\\":\n            // istanbul ignore next\n            case \".\":\n            // istanbul ignore next\n            case \"*\":\n            // istanbul ignore next\n            case \"+\":\n            // istanbul ignore next\n            case \"?\":\n            // istanbul ignore next\n            case \"(\":\n            // istanbul ignore next\n            case \")\":\n            // istanbul ignore next\n            case \"[\":\n            // istanbul ignore next\n            case \"|\":\n                // istanbul ignore next\n                throw Error(\"TBD\");\n            default:\n                return { type: \"Character\", value: cc(nextChar) };\n        }\n    }\n    isRegExpFlag() {\n        switch (this.peekChar(0)) {\n            case \"g\":\n            case \"i\":\n            case \"m\":\n            case \"u\":\n            case \"y\":\n                return true;\n            default:\n                return false;\n        }\n    }\n    isRangeDash() {\n        return this.peekChar() === \"-\" && this.isClassAtom(1);\n    }\n    isDigit() {\n        return decimalPattern.test(this.peekChar(0));\n    }\n    isClassAtom(howMuch = 0) {\n        switch (this.peekChar(howMuch)) {\n            case \"]\":\n            case \"\\n\":\n            case \"\\r\":\n            case \"\\u2028\":\n            case \"\\u2029\":\n                return false;\n            default:\n                return true;\n        }\n    }\n    isTerm() {\n        return this.isAtom() || this.isAssertion();\n    }\n    isAtom() {\n        if (this.isPatternCharacter()) {\n            return true;\n        }\n        switch (this.peekChar(0)) {\n            case \".\":\n            case \"\\\\\": // atomEscape\n            case \"[\": // characterClass\n            // TODO: isAtom must be called before isAssertion - disambiguate\n            case \"(\": // group\n                return true;\n            default:\n                return false;\n        }\n    }\n    isAssertion() {\n        switch (this.peekChar(0)) {\n            case \"^\":\n            case \"$\":\n                return true;\n            // '\\b' or '\\B'\n            case \"\\\\\":\n                switch (this.peekChar(1)) {\n                    case \"b\":\n                    case \"B\":\n                        return true;\n                    default:\n                        return false;\n                }\n            // '(?=' or '(?!'\n            case \"(\":\n                return (this.peekChar(1) === \"?\" &&\n                    (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\"));\n            default:\n                return false;\n        }\n    }\n    isQuantifier() {\n        const prevState = this.saveState();\n        try {\n            return this.quantifier(true) !== undefined;\n        }\n        catch (e) {\n            return false;\n        }\n        finally {\n            this.restoreState(prevState);\n        }\n    }\n    isPatternCharacter() {\n        switch (this.peekChar()) {\n            case \"^\":\n            case \"$\":\n            case \"\\\\\":\n            case \".\":\n            case \"*\":\n            case \"+\":\n            case \"?\":\n            case \"(\":\n            case \")\":\n            case \"[\":\n            case \"|\":\n            case \"/\":\n            case \"\\n\":\n            case \"\\r\":\n            case \"\\u2028\":\n            case \"\\u2029\":\n                return false;\n            default:\n                return true;\n        }\n    }\n    parseHexDigits(howMany) {\n        let hexString = \"\";\n        for (let i = 0; i < howMany; i++) {\n            const hexChar = this.popChar();\n            if (hexDigitPattern.test(hexChar) === false) {\n                throw Error(\"Expecting a HexDecimal digits\");\n            }\n            hexString += hexChar;\n        }\n        const charCode = parseInt(hexString, 16);\n        return { type: \"Character\", value: charCode };\n    }\n    peekChar(howMuch = 0) {\n        return this.input[this.idx + howMuch];\n    }\n    popChar() {\n        const nextChar = this.peekChar(0);\n        this.consumeChar(undefined);\n        return nextChar;\n    }\n    consumeChar(char) {\n        if (char !== undefined && this.input[this.idx] !== char) {\n            throw Error(\"Expected: '\" +\n                char +\n                \"' but found: '\" +\n                this.input[this.idx] +\n                \"' at offset: \" +\n                this.idx);\n        }\n        if (this.idx >= this.input.length) {\n            throw Error(\"Unexpected end of input\");\n        }\n        this.idx++;\n    }\n    loc(begin) {\n        return { begin: begin, end: this.idx };\n    }\n}\n","export class BaseRegExpVisitor {\n    visitChildren(node) {\n        for (const key in node) {\n            const child = node[key];\n            /* istanbul ignore else */\n            if (node.hasOwnProperty(key)) {\n                if (child.type !== undefined) {\n                    this.visit(child);\n                }\n                else if (Array.isArray(child)) {\n                    child.forEach((subChild) => {\n                        this.visit(subChild);\n                    }, this);\n                }\n            }\n        }\n    }\n    visit(node) {\n        switch (node.type) {\n            case \"Pattern\":\n                this.visitPattern(node);\n                break;\n            case \"Flags\":\n                this.visitFlags(node);\n                break;\n            case \"Disjunction\":\n                this.visitDisjunction(node);\n                break;\n            case \"Alternative\":\n                this.visitAlternative(node);\n                break;\n            case \"StartAnchor\":\n                this.visitStartAnchor(node);\n                break;\n            case \"EndAnchor\":\n                this.visitEndAnchor(node);\n                break;\n            case \"WordBoundary\":\n                this.visitWordBoundary(node);\n                break;\n            case \"NonWordBoundary\":\n                this.visitNonWordBoundary(node);\n                break;\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                break;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                break;\n            case \"Character\":\n                this.visitCharacter(node);\n                break;\n            case \"Set\":\n                this.visitSet(node);\n                break;\n            case \"Group\":\n                this.visitGroup(node);\n                break;\n            case \"GroupBackReference\":\n                this.visitGroupBackReference(node);\n                break;\n            case \"Quantifier\":\n                this.visitQuantifier(node);\n                break;\n        }\n        this.visitChildren(node);\n    }\n    visitPattern(node) { }\n    visitFlags(node) { }\n    visitDisjunction(node) { }\n    visitAlternative(node) { }\n    // Assertion\n    visitStartAnchor(node) { }\n    visitEndAnchor(node) { }\n    visitWordBoundary(node) { }\n    visitNonWordBoundary(node) { }\n    visitLookahead(node) { }\n    visitNegativeLookahead(node) { }\n    // atoms\n    visitCharacter(node) { }\n    visitSet(node) { }\n    visitGroup(node) { }\n    visitGroupBackReference(node) { }\n    visitQuantifier(node) { }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\nconst regexpParser = new RegExpParser();\n/**\n * This class is in charge of heuristically identifying start/end tokens of terminals.\n *\n * The way this works is by doing the following:\n * 1. Traverse the regular expression in the \"start state\"\n * 2. Add any encountered sets/single characters to the \"start regexp\"\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\n * 5. If we re-encounter any variable-length content we reset the end stack\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\n *\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\n */\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\n    constructor() {\n        super(...arguments);\n        this.isStarting = true;\n        this.endRegexpStack = [];\n        this.multiline = false;\n    }\n    get endRegex() {\n        return this.endRegexpStack.join('');\n    }\n    reset(regex) {\n        this.multiline = false;\n        this.regex = regex;\n        this.startRegexp = '';\n        this.isStarting = true;\n        this.endRegexpStack = [];\n    }\n    visitGroup(node) {\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n    }\n    visitCharacter(node) {\n        const char = String.fromCharCode(node.value);\n        if (!this.multiline && char === '\\n') {\n            this.multiline = true;\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n        else {\n            const escapedChar = escapeRegExp(char);\n            this.endRegexpStack.push(escapedChar);\n            if (this.isStarting) {\n                this.startRegexp += escapedChar;\n            }\n        }\n    }\n    visitSet(node) {\n        if (!this.multiline) {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            const regex = new RegExp(set);\n            this.multiline = Boolean('\\n'.match(regex));\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n        else {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            this.endRegexpStack.push(set);\n            if (this.isStarting) {\n                this.startRegexp += set;\n            }\n        }\n    }\n    visitChildren(node) {\n        if (node.type === 'Group') {\n            // Ignore children of groups with quantifier (+/*/?)\n            // These groups are unrelated to start/end tokens of terminals\n            const group = node;\n            if (group.quantifier) {\n                return;\n            }\n        }\n        super.visitChildren(node);\n    }\n}\nconst visitor = new TerminalRegExpVisitor();\nexport function getTerminalParts(regexp) {\n    try {\n        if (typeof regexp !== 'string') {\n            regexp = regexp.source;\n        }\n        regexp = `/${regexp}/`;\n        const pattern = regexpParser.pattern(regexp);\n        const parts = [];\n        for (const alternative of pattern.value.value) {\n            visitor.reset(regexp);\n            visitor.visit(alternative);\n            parts.push({\n                start: visitor.startRegexp,\n                end: visitor.endRegex\n            });\n        }\n        return parts;\n    }\n    catch (_a) {\n        return [];\n    }\n}\nexport function isMultilineComment(regexp) {\n    try {\n        if (typeof regexp === 'string') {\n            regexp = new RegExp(regexp);\n        }\n        regexp = regexp.toString();\n        visitor.reset(regexp);\n        // Parsing the pattern might fail (since it's user code)\n        visitor.visit(regexpParser.pattern(regexp));\n        return visitor.multiline;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\n */\nexport const whitespaceCharacters = ('\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\nexport function isWhitespace(value) {\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\n}\nexport function escapeRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nexport function getCaseInsensitivePattern(keyword) {\n    return Array.prototype.map.call(keyword, letter => /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)).join('');\n}\n/**\n * Determines whether the given input has a partial match with the specified regex.\n * @param regex The regex to partially match against\n * @param input The input string\n * @returns Whether any match exists.\n */\nexport function partialMatches(regex, input) {\n    const partial = partialRegExp(regex);\n    const match = input.match(partial);\n    return !!match && match[0].length > 0;\n}\n/**\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\n * @param regex The input regex to be converted.\n * @returns A partial regex constructed from the input regex.\n */\nexport function partialRegExp(regex) {\n    if (typeof regex === 'string') {\n        regex = new RegExp(regex);\n    }\n    const re = regex, source = regex.source;\n    let i = 0;\n    function process() {\n        let result = '', tmp;\n        function appendRaw(nbChars) {\n            result += source.substr(i, nbChars);\n            i += nbChars;\n        }\n        function appendOptional(nbChars) {\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\n            i += nbChars;\n        }\n        while (i < source.length) {\n            switch (source[i]) {\n                case '\\\\':\n                    switch (source[i + 1]) {\n                        case 'c':\n                            appendOptional(3);\n                            break;\n                        case 'x':\n                            appendOptional(4);\n                            break;\n                        case 'u':\n                            if (re.unicode) {\n                                if (source[i + 2] === '{') {\n                                    appendOptional(source.indexOf('}', i) - i + 1);\n                                }\n                                else {\n                                    appendOptional(6);\n                                }\n                            }\n                            else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'p':\n                        case 'P':\n                            if (re.unicode) {\n                                appendOptional(source.indexOf('}', i) - i + 1);\n                            }\n                            else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'k':\n                            appendOptional(source.indexOf('>', i) - i + 1);\n                            break;\n                        default:\n                            appendOptional(2);\n                            break;\n                    }\n                    break;\n                case '[':\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source) || [];\n                    appendOptional(tmp[0].length);\n                    break;\n                case '|':\n                case '^':\n                case '$':\n                case '*':\n                case '+':\n                case '?':\n                    appendRaw(1);\n                    break;\n                case '{':\n                    tmp = /\\{\\d+,?\\d*\\}/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source);\n                    if (tmp) {\n                        appendRaw(tmp[0].length);\n                    }\n                    else {\n                        appendOptional(1);\n                    }\n                    break;\n                case '(':\n                    if (source[i + 1] === '?') {\n                        switch (source[i + 2]) {\n                            case ':':\n                                result += '(?:';\n                                i += 3;\n                                result += process() + '|$)';\n                                break;\n                            case '=':\n                                result += '(?=';\n                                i += 3;\n                                result += process() + ')';\n                                break;\n                            case '!':\n                                tmp = i;\n                                i += 3;\n                                process();\n                                result += source.substr(tmp, i - tmp);\n                                break;\n                            case '<':\n                                switch (source[i + 3]) {\n                                    case '=':\n                                    case '!':\n                                        tmp = i;\n                                        i += 4;\n                                        process();\n                                        result += source.substr(tmp, i - tmp);\n                                        break;\n                                    default:\n                                        appendRaw(source.indexOf('>', i) - i + 1);\n                                        result += process() + '|$)';\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    else {\n                        appendRaw(1);\n                        result += process() + '|$)';\n                    }\n                    break;\n                case ')':\n                    ++i;\n                    return result;\n                default:\n                    appendOptional(1);\n                    break;\n            }\n        }\n        return result;\n    }\n    return new RegExp(process(), regex.flags);\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { assertUnreachable } from '../utils/errors.js';\nimport * as ast from '../languages/generated/ast.js';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\nimport { streamCst } from './cst-utils.js';\nimport { escapeRegExp, isWhitespace } from './regexp-utils.js';\n/**\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\n * the result is `undefined`.\n */\nexport function getEntryRule(grammar) {\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry);\n}\n/**\n * Returns all hidden terminal rules of the given grammar, if any.\n */\nexport function getHiddenRules(grammar) {\n    return grammar.rules.filter((e) => ast.isTerminalRule(e) && e.hidden);\n}\n/**\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\n *\n * @param grammar The grammar that contains all rules\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\n *      this function returns all rules of the specified grammar.\n */\nexport function getAllReachableRules(grammar, allTerminals) {\n    const ruleNames = new Set();\n    const entryRule = getEntryRule(grammar);\n    if (!entryRule) {\n        return new Set(grammar.rules);\n    }\n    const topMostRules = [entryRule].concat(getHiddenRules(grammar));\n    for (const rule of topMostRules) {\n        ruleDfs(rule, ruleNames, allTerminals);\n    }\n    const rules = new Set();\n    for (const rule of grammar.rules) {\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\n            rules.add(rule);\n        }\n    }\n    return rules;\n}\nfunction ruleDfs(rule, visitedSet, allTerminals) {\n    visitedSet.add(rule.name);\n    streamAllContents(rule).forEach(node => {\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\n            const refRule = node.rule.ref;\n            if (refRule && !visitedSet.has(refRule.name)) {\n                ruleDfs(refRule, visitedSet, allTerminals);\n            }\n        }\n    });\n}\n/**\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\n *\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\n * and cannot be inferred.\n */\nexport function getCrossReferenceTerminal(crossRef) {\n    if (crossRef.terminal) {\n        return crossRef.terminal;\n    }\n    else if (crossRef.type.ref) {\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\n        return nameAssigment === null || nameAssigment === void 0 ? void 0 : nameAssigment.terminal;\n    }\n    return undefined;\n}\n/**\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\n * that contains visible characters is considered a comment.\n */\nexport function isCommentTerminal(terminalRule) {\n    return terminalRule.hidden && !isWhitespace(terminalRegex(terminalRule));\n}\n/**\n * Find all CST nodes within the given node that contribute to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\n */\nexport function findNodesForProperty(node, property) {\n    if (!node || !property) {\n        return [];\n    }\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\n}\n/**\n * Find a single CST node within the given node that contributes to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForProperty(node, property, index) {\n    if (!node || !property) {\n        return undefined;\n    }\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    }\n    else {\n        index = 0;\n    }\n    return nodes[index];\n}\nfunction findNodesForPropertyInternal(node, property, element, first) {\n    if (!first) {\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\n        if (nodeFeature && nodeFeature.feature === property) {\n            return [node];\n        }\n    }\n    if (isCompositeCstNode(node) && node.astNode === element) {\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\n    }\n    return [];\n}\n/**\n * Find all CST nodes within the given node that correspond to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\n * @param keyword A keyword as specified in the grammar.\n */\nexport function findNodesForKeyword(node, keyword) {\n    if (!node) {\n        return [];\n    }\n    return findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n}\n/**\n * Find a single CST node within the given node that corresponds to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\n * @param keyword A keyword as specified in the grammar.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForKeyword(node, keyword, index) {\n    if (!node) {\n        return undefined;\n    }\n    const nodes = findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    }\n    else {\n        index = 0;\n    }\n    return nodes[index];\n}\nexport function findNodesForKeywordInternal(node, keyword, element) {\n    if (node.astNode !== element) {\n        return [];\n    }\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\n        return [node];\n    }\n    const treeIterator = streamCst(node).iterator();\n    let result;\n    const keywordNodes = [];\n    do {\n        result = treeIterator.next();\n        if (!result.done) {\n            const childNode = result.value;\n            if (childNode.astNode === element) {\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\n                    keywordNodes.push(childNode);\n                }\n            }\n            else {\n                treeIterator.prune();\n            }\n        }\n    } while (!result.done);\n    return keywordNodes;\n}\n/**\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\n * node is returned. If no assignment is found, the result is `undefined`.\n *\n * @param cstNode A CST node for which to find a property assignment.\n */\nexport function findAssignment(cstNode) {\n    var _a;\n    const astNode = cstNode.astNode;\n    // Only search until the ast node of the parent cst node is no longer the original ast node\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\n    while (astNode === ((_a = cstNode.container) === null || _a === void 0 ? void 0 : _a.astNode)) {\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\n        if (assignment) {\n            return assignment;\n        }\n        cstNode = cstNode.container;\n    }\n    return undefined;\n}\n/**\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\n * this function returns `undefined`.\n */\nexport function findNameAssignment(type) {\n    let startNode = type;\n    if (ast.isInferredType(startNode)) {\n        // for inferred types, the location to start searching for the name-assignment is different\n        if (ast.isAction(startNode.$container)) {\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\n            startNode = startNode.$container.$container;\n        }\n        else if (ast.isParserRule(startNode.$container)) {\n            // investigate the parser rule with the explicitly inferred type\n            startNode = startNode.$container;\n        }\n        else {\n            assertUnreachable(startNode.$container);\n        }\n    }\n    return findNameAssignmentInternal(type, startNode, new Map());\n}\nfunction findNameAssignmentInternal(type, startNode, cache) {\n    var _a;\n    // the cache is only required to prevent infinite loops\n    function go(node, refType) {\n        let childAssignment = undefined;\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\n        // No parent assignment implies unassigned rule call\n        if (!parentAssignment) {\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\n        }\n        cache.set(type, childAssignment);\n        return childAssignment;\n    }\n    if (cache.has(type)) {\n        return cache.get(type);\n    }\n    cache.set(type, undefined);\n    for (const node of streamAllContents(startNode)) {\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\n            cache.set(type, node);\n            return node;\n        }\n        else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\n            return go(node, node.rule.ref);\n        }\n        else if (ast.isSimpleType(node) && ((_a = node.typeRef) === null || _a === void 0 ? void 0 : _a.ref)) {\n            return go(node, node.typeRef.ref);\n        }\n    }\n    return undefined;\n}\nexport function getActionAtElement(element) {\n    const parent = element.$container;\n    if (ast.isGroup(parent)) {\n        const elements = parent.elements;\n        const index = elements.indexOf(element);\n        for (let i = index - 1; i >= 0; i--) {\n            const item = elements[i];\n            if (ast.isAction(item)) {\n                return item;\n            }\n            else {\n                const action = streamAllContents(elements[i]).find(ast.isAction);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    if (ast.isAbstractElement(parent)) {\n        return getActionAtElement(parent);\n    }\n    else {\n        return undefined;\n    }\n}\nexport function isOptionalCardinality(cardinality, element) {\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\n}\nexport function isArrayCardinality(cardinality) {\n    return cardinality === '*' || cardinality === '+';\n}\nexport function isArrayOperator(operator) {\n    return operator === '+=';\n}\n/**\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\n * primitive return type like `number`, `boolean`, etc.\n */\nexport function isDataTypeRule(rule) {\n    return isDataTypeRuleInternal(rule, new Set());\n}\nfunction isDataTypeRuleInternal(rule, visited) {\n    if (visited.has(rule)) {\n        return true;\n    }\n    else {\n        visited.add(rule);\n    }\n    for (const node of streamAllContents(rule)) {\n        if (ast.isRuleCall(node)) {\n            if (!node.rule.ref) {\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\n                return false;\n            }\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\n                return false;\n            }\n        }\n        else if (ast.isAssignment(node)) {\n            return false;\n        }\n        else if (ast.isAction(node)) {\n            return false;\n        }\n    }\n    return Boolean(rule.definition);\n}\nexport function isDataType(type) {\n    return isDataTypeInternal(type.type, new Set());\n}\nfunction isDataTypeInternal(type, visited) {\n    if (visited.has(type)) {\n        return true;\n    }\n    else {\n        visited.add(type);\n    }\n    if (ast.isArrayType(type)) {\n        return false;\n    }\n    else if (ast.isReferenceType(type)) {\n        return false;\n    }\n    else if (ast.isUnionType(type)) {\n        return type.types.every(e => isDataTypeInternal(e, visited));\n    }\n    else if (ast.isSimpleType(type)) {\n        if (type.primitiveType !== undefined) {\n            return true;\n        }\n        else if (type.stringType !== undefined) {\n            return true;\n        }\n        else if (type.typeRef !== undefined) {\n            const ref = type.typeRef.ref;\n            if (ast.isType(ref)) {\n                return isDataTypeInternal(ref.type, visited);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nexport function getExplicitRuleType(rule) {\n    if (rule.inferredType) {\n        return rule.inferredType.name;\n    }\n    else if (rule.dataType) {\n        return rule.dataType;\n    }\n    else if (rule.returnType) {\n        const refType = rule.returnType.ref;\n        if (refType) {\n            // check if we need to check Action as return type\n            if (ast.isParserRule(refType)) {\n                return refType.name;\n            }\n            else if (ast.isInterface(refType) || ast.isType(refType)) {\n                return refType.name;\n            }\n        }\n    }\n    return undefined;\n}\nexport function getTypeName(type) {\n    var _a;\n    if (ast.isParserRule(type)) {\n        return isDataTypeRule(type) ? type.name : (_a = getExplicitRuleType(type)) !== null && _a !== void 0 ? _a : type.name;\n    }\n    else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\n        return type.name;\n    }\n    else if (ast.isAction(type)) {\n        const actionType = getActionType(type);\n        if (actionType) {\n            return actionType;\n        }\n    }\n    else if (ast.isInferredType(type)) {\n        return type.name;\n    }\n    throw new Error('Cannot get name of Unknown Type');\n}\nexport function getActionType(action) {\n    var _a;\n    if (action.inferredType) {\n        return action.inferredType.name;\n    }\n    else if ((_a = action.type) === null || _a === void 0 ? void 0 : _a.ref) {\n        return getTypeName(action.type.ref);\n    }\n    return undefined; // not inferring and not referencing a valid type\n}\n/**\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\n * For data type rules, the name of the rule is returned,\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\n * @param rule the given rule\n * @returns the name of the AST node type of the rule\n */\nexport function getRuleTypeName(rule) {\n    var _a, _b, _c;\n    if (ast.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';\n    }\n    else {\n        return isDataTypeRule(rule) ? rule.name : (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\n/**\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\n * For data type rules, the name of the declared return type of the rule is returned (if any),\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\n * @param rule the given rule\n * @returns the name of the type of the produced values of the rule at runtime\n */\nexport function getRuleType(rule) {\n    var _a, _b, _c;\n    if (ast.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';\n    }\n    else {\n        return (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\nexport function terminalRegex(terminalRule) {\n    const flags = {\n        s: false,\n        i: false,\n        u: false\n    };\n    const source = abstractElementToRegex(terminalRule.definition, flags);\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\n    return new RegExp(source, flagText);\n}\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\nconst WILDCARD = /[\\s\\S]/.source;\nfunction abstractElementToRegex(element, flags) {\n    if (ast.isTerminalAlternatives(element)) {\n        return terminalAlternativesToRegex(element);\n    }\n    else if (ast.isTerminalGroup(element)) {\n        return terminalGroupToRegex(element);\n    }\n    else if (ast.isCharacterRange(element)) {\n        return characterRangeToRegex(element);\n    }\n    else if (ast.isTerminalRuleCall(element)) {\n        const rule = element.rule.ref;\n        if (!rule) {\n            throw new Error('Missing rule reference.');\n        }\n        return withCardinality(abstractElementToRegex(rule.definition), {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    }\n    else if (ast.isNegatedToken(element)) {\n        return negateTokenToRegex(element);\n    }\n    else if (ast.isUntilToken(element)) {\n        return untilTokenToRegex(element);\n    }\n    else if (ast.isRegexToken(element)) {\n        const lastSlash = element.regex.lastIndexOf('/');\n        const source = element.regex.substring(1, lastSlash);\n        const regexFlags = element.regex.substring(lastSlash + 1);\n        if (flags) {\n            flags.i = regexFlags.includes('i');\n            flags.s = regexFlags.includes('s');\n            flags.u = regexFlags.includes('u');\n        }\n        return withCardinality(source, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead,\n            wrap: false\n        });\n    }\n    else if (ast.isWildcard(element)) {\n        return withCardinality(WILDCARD, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    }\n    else {\n        throw new Error(`Invalid terminal element: ${element === null || element === void 0 ? void 0 : element.$type}`);\n    }\n}\nfunction terminalAlternativesToRegex(alternatives) {\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\n        cardinality: alternatives.cardinality,\n        lookahead: alternatives.lookahead\n    });\n}\nfunction terminalGroupToRegex(group) {\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\n        cardinality: group.cardinality,\n        lookahead: group.lookahead\n    });\n}\nfunction untilTokenToRegex(until) {\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\n        cardinality: until.cardinality,\n        lookahead: until.lookahead\n    });\n}\nfunction negateTokenToRegex(negate) {\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\n        cardinality: negate.cardinality,\n        lookahead: negate.lookahead\n    });\n}\nfunction characterRangeToRegex(range) {\n    if (range.right) {\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\n            cardinality: range.cardinality,\n            lookahead: range.lookahead,\n            wrap: false\n        });\n    }\n    return withCardinality(keywordToRegex(range.left), {\n        cardinality: range.cardinality,\n        lookahead: range.lookahead,\n        wrap: false\n    });\n}\nfunction keywordToRegex(keyword) {\n    return escapeRegExp(keyword.value);\n}\nfunction withCardinality(regex, options) {\n    var _a;\n    if (options.wrap !== false || options.lookahead) {\n        regex = `(${(_a = options.lookahead) !== null && _a !== void 0 ? _a : ''}${regex})`;\n    }\n    if (options.cardinality) {\n        return `${regex}${options.cardinality}`;\n    }\n    return regex;\n}\n","export function PRINT_ERROR(msg) {\n    /* istanbul ignore else - can't override global.console in node.js */\n    if (console && console.error) {\n        console.error(`Error: ${msg}`);\n    }\n}\nexport function PRINT_WARNING(msg) {\n    /* istanbul ignore else - can't override global.console in node.js*/\n    if (console && console.warn) {\n        // TODO: modify docs accordingly\n        console.warn(`Warning: ${msg}`);\n    }\n}\n","export function timer(func) {\n    const start = new Date().getTime();\n    const val = func();\n    const end = new Date().getTime();\n    const total = end - start;\n    return { time: total, value: val };\n}\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast) {\n    function FakeConstructor() { }\n    // If our object is used as a constructor, it would receive\n    FakeConstructor.prototype = toBecomeFast;\n    const fakeInstance = new FakeConstructor();\n    function fakeAccess() {\n        return typeof fakeInstance.bar;\n    }\n    // help V8 understand this is a \"real\" prototype by actually using\n    // the fake instance.\n    fakeAccess();\n    fakeAccess();\n    // Always true condition to suppress the Firefox warning of unreachable\n    // code after a return statement.\n    if (1)\n        return toBecomeFast;\n    // Eval prevents optimization of this method (even though this is dead code)\n    // - https://esbuild.github.io/content-types/#direct-eval\n    /* istanbul ignore next */\n    // tslint:disable-next-line\n    (0, eval)(toBecomeFast);\n}\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n        return tokType.LABEL;\n    }\n    else {\n        return tokType.name;\n    }\n}\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\nexport class AbstractProduction {\n    get definition() {\n        return this._definition;\n    }\n    set definition(value) {\n        this._definition = value;\n    }\n    constructor(_definition) {\n        this._definition = _definition;\n    }\n    accept(visitor) {\n        visitor.visit(this);\n        forEach(this.definition, (prod) => {\n            prod.accept(visitor);\n        });\n    }\n}\nexport class NonTerminal extends AbstractProduction {\n    constructor(options) {\n        super([]);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n    set definition(definition) {\n        // immutable\n    }\n    get definition() {\n        if (this.referencedRule !== undefined) {\n            return this.referencedRule.definition;\n        }\n        return [];\n    }\n    accept(visitor) {\n        visitor.visit(this);\n        // don't visit children of a reference, we will get cyclic infinite loops if we do so\n    }\n}\nexport class Rule extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.orgText = \"\";\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Alternative extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.ignoreAmbiguities = false;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Option extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class RepetitionMandatory extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class RepetitionMandatoryWithSeparator extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Repetition extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class RepetitionWithSeparator extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Alternation extends AbstractProduction {\n    get definition() {\n        return this._definition;\n    }\n    set definition(value) {\n        this._definition = value;\n    }\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        this.ignoreAmbiguities = false;\n        this.hasPredicates = false;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Terminal {\n    constructor(options) {\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n    accept(visitor) {\n        visitor.visit(this);\n    }\n}\nexport function serializeGrammar(topRules) {\n    return map(topRules, serializeProduction);\n}\nexport function serializeProduction(node) {\n    function convertDefinition(definition) {\n        return map(definition, serializeProduction);\n    }\n    /* istanbul ignore else */\n    if (node instanceof NonTerminal) {\n        const serializedNonTerminal = {\n            type: \"NonTerminal\",\n            name: node.nonTerminalName,\n            idx: node.idx,\n        };\n        if (isString(node.label)) {\n            serializedNonTerminal.label = node.label;\n        }\n        return serializedNonTerminal;\n    }\n    else if (node instanceof Alternative) {\n        return {\n            type: \"Alternative\",\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof Option) {\n        return {\n            type: \"Option\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof RepetitionMandatory) {\n        return {\n            type: \"RepetitionMandatory\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof RepetitionMandatoryWithSeparator) {\n        return {\n            type: \"RepetitionMandatoryWithSeparator\",\n            idx: node.idx,\n            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof RepetitionWithSeparator) {\n        return {\n            type: \"RepetitionWithSeparator\",\n            idx: node.idx,\n            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof Repetition) {\n        return {\n            type: \"Repetition\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof Alternation) {\n        return {\n            type: \"Alternation\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof Terminal) {\n        const serializedTerminal = {\n            type: \"Terminal\",\n            name: node.terminalType.name,\n            label: tokenLabel(node.terminalType),\n            idx: node.idx,\n        };\n        if (isString(node.label)) {\n            serializedTerminal.terminalLabel = node.label;\n        }\n        const pattern = node.terminalType.PATTERN;\n        if (node.terminalType.PATTERN) {\n            serializedTerminal.pattern = isRegExp(pattern)\n                ? pattern.source\n                : pattern;\n        }\n        return serializedTerminal;\n    }\n    else if (node instanceof Rule) {\n        return {\n            type: \"Rule\",\n            name: node.name,\n            orgText: node.orgText,\n            definition: convertDefinition(node.definition),\n        };\n        /* c8 ignore next 3 */\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\n","import { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"./model.js\";\nexport class GAstVisitor {\n    visit(node) {\n        const nodeAny = node;\n        switch (nodeAny.constructor) {\n            case NonTerminal:\n                return this.visitNonTerminal(nodeAny);\n            case Alternative:\n                return this.visitAlternative(nodeAny);\n            case Option:\n                return this.visitOption(nodeAny);\n            case RepetitionMandatory:\n                return this.visitRepetitionMandatory(nodeAny);\n            case RepetitionMandatoryWithSeparator:\n                return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n            case RepetitionWithSeparator:\n                return this.visitRepetitionWithSeparator(nodeAny);\n            case Repetition:\n                return this.visitRepetition(nodeAny);\n            case Alternation:\n                return this.visitAlternation(nodeAny);\n            case Terminal:\n                return this.visitTerminal(nodeAny);\n            case Rule:\n                return this.visitRule(nodeAny);\n            /* c8 ignore next 2 */\n            default:\n                throw Error(\"non exhaustive match\");\n        }\n    }\n    /* c8 ignore next */\n    visitNonTerminal(node) { }\n    /* c8 ignore next */\n    visitAlternative(node) { }\n    /* c8 ignore next */\n    visitOption(node) { }\n    /* c8 ignore next */\n    visitRepetition(node) { }\n    /* c8 ignore next */\n    visitRepetitionMandatory(node) { }\n    /* c8 ignore next 3 */\n    visitRepetitionMandatoryWithSeparator(node) { }\n    /* c8 ignore next */\n    visitRepetitionWithSeparator(node) { }\n    /* c8 ignore next */\n    visitAlternation(node) { }\n    /* c8 ignore next */\n    visitTerminal(node) { }\n    /* c8 ignore next */\n    visitRule(node) { }\n}\n","import { every, includes, some } from \"lodash-es\";\nimport { AbstractProduction, Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"./model.js\";\nexport function isSequenceProd(prod) {\n    return (prod instanceof Alternative ||\n        prod instanceof Option ||\n        prod instanceof Repetition ||\n        prod instanceof RepetitionMandatory ||\n        prod instanceof RepetitionMandatoryWithSeparator ||\n        prod instanceof RepetitionWithSeparator ||\n        prod instanceof Terminal ||\n        prod instanceof Rule);\n}\nexport function isOptionalProd(prod, alreadyVisited = []) {\n    const isDirectlyOptional = prod instanceof Option ||\n        prod instanceof Repetition ||\n        prod instanceof RepetitionWithSeparator;\n    if (isDirectlyOptional) {\n        return true;\n    }\n    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n    // empty optional top rule\n    // may be indirectly optional ((A?B?C?) | (D?E?F?))\n    if (prod instanceof Alternation) {\n        // for OR its enough for just one of the alternatives to be optional\n        return some(prod.definition, (subProd) => {\n            return isOptionalProd(subProd, alreadyVisited);\n        });\n    }\n    else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n        // avoiding stack overflow due to infinite recursion\n        return false;\n    }\n    else if (prod instanceof AbstractProduction) {\n        if (prod instanceof NonTerminal) {\n            alreadyVisited.push(prod);\n        }\n        return every(prod.definition, (subProd) => {\n            return isOptionalProd(subProd, alreadyVisited);\n        });\n    }\n    else {\n        return false;\n    }\n}\nexport function isBranchingProd(prod) {\n    return prod instanceof Alternation;\n}\nexport function getProductionDslName(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n        return \"SUBRULE\";\n    }\n    else if (prod instanceof Option) {\n        return \"OPTION\";\n    }\n    else if (prod instanceof Alternation) {\n        return \"OR\";\n    }\n    else if (prod instanceof RepetitionMandatory) {\n        return \"AT_LEAST_ONE\";\n    }\n    else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        return \"AT_LEAST_ONE_SEP\";\n    }\n    else if (prod instanceof RepetitionWithSeparator) {\n        return \"MANY_SEP\";\n    }\n    else if (prod instanceof Repetition) {\n        return \"MANY\";\n    }\n    else if (prod instanceof Terminal) {\n        return \"CONSUME\";\n        /* c8 ignore next 3 */\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal, } from \"@chevrotain/gast\";\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport class RestWalker {\n    walk(prod, prevRest = []) {\n        forEach(prod.definition, (subProd, index) => {\n            const currRest = drop(prod.definition, index + 1);\n            /* istanbul ignore else */\n            if (subProd instanceof NonTerminal) {\n                this.walkProdRef(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Terminal) {\n                this.walkTerminal(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Alternative) {\n                this.walkFlat(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Option) {\n                this.walkOption(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof RepetitionMandatory) {\n                this.walkAtLeastOne(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n                this.walkAtLeastOneSep(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof RepetitionWithSeparator) {\n                this.walkManySep(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Repetition) {\n                this.walkMany(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Alternation) {\n                this.walkOr(subProd, currRest, prevRest);\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    }\n    walkTerminal(terminal, currRest, prevRest) { }\n    walkProdRef(refProd, currRest, prevRest) { }\n    walkFlat(flatProd, currRest, prevRest) {\n        // ABCDEF => after the D the rest is EF\n        const fullOrRest = currRest.concat(prevRest);\n        this.walk(flatProd, fullOrRest);\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        // ABC(DE)?F => after the (DE)? the rest is F\n        const fullOrRest = currRest.concat(prevRest);\n        this.walk(optionProd, fullOrRest);\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n        const fullAtLeastOneRest = [\n            new Option({ definition: atLeastOneProd.definition }),\n        ].concat(currRest, prevRest);\n        this.walk(atLeastOneProd, fullAtLeastOneRest);\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n        const fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n        const fullManyRest = [\n            new Option({ definition: manyProd.definition }),\n        ].concat(currRest, prevRest);\n        this.walk(manyProd, fullManyRest);\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n        const fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n        this.walk(manySepProd, fullManySepRest);\n    }\n    walkOr(orProd, currRest, prevRest) {\n        // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n        const fullOrRest = currRest.concat(prevRest);\n        // walk all different alternatives\n        forEach(orProd.definition, (alt) => {\n            // wrapping each alternative in a single definition wrapper\n            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n            const prodWrapper = new Alternative({ definition: [alt] });\n            this.walk(prodWrapper, fullOrRest);\n        });\n    }\n}\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    const repSepRest = [\n        new Option({\n            definition: [\n                new Terminal({ terminalType: repSepProd.separator }),\n            ].concat(repSepProd.definition),\n        }),\n    ];\n    const fullRepSepRest = repSepRest.concat(currRest, prevRest);\n    return fullRepSepRest;\n}\n","import { flatten, map, uniq } from \"lodash-es\";\nimport { isBranchingProd, isOptionalProd, isSequenceProd, NonTerminal, Terminal, } from \"@chevrotain/gast\";\nexport function first(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n        // this could in theory cause infinite loops if\n        // (1) prod A refs prod B.\n        // (2) prod B refs prod A\n        // (3) AB can match the empty set\n        // in other words a cycle where everything is optional so the first will keep\n        // looking ahead for the next optional part and will never exit\n        // currently there is no safeguard for this unique edge case because\n        // (1) not sure a grammar in which this can happen is useful for anything (productive)\n        return first(prod.referencedRule);\n    }\n    else if (prod instanceof Terminal) {\n        return firstForTerminal(prod);\n    }\n    else if (isSequenceProd(prod)) {\n        return firstForSequence(prod);\n    }\n    else if (isBranchingProd(prod)) {\n        return firstForBranching(prod);\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function firstForSequence(prod) {\n    let firstSet = [];\n    const seq = prod.definition;\n    let nextSubProdIdx = 0;\n    let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    let currSubProd;\n    // so we enter the loop at least once (if the definition is not empty\n    let isLastInnerProdOptional = true;\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n        currSubProd = seq[nextSubProdIdx];\n        isLastInnerProdOptional = isOptionalProd(currSubProd);\n        firstSet = firstSet.concat(first(currSubProd));\n        nextSubProdIdx = nextSubProdIdx + 1;\n        hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return uniq(firstSet);\n}\nexport function firstForBranching(prod) {\n    const allAlternativesFirsts = map(prod.definition, (innerProd) => {\n        return first(innerProd);\n    });\n    return uniq(flatten(allAlternativesFirsts));\n}\nexport function firstForTerminal(terminal) {\n    return [terminal.terminalType];\n}\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative } from \"@chevrotain/gast\";\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n    constructor(topProd) {\n        super();\n        this.topProd = topProd;\n        this.follows = {};\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.follows;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n        // do nothing! just like in the public sector after 13:00\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n        const followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n            this.topProd.name;\n        const fullRest = currRest.concat(prevRest);\n        const restProd = new Alternative({ definition: fullRest });\n        const t_in_topProd_follows = first(restProd);\n        this.follows[followName] = t_in_topProd_follows;\n    }\n}\nexport function computeAllProdsFollows(topProductions) {\n    const reSyncFollows = {};\n    forEach(topProductions, (topProd) => {\n        const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n        assign(reSyncFollows, currRefsFollow);\n    });\n    return reSyncFollows;\n}\nexport function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + IN;\n}\nexport function buildInProdFollowPrefix(terminal) {\n    const terminalName = terminal.terminalType.name;\n    return terminalName + terminal.idx + IN;\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RegExpParser, } from \"@chevrotain/regexp-to-ast\";\nlet regExpAstCache = {};\nconst regExpParser = new RegExpParser();\nexport function getRegExpAst(regExp) {\n    const regExpStr = regExp.toString();\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n        return regExpAstCache[regExpStr];\n    }\n    else {\n        const regExpAst = regExpParser.pattern(regExpStr);\n        regExpAstCache[regExpStr] = regExpAst;\n        return regExpAst;\n    }\n}\nexport function clearRegExpParserCache() {\n    regExpAstCache = {};\n}\n","import { BaseRegExpVisitor, } from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\nconst complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nexport function getOptimizedStartCodesIndices(regExp, ensureOptimizations = false) {\n    try {\n        const ast = getRegExpAst(regExp);\n        const firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n        return firstChars;\n    }\n    catch (e) {\n        /* istanbul ignore next */\n        // Testing this relies on the regexp-to-ast library having a bug... */\n        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n        if (e.message === complementErrorMessage) {\n            if (ensureOptimizations) {\n                PRINT_WARNING(`${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n                    \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n            }\n        }\n        else {\n            let msgSuffix = \"\";\n            if (ensureOptimizations) {\n                msgSuffix =\n                    \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n                        \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n            }\n            PRINT_ERROR(`${failedOptimizationPrefixMsg}\\n` +\n                `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n                `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n                \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n                msgSuffix);\n        }\n    }\n    return [];\n}\nexport function firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n        case \"Disjunction\":\n            for (let i = 0; i < ast.value.length; i++) {\n                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n            }\n            break;\n        case \"Alternative\":\n            const terms = ast.value;\n            for (let i = 0; i < terms.length; i++) {\n                const term = terms[i];\n                // skip terms that cannot effect the first char results\n                switch (term.type) {\n                    case \"EndAnchor\":\n                    // A group back reference cannot affect potential starting char.\n                    // because if a back reference is the first production than automatically\n                    // the group being referenced has had to come BEFORE so its codes have already been added\n                    case \"GroupBackReference\":\n                    // assertions do not affect potential starting codes\n                    case \"Lookahead\":\n                    case \"NegativeLookahead\":\n                    case \"StartAnchor\":\n                    case \"WordBoundary\":\n                    case \"NonWordBoundary\":\n                        continue;\n                }\n                const atom = term;\n                switch (atom.type) {\n                    case \"Character\":\n                        addOptimizedIdxToResult(atom.value, result, ignoreCase);\n                        break;\n                    case \"Set\":\n                        if (atom.complement === true) {\n                            throw Error(complementErrorMessage);\n                        }\n                        forEach(atom.value, (code) => {\n                            if (typeof code === \"number\") {\n                                addOptimizedIdxToResult(code, result, ignoreCase);\n                            }\n                            else {\n                                // range\n                                const range = code;\n                                // cannot optimize when ignoreCase is\n                                if (ignoreCase === true) {\n                                    for (let rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                }\n                                // Optimization (2 orders of magnitude less work for very large ranges)\n                                else {\n                                    // handle unoptimized values\n                                    for (let rangeCode = range.from; rangeCode <= range.to && rangeCode < minOptimizationVal; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                                    if (range.to >= minOptimizationVal) {\n                                        const minUnOptVal = range.from >= minOptimizationVal\n                                            ? range.from\n                                            : minOptimizationVal;\n                                        const maxUnOptVal = range.to;\n                                        const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                                        const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n                                        for (let currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                                            result[currOptIdx] = currOptIdx;\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                        break;\n                    case \"Group\":\n                        firstCharOptimizedIndices(atom.value, result, ignoreCase);\n                        break;\n                    /* istanbul ignore next */\n                    default:\n                        throw Error(\"Non Exhaustive Match\");\n                }\n                // reached a mandatory production, no more **start** codes can be found on this alternative\n                const isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n                if (\n                // A group may be optional due to empty contents /(?:)/\n                // or if everything inside it is optional /((a)?)/\n                (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n                    // If this term is not a group it may only be optional if it has an optional quantifier\n                    (atom.type !== \"Group\" && isOptionalQuantifier === false)) {\n                    break;\n                }\n            }\n            break;\n        /* istanbul ignore next */\n        default:\n            throw Error(\"non exhaustive match!\");\n    }\n    // console.log(Object.keys(result).length)\n    return values(result);\n}\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n        handleIgnoreCase(code, result);\n    }\n}\nfunction handleIgnoreCase(code, result) {\n    const char = String.fromCharCode(code);\n    const upperChar = char.toUpperCase();\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n    }\n    else {\n        const lowerChar = char.toLowerCase();\n        if (lowerChar !== char) {\n            const optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0));\n            result[optimizedCharIdx] = optimizedCharIdx;\n        }\n    }\n}\nfunction findCode(setNode, targetCharCodes) {\n    return find(setNode.value, (codeOrRange) => {\n        if (typeof codeOrRange === \"number\") {\n            return includes(targetCharCodes, codeOrRange);\n        }\n        else {\n            // range\n            const range = codeOrRange;\n            return (find(targetCharCodes, (targetCode) => range.from <= targetCode && targetCode <= range.to) !== undefined);\n        }\n    });\n}\nfunction isWholeOptional(ast) {\n    const quantifier = ast.quantifier;\n    if (quantifier && quantifier.atLeast === 0) {\n        return true;\n    }\n    if (!ast.value) {\n        return false;\n    }\n    return isArray(ast.value)\n        ? every(ast.value, isWholeOptional)\n        : isWholeOptional(ast.value);\n}\nclass CharCodeFinder extends BaseRegExpVisitor {\n    constructor(targetCharCodes) {\n        super();\n        this.targetCharCodes = targetCharCodes;\n        this.found = false;\n    }\n    visitChildren(node) {\n        // No need to keep looking...\n        if (this.found === true) {\n            return;\n        }\n        // switch lookaheads as they do not actually consume any characters thus\n        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n        switch (node.type) {\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                return;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                return;\n        }\n        super.visitChildren(node);\n    }\n    visitCharacter(node) {\n        if (includes(this.targetCharCodes, node.value)) {\n            this.found = true;\n        }\n    }\n    visitSet(node) {\n        if (node.complement) {\n            if (findCode(node, this.targetCharCodes) === undefined) {\n                this.found = true;\n            }\n        }\n        else {\n            if (findCode(node, this.targetCharCodes) !== undefined) {\n                this.found = true;\n            }\n        }\n    }\n}\nexport function canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n        const ast = getRegExpAst(pattern);\n        const charCodeFinder = new CharCodeFinder(charCodes);\n        charCodeFinder.visit(ast);\n        return charCodeFinder.found;\n    }\n    else {\n        return (find(pattern, (char) => {\n            return includes(charCodes, char.charCodeAt(0));\n        }) !== undefined);\n    }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport { Lexer, LexerDefinitionErrorType, } from \"./lexer_public.js\";\nimport { compact, defaults, difference, filter, find, first, flatten, forEach, has, includes, indexOf, isArray, isEmpty, isFunction, isRegExp, isString, isUndefined, keys, map, reduce, reject, values, } from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport { canMatchCharCode, failedOptimizationPrefixMsg, getOptimizedStartCodesIndices, } from \"./reg_exp.js\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\nexport let SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\nexport function disableSticky() {\n    SUPPORT_STICKY = false;\n}\nexport function enableSticky() {\n    SUPPORT_STICKY = true;\n}\nexport function analyzeTokenTypes(tokenTypes, options) {\n    options = defaults(options, {\n        useSticky: SUPPORT_STICKY,\n        debug: false,\n        safeMode: false,\n        positionTracking: \"full\",\n        lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n        tracer: (msg, action) => action(),\n    });\n    const tracer = options.tracer;\n    tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n        initCharCodeToOptimizedIndexMap();\n    });\n    let onlyRelevantTypes;\n    tracer(\"Reject Lexer.NA\", () => {\n        onlyRelevantTypes = reject(tokenTypes, (currType) => {\n            return currType[PATTERN] === Lexer.NA;\n        });\n    });\n    let hasCustom = false;\n    let allTransformedPatterns;\n    tracer(\"Transform Patterns\", () => {\n        hasCustom = false;\n        allTransformedPatterns = map(onlyRelevantTypes, (currType) => {\n            const currPattern = currType[PATTERN];\n            /* istanbul ignore else */\n            if (isRegExp(currPattern)) {\n                const regExpSource = currPattern.source;\n                if (regExpSource.length === 1 &&\n                    // only these regExp meta characters which can appear in a length one regExp\n                    regExpSource !== \"^\" &&\n                    regExpSource !== \"$\" &&\n                    regExpSource !== \".\" &&\n                    !currPattern.ignoreCase) {\n                    return regExpSource;\n                }\n                else if (regExpSource.length === 2 &&\n                    regExpSource[0] === \"\\\\\" &&\n                    // not a meta character\n                    !includes([\n                        \"d\",\n                        \"D\",\n                        \"s\",\n                        \"S\",\n                        \"t\",\n                        \"r\",\n                        \"n\",\n                        \"t\",\n                        \"0\",\n                        \"c\",\n                        \"b\",\n                        \"B\",\n                        \"f\",\n                        \"v\",\n                        \"w\",\n                        \"W\",\n                    ], regExpSource[1])) {\n                    // escaped meta Characters: /\\+/ /\\[/\n                    // or redundant escaping: /\\a/\n                    // without the escaping \"\\\"\n                    return regExpSource[1];\n                }\n                else {\n                    return options.useSticky\n                        ? addStickyFlag(currPattern)\n                        : addStartOfInput(currPattern);\n                }\n            }\n            else if (isFunction(currPattern)) {\n                hasCustom = true;\n                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n                return { exec: currPattern };\n            }\n            else if (typeof currPattern === \"object\") {\n                hasCustom = true;\n                // ICustomPattern\n                return currPattern;\n            }\n            else if (typeof currPattern === \"string\") {\n                if (currPattern.length === 1) {\n                    return currPattern;\n                }\n                else {\n                    const escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n                    const wrappedRegExp = new RegExp(escapedRegExpString);\n                    return options.useSticky\n                        ? addStickyFlag(wrappedRegExp)\n                        : addStartOfInput(wrappedRegExp);\n                }\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    });\n    let patternIdxToType;\n    let patternIdxToGroup;\n    let patternIdxToLongerAltIdxArr;\n    let patternIdxToPushMode;\n    let patternIdxToPopMode;\n    tracer(\"misc mapping\", () => {\n        patternIdxToType = map(onlyRelevantTypes, (currType) => currType.tokenTypeIdx);\n        patternIdxToGroup = map(onlyRelevantTypes, (clazz) => {\n            const groupName = clazz.GROUP;\n            /* istanbul ignore next */\n            if (groupName === Lexer.SKIPPED) {\n                return undefined;\n            }\n            else if (isString(groupName)) {\n                return groupName;\n            }\n            else if (isUndefined(groupName)) {\n                return false;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n        patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz) => {\n            const longerAltType = clazz.LONGER_ALT;\n            if (longerAltType) {\n                const longerAltIdxArr = isArray(longerAltType)\n                    ? map(longerAltType, (type) => indexOf(onlyRelevantTypes, type))\n                    : [indexOf(onlyRelevantTypes, longerAltType)];\n                return longerAltIdxArr;\n            }\n        });\n        patternIdxToPushMode = map(onlyRelevantTypes, (clazz) => clazz.PUSH_MODE);\n        patternIdxToPopMode = map(onlyRelevantTypes, (clazz) => has(clazz, \"POP_MODE\"));\n    });\n    let patternIdxToCanLineTerminator;\n    tracer(\"Line Terminator Handling\", () => {\n        const lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n        patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n        if (options.positionTracking !== \"onlyOffset\") {\n            patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n                if (has(tokType, \"LINE_BREAKS\")) {\n                    return !!tokType.LINE_BREAKS;\n                }\n                else {\n                    return (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n                        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN));\n                }\n            });\n        }\n    });\n    let patternIdxToIsCustom;\n    let patternIdxToShort;\n    let emptyGroups;\n    let patternIdxToConfig;\n    tracer(\"Misc Mapping #2\", () => {\n        patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n        patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n        emptyGroups = reduce(onlyRelevantTypes, (acc, clazz) => {\n            const groupName = clazz.GROUP;\n            if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n                acc[groupName] = [];\n            }\n            return acc;\n        }, {});\n        patternIdxToConfig = map(allTransformedPatterns, (x, idx) => {\n            return {\n                pattern: allTransformedPatterns[idx],\n                longerAlt: patternIdxToLongerAltIdxArr[idx],\n                canLineTerminator: patternIdxToCanLineTerminator[idx],\n                isCustom: patternIdxToIsCustom[idx],\n                short: patternIdxToShort[idx],\n                group: patternIdxToGroup[idx],\n                push: patternIdxToPushMode[idx],\n                pop: patternIdxToPopMode[idx],\n                tokenTypeIdx: patternIdxToType[idx],\n                tokenType: onlyRelevantTypes[idx],\n            };\n        });\n    });\n    let canBeOptimized = true;\n    let charCodeToPatternIdxToConfig = [];\n    if (!options.safeMode) {\n        tracer(\"First Char Optimization\", () => {\n            charCodeToPatternIdxToConfig = reduce(onlyRelevantTypes, (result, currTokType, idx) => {\n                if (typeof currTokType.PATTERN === \"string\") {\n                    const charCode = currTokType.PATTERN.charCodeAt(0);\n                    const optimizedIdx = charCodeToOptimizedIndex(charCode);\n                    addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n                }\n                else if (isArray(currTokType.START_CHARS_HINT)) {\n                    let lastOptimizedIdx;\n                    forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n                        const charCode = typeof charOrInt === \"string\"\n                            ? charOrInt.charCodeAt(0)\n                            : charOrInt;\n                        const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n                        // Avoid adding the config multiple times\n                        /* istanbul ignore else */\n                        // - Difficult to check this scenario effects as it is only a performance\n                        //   optimization that does not change correctness\n                        if (lastOptimizedIdx !== currOptimizedIdx) {\n                            lastOptimizedIdx = currOptimizedIdx;\n                            addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n                        }\n                    });\n                }\n                else if (isRegExp(currTokType.PATTERN)) {\n                    if (currTokType.PATTERN.unicode) {\n                        canBeOptimized = false;\n                        if (options.ensureOptimizations) {\n                            PRINT_ERROR(`${failedOptimizationPrefixMsg}` +\n                                `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                                \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                                \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\");\n                        }\n                    }\n                    else {\n                        const optimizedCodes = getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations);\n                        /* istanbul ignore if */\n                        // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n                        // the first should be a different validation and the second cannot be tested.\n                        if (isEmpty(optimizedCodes)) {\n                            // we cannot understand what codes may start possible matches\n                            // The optimization correctness requires knowing start codes for ALL patterns.\n                            // Not actually sure this is an error, no debug message\n                            canBeOptimized = false;\n                        }\n                        forEach(optimizedCodes, (code) => {\n                            addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n                        });\n                    }\n                }\n                else {\n                    if (options.ensureOptimizations) {\n                        PRINT_ERROR(`${failedOptimizationPrefixMsg}` +\n                            `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\");\n                    }\n                    canBeOptimized = false;\n                }\n                return result;\n            }, []);\n        });\n    }\n    return {\n        emptyGroups: emptyGroups,\n        patternIdxToConfig: patternIdxToConfig,\n        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n        hasCustom: hasCustom,\n        canBeOptimized: canBeOptimized,\n    };\n}\nexport function validatePatterns(tokenTypes, validModesNames) {\n    let errors = [];\n    const missingResult = findMissingPatterns(tokenTypes);\n    errors = errors.concat(missingResult.errors);\n    const invalidResult = findInvalidPatterns(missingResult.valid);\n    const validTokenTypes = invalidResult.valid;\n    errors = errors.concat(invalidResult.errors);\n    errors = errors.concat(validateRegExpPattern(validTokenTypes));\n    errors = errors.concat(findInvalidGroupType(validTokenTypes));\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n    return errors;\n}\nfunction validateRegExpPattern(tokenTypes) {\n    let errors = [];\n    const withRegExpPatterns = filter(tokenTypes, (currTokType) => isRegExp(currTokType[PATTERN]));\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n    return errors;\n}\nexport function findMissingPatterns(tokenTypes) {\n    const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n        return !has(currType, PATTERN);\n    });\n    const errors = map(tokenTypesWithMissingPattern, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- missing static 'PATTERN' property\",\n            type: LexerDefinitionErrorType.MISSING_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n    return { errors, valid };\n}\nexport function findInvalidPatterns(tokenTypes) {\n    const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n        const pattern = currType[PATTERN];\n        return (!isRegExp(pattern) &&\n            !isFunction(pattern) &&\n            !has(pattern, \"exec\") &&\n            !isString(pattern));\n    });\n    const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' can only be a RegExp, a\" +\n                \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n            type: LexerDefinitionErrorType.INVALID_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n    return { errors, valid };\n}\nconst end_of_input = /[^\\\\][$]/;\nexport function findEndOfInputAnchor(tokenTypes) {\n    class EndAnchorFinder extends BaseRegExpVisitor {\n        constructor() {\n            super(...arguments);\n            this.found = false;\n        }\n        visitEndAnchor(node) {\n            this.found = true;\n        }\n    }\n    const invalidRegex = filter(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        try {\n            const regexpAst = getRegExpAst(pattern);\n            const endAnchorVisitor = new EndAnchorFinder();\n            endAnchorVisitor.visit(regexpAst);\n            return endAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return end_of_input.test(pattern.source);\n        }\n    });\n    const errors = map(invalidRegex, (currType) => {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n                \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nexport function findEmptyMatchRegExps(tokenTypes) {\n    const matchesEmptyString = filter(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        return pattern.test(\"\");\n    });\n    const errors = map(matchesEmptyString, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' must not match an empty string\",\n            type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\nexport function findStartOfInputAnchor(tokenTypes) {\n    class StartAnchorFinder extends BaseRegExpVisitor {\n        constructor() {\n            super(...arguments);\n            this.found = false;\n        }\n        visitStartAnchor(node) {\n            this.found = true;\n        }\n    }\n    const invalidRegex = filter(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        try {\n            const regexpAst = getRegExpAst(pattern);\n            const startAnchorVisitor = new StartAnchorFinder();\n            startAnchorVisitor.visit(regexpAst);\n            return startAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return start_of_input.test(pattern.source);\n        }\n    });\n    const errors = map(invalidRegex, (currType) => {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n                \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nexport function findUnsupportedFlags(tokenTypes) {\n    const invalidFlags = filter(tokenTypes, (currType) => {\n        const pattern = currType[PATTERN];\n        return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n    });\n    const errors = map(invalidFlags, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n            type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(tokenTypes) {\n    const found = [];\n    let identicalPatterns = map(tokenTypes, (outerType) => {\n        return reduce(tokenTypes, (result, innerType) => {\n            if (outerType.PATTERN.source === innerType.PATTERN.source &&\n                !includes(found, innerType) &&\n                innerType.PATTERN !== Lexer.NA) {\n                // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n                // in essence we are creating Equivalence classes on equality relation.\n                found.push(innerType);\n                result.push(innerType);\n                return result;\n            }\n            return result;\n        }, []);\n    });\n    identicalPatterns = compact(identicalPatterns);\n    const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n        return currIdenticalSet.length > 1;\n    });\n    const errors = map(duplicatePatterns, (setOfIdentical) => {\n        const tokenTypeNames = map(setOfIdentical, (currType) => {\n            return currType.name;\n        });\n        const dupPatternSrc = first(setOfIdentical).PATTERN;\n        return {\n            message: `The same RegExp pattern ->${dupPatternSrc}<-` +\n                `has been used in all of the following Token Types: ${tokenTypeNames.join(\", \")} <-`,\n            type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n            tokenTypes: setOfIdentical,\n        };\n    });\n    return errors;\n}\nexport function findInvalidGroupType(tokenTypes) {\n    const invalidTypes = filter(tokenTypes, (clazz) => {\n        if (!has(clazz, \"GROUP\")) {\n            return false;\n        }\n        const group = clazz.GROUP;\n        return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n    });\n    const errors = map(invalidTypes, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n            type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nexport function findModesThatDoNotExist(tokenTypes, validModes) {\n    const invalidModes = filter(tokenTypes, (clazz) => {\n        return (clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE));\n    });\n    const errors = map(invalidModes, (tokType) => {\n        const msg = `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n            `which does not exist`;\n        return {\n            message: msg,\n            type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n            tokenTypes: [tokType],\n        };\n    });\n    return errors;\n}\nexport function findUnreachablePatterns(tokenTypes) {\n    const errors = [];\n    const canBeTested = reduce(tokenTypes, (result, tokType, idx) => {\n        const pattern = tokType.PATTERN;\n        if (pattern === Lexer.NA) {\n            return result;\n        }\n        // a more comprehensive validation for all forms of regExps would require\n        // deeper regExp analysis capabilities\n        if (isString(pattern)) {\n            result.push({ str: pattern, idx, tokenType: tokType });\n        }\n        else if (isRegExp(pattern) && noMetaChar(pattern)) {\n            result.push({ str: pattern.source, idx, tokenType: tokType });\n        }\n        return result;\n    }, []);\n    forEach(tokenTypes, (tokType, testIdx) => {\n        forEach(canBeTested, ({ str, idx, tokenType }) => {\n            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n                const msg = `Token: ->${tokenType.name}<- can never be matched.\\n` +\n                    `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n                    `in the lexer's definition.\\n` +\n                    `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n                errors.push({\n                    message: msg,\n                    type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n                    tokenTypes: [tokType, tokenType],\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction testTokenType(str, pattern) {\n    /* istanbul ignore else */\n    if (isRegExp(pattern)) {\n        const regExpArray = pattern.exec(str);\n        return regExpArray !== null && regExpArray.index === 0;\n    }\n    else if (isFunction(pattern)) {\n        // maintain the API of custom patterns\n        return pattern(str, 0, [], {});\n    }\n    else if (has(pattern, \"exec\")) {\n        // maintain the API of custom patterns\n        return pattern.exec(str, 0, [], {});\n    }\n    else if (typeof pattern === \"string\") {\n        return pattern === str;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction noMetaChar(regExp) {\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n    const metaChars = [\n        \".\",\n        \"\\\\\",\n        \"[\",\n        \"]\",\n        \"|\",\n        \"^\",\n        \"$\",\n        \"(\",\n        \")\",\n        \"?\",\n        \"*\",\n        \"+\",\n        \"{\",\n    ];\n    return (find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined);\n}\nexport function addStartOfInput(pattern) {\n    const flags = pattern.ignoreCase ? \"i\" : \"\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`^(?:${pattern.source})`, flags);\n}\nexport function addStickyFlag(pattern) {\n    const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`${pattern.source}`, flags);\n}\nexport function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const errors = [];\n    // some run time checks to help the end users.\n    if (!has(lexerDefinition, DEFAULT_MODE)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                DEFAULT_MODE +\n                \"> property in its definition\\n\",\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n        });\n    }\n    if (!has(lexerDefinition, MODES)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                MODES +\n                \"> property in its definition\\n\",\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n        });\n    }\n    if (has(lexerDefinition, MODES) &&\n        has(lexerDefinition, DEFAULT_MODE) &&\n        !has(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n        errors.push({\n            message: `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n                `which does not exist\\n`,\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n        });\n    }\n    if (has(lexerDefinition, MODES)) {\n        forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n            forEach(currModeValue, (currTokType, currIdx) => {\n                if (isUndefined(currTokType)) {\n                    errors.push({\n                        message: `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n                            `<${currModeName}> at index: <${currIdx}>\\n`,\n                        type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n                    });\n                }\n                else if (has(currTokType, \"LONGER_ALT\")) {\n                    const longerAlt = isArray(currTokType.LONGER_ALT)\n                        ? currTokType.LONGER_ALT\n                        : [currTokType.LONGER_ALT];\n                    forEach(longerAlt, (currLongerAlt) => {\n                        if (!isUndefined(currLongerAlt) &&\n                            !includes(currModeValue, currLongerAlt)) {\n                            errors.push({\n                                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n    return errors;\n}\nexport function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const warnings = [];\n    let hasAnyLineBreak = false;\n    const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n    const concreteTokenTypes = reject(allTokenTypes, (currType) => currType[PATTERN] === Lexer.NA);\n    const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n    if (trackLines) {\n        forEach(concreteTokenTypes, (tokType) => {\n            const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n            if (currIssue !== false) {\n                const message = buildLineBreakIssueMessage(tokType, currIssue);\n                const warningDescriptor = {\n                    message,\n                    type: currIssue.issue,\n                    tokenType: tokType,\n                };\n                warnings.push(warningDescriptor);\n            }\n            else {\n                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n                if (has(tokType, \"LINE_BREAKS\")) {\n                    if (tokType.LINE_BREAKS === true) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n                else {\n                    if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n            }\n        });\n    }\n    if (trackLines && !hasAnyLineBreak) {\n        warnings.push({\n            message: \"Warning: No LINE_BREAKS Found.\\n\" +\n                \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n                \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n                \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n        });\n    }\n    return warnings;\n}\nexport function cloneEmptyGroups(emptyGroups) {\n    const clonedResult = {};\n    const groupKeys = keys(emptyGroups);\n    forEach(groupKeys, (currKey) => {\n        const currGroupValue = emptyGroups[currKey];\n        /* istanbul ignore else */\n        if (isArray(currGroupValue)) {\n            clonedResult[currKey] = [];\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    });\n    return clonedResult;\n}\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType) {\n    const pattern = tokenType.PATTERN;\n    /* istanbul ignore else */\n    if (isRegExp(pattern)) {\n        return false;\n    }\n    else if (isFunction(pattern)) {\n        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n        return true;\n    }\n    else if (has(pattern, \"exec\")) {\n        // ICustomPattern\n        return true;\n    }\n    else if (isString(pattern)) {\n        return false;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function isShortPattern(pattern) {\n    if (isString(pattern) && pattern.length === 1) {\n        return pattern.charCodeAt(0);\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n        const len = text.length;\n        for (let i = this.lastIndex; i < len; i++) {\n            const c = text.charCodeAt(i);\n            if (c === 10) {\n                this.lastIndex = i + 1;\n                return true;\n            }\n            else if (c === 13) {\n                if (text.charCodeAt(i + 1) === 10) {\n                    this.lastIndex = i + 2;\n                }\n                else {\n                    this.lastIndex = i + 1;\n                }\n                return true;\n            }\n        }\n        return false;\n    },\n    lastIndex: 0,\n};\nfunction checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if (has(tokType, \"LINE_BREAKS\")) {\n        // if the user explicitly declared the line_breaks option we will respect their choice\n        // and assume it is correct.\n        return false;\n    }\n    else {\n        /* istanbul ignore else */\n        if (isRegExp(tokType.PATTERN)) {\n            try {\n                // TODO: why is the casting suddenly needed?\n                canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n            }\n            catch (e) {\n                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n                return {\n                    issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n                    errMsg: e.message,\n                };\n            }\n            return false;\n        }\n        else if (isString(tokType.PATTERN)) {\n            // string literal patterns can always be analyzed to detect line terminator usage\n            return false;\n        }\n        else if (isCustomPattern(tokType)) {\n            // custom token types\n            return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n}\nexport function buildLineBreakIssueMessage(tokType, details) {\n    /* istanbul ignore else */\n    if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n        return (\"Warning: unable to identify line terminator usage in pattern.\\n\" +\n            `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n            `\\t Root cause: ${details.errMsg}.\\n` +\n            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\");\n    }\n    else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n        return (\"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n            `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\");\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction getCharCodes(charsOrCodes) {\n    const charCodes = map(charsOrCodes, (numOrString) => {\n        if (isString(numOrString)) {\n            return numOrString.charCodeAt(0);\n        }\n        else {\n            return numOrString;\n        }\n    });\n    return charCodes;\n}\nfunction addToMapOfArrays(map, key, value) {\n    if (map[key] === undefined) {\n        map[key] = [value];\n    }\n    else {\n        map[key].push(value);\n    }\n}\nexport const minOptimizationVal = 256;\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap = [];\nexport function charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal\n        ? charCode\n        : charCodeToOptimizedIdxMap[charCode];\n}\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n    if (isEmpty(charCodeToOptimizedIdxMap)) {\n        charCodeToOptimizedIdxMap = new Array(65536);\n        for (let i = 0; i < 65536; i++) {\n            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n        }\n    }\n}\n","import { clone, compact, difference, flatten, forEach, has, includes, isArray, isEmpty, map, } from \"lodash-es\";\nexport function tokenStructuredMatcher(tokInstance, tokConstructor) {\n    const instanceType = tokInstance.tokenTypeIdx;\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n        return true;\n    }\n    else {\n        return (tokConstructor.isParent === true &&\n            tokConstructor.categoryMatchesMap[instanceType] === true);\n    }\n}\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass = {};\nexport function augmentTokenTypes(tokenTypes) {\n    // collect the parent Token Types as well.\n    const tokenTypesAndParents = expandCategories(tokenTypes);\n    // add required tokenType and categoryMatches properties\n    assignTokenDefaultProps(tokenTypesAndParents);\n    // fill up the categoryMatches\n    assignCategoriesMapProp(tokenTypesAndParents);\n    assignCategoriesTokensProp(tokenTypesAndParents);\n    forEach(tokenTypesAndParents, (tokType) => {\n        tokType.isParent = tokType.categoryMatches.length > 0;\n    });\n}\nexport function expandCategories(tokenTypes) {\n    let result = clone(tokenTypes);\n    let categories = tokenTypes;\n    let searching = true;\n    while (searching) {\n        categories = compact(flatten(map(categories, (currTokType) => currTokType.CATEGORIES)));\n        const newCategories = difference(categories, result);\n        result = result.concat(newCategories);\n        if (isEmpty(newCategories)) {\n            searching = false;\n        }\n        else {\n            categories = newCategories;\n        }\n    }\n    return result;\n}\nexport function assignTokenDefaultProps(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n        if (!hasShortKeyProperty(currTokType)) {\n            tokenIdxToClass[tokenShortNameIdx] = currTokType;\n            currTokType.tokenTypeIdx = tokenShortNameIdx++;\n        }\n        // CATEGORIES? : TokenType | TokenType[]\n        if (hasCategoriesProperty(currTokType) &&\n            !isArray(currTokType.CATEGORIES)\n        // &&\n        // !isUndefined(currTokType.CATEGORIES.PATTERN)\n        ) {\n            currTokType.CATEGORIES = [currTokType.CATEGORIES];\n        }\n        if (!hasCategoriesProperty(currTokType)) {\n            currTokType.CATEGORIES = [];\n        }\n        if (!hasExtendingTokensTypesProperty(currTokType)) {\n            currTokType.categoryMatches = [];\n        }\n        if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n            currTokType.categoryMatchesMap = {};\n        }\n    });\n}\nexport function assignCategoriesTokensProp(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n        // avoid duplications\n        currTokType.categoryMatches = [];\n        forEach(currTokType.categoryMatchesMap, (val, key) => {\n            currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);\n        });\n    });\n}\nexport function assignCategoriesMapProp(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n        singleAssignCategoriesToksMap([], currTokType);\n    });\n}\nexport function singleAssignCategoriesToksMap(path, nextNode) {\n    forEach(path, (pathNode) => {\n        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n    });\n    forEach(nextNode.CATEGORIES, (nextCategory) => {\n        const newPath = path.concat(nextNode);\n        // avoids infinite loops due to cyclic categories.\n        if (!includes(newPath, nextCategory)) {\n            singleAssignCategoriesToksMap(newPath, nextCategory);\n        }\n    });\n}\nexport function hasShortKeyProperty(tokType) {\n    return has(tokType, \"tokenTypeIdx\");\n}\nexport function hasCategoriesProperty(tokType) {\n    return has(tokType, \"CATEGORIES\");\n}\nexport function hasExtendingTokensTypesProperty(tokType) {\n    return has(tokType, \"categoryMatches\");\n}\nexport function hasExtendingTokensTypesMapProperty(tokType) {\n    return has(tokType, \"categoryMatchesMap\");\n}\nexport function isTokenType(tokType) {\n    return has(tokType, \"tokenTypeIdx\");\n}\n","export const defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage(token) {\n        return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n    },\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n        return (`unexpected character: ->${fullText.charAt(startOffset)}<- at offset: ${startOffset},` + ` skipped ${length} characters.`);\n    },\n};\n","import { analyzeTokenTypes, charCodeToOptimizedIndex, cloneEmptyGroups, DEFAULT_MODE, LineTerminatorOptimizedTester, performRuntimeChecks, performWarningRuntimeChecks, SUPPORT_STICKY, validatePatterns, } from \"./lexer.js\";\nimport { assign, clone, forEach, identity, isArray, isEmpty, isUndefined, keys, last, map, noop, reduce, reject, } from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\nexport var LexerDefinitionErrorType;\n(function (LexerDefinitionErrorType) {\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\"] = 17] = \"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\nconst DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: \"full\",\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false,\n    recoveryEnabled: true,\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\nexport class Lexer {\n    constructor(lexerDefinition, config = DEFAULT_LEXER_CONFIG) {\n        this.lexerDefinition = lexerDefinition;\n        this.lexerDefinitionErrors = [];\n        this.lexerDefinitionWarning = [];\n        this.patternIdxToConfig = {};\n        this.charCodeToPatternIdxToConfig = {};\n        this.modes = [];\n        this.emptyGroups = {};\n        this.trackStartLines = true;\n        this.trackEndLines = true;\n        this.hasCustom = false;\n        this.canModeBeOptimized = {};\n        // Duplicated from the parser's perf trace trait to allow future extraction\n        // of the lexer to a separate package.\n        this.TRACE_INIT = (phaseDesc, phaseImpl) => {\n            // No need to optimize this using NOOP pattern because\n            // It is not called in a hot spot...\n            if (this.traceInitPerf === true) {\n                this.traceInitIndent++;\n                const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n                if (this.traceInitIndent < this.traceInitMaxIdent) {\n                    console.log(`${indent}--> <${phaseDesc}>`);\n                }\n                const { time, value } = timer(phaseImpl);\n                /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n                const traceMethod = time > 10 ? console.warn : console.log;\n                if (this.traceInitIndent < this.traceInitMaxIdent) {\n                    traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n                }\n                this.traceInitIndent--;\n                return value;\n            }\n            else {\n                return phaseImpl();\n            }\n        };\n        if (typeof config === \"boolean\") {\n            throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n                \"a boolean 2nd argument is no longer supported\");\n        }\n        // todo: defaults func?\n        this.config = assign({}, DEFAULT_LEXER_CONFIG, config);\n        const traceInitVal = this.config.traceInitPerf;\n        if (traceInitVal === true) {\n            this.traceInitMaxIdent = Infinity;\n            this.traceInitPerf = true;\n        }\n        else if (typeof traceInitVal === \"number\") {\n            this.traceInitMaxIdent = traceInitVal;\n            this.traceInitPerf = true;\n        }\n        this.traceInitIndent = -1;\n        this.TRACE_INIT(\"Lexer Constructor\", () => {\n            let actualDefinition;\n            let hasOnlySingleMode = true;\n            this.TRACE_INIT(\"Lexer Config handling\", () => {\n                if (this.config.lineTerminatorsPattern ===\n                    DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n                    // optimized built-in implementation for the defaults definition of lineTerminators\n                    this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n                }\n                else {\n                    if (this.config.lineTerminatorCharacters ===\n                        DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n                        throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n                    }\n                }\n                if (config.safeMode && config.ensureOptimizations) {\n                    throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n                }\n                this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);\n                this.trackEndLines = /full/i.test(this.config.positionTracking);\n                // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n                if (isArray(lexerDefinition)) {\n                    actualDefinition = {\n                        modes: { defaultMode: clone(lexerDefinition) },\n                        defaultMode: DEFAULT_MODE,\n                    };\n                }\n                else {\n                    // no conversion needed, input should already be a IMultiModeLexerDefinition\n                    hasOnlySingleMode = false;\n                    actualDefinition = clone(lexerDefinition);\n                }\n            });\n            if (this.config.skipValidations === false) {\n                this.TRACE_INIT(\"performRuntimeChecks\", () => {\n                    this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(performRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n                });\n                this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n                    this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(performWarningRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n                });\n            }\n            // for extra robustness to avoid throwing an none informative error message\n            actualDefinition.modes = actualDefinition.modes\n                ? actualDefinition.modes\n                : {};\n            // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n            // this transformation is to increase robustness in the case of partially invalid lexer definition.\n            forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n                actualDefinition.modes[currModeName] = reject(currModeValue, (currTokType) => isUndefined(currTokType));\n            });\n            const allModeNames = keys(actualDefinition.modes);\n            forEach(actualDefinition.modes, (currModDef, currModName) => {\n                this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n                    this.modes.push(currModName);\n                    if (this.config.skipValidations === false) {\n                        this.TRACE_INIT(`validatePatterns`, () => {\n                            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(validatePatterns(currModDef, allModeNames));\n                        });\n                    }\n                    // If definition errors were encountered, the analysis phase may fail unexpectedly/\n                    // Considering a lexer with definition errors may never be used, there is no point\n                    // to performing the analysis anyhow...\n                    if (isEmpty(this.lexerDefinitionErrors)) {\n                        augmentTokenTypes(currModDef);\n                        let currAnalyzeResult;\n                        this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                            currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                                lineTerminatorCharacters: this.config.lineTerminatorCharacters,\n                                positionTracking: config.positionTracking,\n                                ensureOptimizations: config.ensureOptimizations,\n                                safeMode: config.safeMode,\n                                tracer: this.TRACE_INIT,\n                            });\n                        });\n                        this.patternIdxToConfig[currModName] =\n                            currAnalyzeResult.patternIdxToConfig;\n                        this.charCodeToPatternIdxToConfig[currModName] =\n                            currAnalyzeResult.charCodeToPatternIdxToConfig;\n                        this.emptyGroups = assign({}, this.emptyGroups, currAnalyzeResult.emptyGroups);\n                        this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n                        this.canModeBeOptimized[currModName] =\n                            currAnalyzeResult.canBeOptimized;\n                    }\n                });\n            });\n            this.defaultMode = actualDefinition.defaultMode;\n            if (!isEmpty(this.lexerDefinitionErrors) &&\n                !this.config.deferDefinitionErrorsHandling) {\n                const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n                    return error.message;\n                });\n                const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n                throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n            }\n            // Only print warning if there are no errors, This will avoid pl\n            forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n                PRINT_WARNING(warningDescriptor.message);\n            });\n            this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n                // Choose the relevant internal implementations for this specific parser.\n                // These implementations should be in-lined by the JavaScript engine\n                // to provide optimal performance in each scenario.\n                if (SUPPORT_STICKY) {\n                    this.chopInput = identity;\n                    this.match = this.matchWithTest;\n                }\n                else {\n                    this.updateLastIndex = noop;\n                    this.match = this.matchWithExec;\n                }\n                if (hasOnlySingleMode) {\n                    this.handleModes = noop;\n                }\n                if (this.trackStartLines === false) {\n                    this.computeNewColumn = identity;\n                }\n                if (this.trackEndLines === false) {\n                    this.updateTokenEndLineColumnLocation = noop;\n                }\n                if (/full/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createFullToken;\n                }\n                else if (/onlyStart/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createStartOnlyToken;\n                }\n                else if (/onlyOffset/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createOffsetOnlyToken;\n                }\n                else {\n                    throw Error(`Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`);\n                }\n                if (this.hasCustom) {\n                    this.addToken = this.addTokenUsingPush;\n                    this.handlePayload = this.handlePayloadWithCustom;\n                }\n                else {\n                    this.addToken = this.addTokenUsingMemberAccess;\n                    this.handlePayload = this.handlePayloadNoCustom;\n                }\n            });\n            this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n                const unOptimizedModes = reduce(this.canModeBeOptimized, (cannotBeOptimized, canBeOptimized, modeName) => {\n                    if (canBeOptimized === false) {\n                        cannotBeOptimized.push(modeName);\n                    }\n                    return cannotBeOptimized;\n                }, []);\n                if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n                    throw Error(`Lexer Modes: < ${unOptimizedModes.join(\", \")} > cannot be optimized.\\n` +\n                        '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n                        \"\\t Or inspect the console log for details on how to resolve these issues.\");\n                }\n            });\n            this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n                clearRegExpParserCache();\n            });\n            this.TRACE_INIT(\"toFastProperties\", () => {\n                toFastProperties(this);\n            });\n        });\n    }\n    tokenize(text, initialMode = this.defaultMode) {\n        if (!isEmpty(this.lexerDefinitionErrors)) {\n            const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n                return error.message;\n            });\n            const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n            throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n                allErrMessagesString);\n        }\n        return this.tokenizeInternal(text, initialMode);\n    }\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    // this method also used quite a bit of `!` none null assertions because it is too optimized\n    // for `tsc` to always understand it is \"safe\"\n    tokenizeInternal(text, initialMode) {\n        let i, j, k, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n        const orgText = text;\n        const orgLength = orgText.length;\n        let offset = 0;\n        let matchedTokensIndex = 0;\n        // initializing the tokensArray to the \"guessed\" size.\n        // guessing too little will still reduce the number of array re-sizes on pushes.\n        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n        // but would still have a faster runtime by avoiding (All but one) array resizing.\n        const guessedNumberOfTokens = this.hasCustom\n            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n            : Math.floor(text.length / 10);\n        const matchedTokens = new Array(guessedNumberOfTokens);\n        const errors = [];\n        let line = this.trackStartLines ? 1 : undefined;\n        let column = this.trackStartLines ? 1 : undefined;\n        const groups = cloneEmptyGroups(this.emptyGroups);\n        const trackLines = this.trackStartLines;\n        const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n        let currModePatternsLength = 0;\n        let patternIdxToConfig = [];\n        let currCharCodeToPatternIdxToConfig = [];\n        const modeStack = [];\n        const emptyArray = [];\n        Object.freeze(emptyArray);\n        let getPossiblePatterns;\n        function getPossiblePatternsSlow() {\n            return patternIdxToConfig;\n        }\n        function getPossiblePatternsOptimized(charCode) {\n            const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n            const possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n            if (possiblePatterns === undefined) {\n                return emptyArray;\n            }\n            else {\n                return possiblePatterns;\n            }\n        }\n        const pop_mode = (popToken) => {\n            // TODO: perhaps avoid this error in the edge case there is no more input?\n            if (modeStack.length === 1 &&\n                // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n                // So no error should occur.\n                popToken.tokenType.PUSH_MODE === undefined) {\n                // if we try to pop the last mode there lexer will no longer have ANY mode.\n                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n                const msg = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n                errors.push({\n                    offset: popToken.startOffset,\n                    line: popToken.startLine,\n                    column: popToken.startColumn,\n                    length: popToken.image.length,\n                    message: msg,\n                });\n            }\n            else {\n                modeStack.pop();\n                const newMode = last(modeStack);\n                patternIdxToConfig = this.patternIdxToConfig[newMode];\n                currCharCodeToPatternIdxToConfig =\n                    this.charCodeToPatternIdxToConfig[newMode];\n                currModePatternsLength = patternIdxToConfig.length;\n                const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                    getPossiblePatterns = getPossiblePatternsOptimized;\n                }\n                else {\n                    getPossiblePatterns = getPossiblePatternsSlow;\n                }\n            }\n        };\n        function push_mode(newMode) {\n            modeStack.push(newMode);\n            currCharCodeToPatternIdxToConfig =\n                this.charCodeToPatternIdxToConfig[newMode];\n            patternIdxToConfig = this.patternIdxToConfig[newMode];\n            currModePatternsLength = patternIdxToConfig.length;\n            currModePatternsLength = patternIdxToConfig.length;\n            const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                getPossiblePatterns = getPossiblePatternsOptimized;\n            }\n            else {\n                getPossiblePatterns = getPossiblePatternsSlow;\n            }\n        }\n        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n        // seem to matter performance wise.\n        push_mode.call(this, initialMode);\n        let currConfig;\n        const recoveryEnabled = this.config.recoveryEnabled;\n        while (offset < orgLength) {\n            matchedImage = null;\n            const nextCharCode = orgText.charCodeAt(offset);\n            const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n            const chosenPatternsLength = chosenPatternIdxToConfig.length;\n            for (i = 0; i < chosenPatternsLength; i++) {\n                currConfig = chosenPatternIdxToConfig[i];\n                const currPattern = currConfig.pattern;\n                payload = null;\n                // manually in-lined because > 600 chars won't be in-lined in V8\n                const singleCharCode = currConfig.short;\n                if (singleCharCode !== false) {\n                    if (nextCharCode === singleCharCode) {\n                        // single character string\n                        matchedImage = currPattern;\n                    }\n                }\n                else if (currConfig.isCustom === true) {\n                    match = currPattern.exec(orgText, offset, matchedTokens, groups);\n                    if (match !== null) {\n                        matchedImage = match[0];\n                        if (match.payload !== undefined) {\n                            payload = match.payload;\n                        }\n                    }\n                    else {\n                        matchedImage = null;\n                    }\n                }\n                else {\n                    this.updateLastIndex(currPattern, offset);\n                    matchedImage = this.match(currPattern, text, offset);\n                }\n                if (matchedImage !== null) {\n                    // even though this pattern matched we must try a another longer alternative.\n                    // this can be used to prioritize keywords over identifiers\n                    longerAlt = currConfig.longerAlt;\n                    if (longerAlt !== undefined) {\n                        // TODO: micro optimize, avoid extra prop access\n                        // by saving/linking longerAlt on the original config?\n                        const longerAltLength = longerAlt.length;\n                        for (k = 0; k < longerAltLength; k++) {\n                            const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n                            const longerAltPattern = longerAltConfig.pattern;\n                            altPayload = null;\n                            // single Char can never be a longer alt so no need to test it.\n                            // manually in-lined because > 600 chars won't be in-lined in V8\n                            if (longerAltConfig.isCustom === true) {\n                                match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n                                if (match !== null) {\n                                    matchAltImage = match[0];\n                                    if (match.payload !== undefined) {\n                                        altPayload = match.payload;\n                                    }\n                                }\n                                else {\n                                    matchAltImage = null;\n                                }\n                            }\n                            else {\n                                this.updateLastIndex(longerAltPattern, offset);\n                                matchAltImage = this.match(longerAltPattern, text, offset);\n                            }\n                            if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                                matchedImage = matchAltImage;\n                                payload = altPayload;\n                                currConfig = longerAltConfig;\n                                // Exit the loop early after matching one of the longer alternatives\n                                // The first matched alternative takes precedence\n                                break;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            // successful match\n            if (matchedImage !== null) {\n                imageLength = matchedImage.length;\n                group = currConfig.group;\n                if (group !== undefined) {\n                    tokType = currConfig.tokenTypeIdx;\n                    // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n                    // createFullToken method\n                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n                    this.handlePayload(newToken, payload);\n                    // TODO: optimize NOOP in case there are no special groups?\n                    if (group === false) {\n                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n                    }\n                    else {\n                        groups[group].push(newToken);\n                    }\n                }\n                text = this.chopInput(text, imageLength);\n                offset = offset + imageLength;\n                // TODO: with newlines the column may be assigned twice\n                column = this.computeNewColumn(column, imageLength);\n                if (trackLines === true && currConfig.canLineTerminator === true) {\n                    let numOfLTsInMatch = 0;\n                    let foundTerminator;\n                    let lastLTEndOffset;\n                    lineTerminatorPattern.lastIndex = 0;\n                    do {\n                        foundTerminator = lineTerminatorPattern.test(matchedImage);\n                        if (foundTerminator === true) {\n                            lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n                            numOfLTsInMatch++;\n                        }\n                    } while (foundTerminator === true);\n                    if (numOfLTsInMatch !== 0) {\n                        line = line + numOfLTsInMatch;\n                        column = imageLength - lastLTEndOffset;\n                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n                    }\n                }\n                // will be NOOP if no modes present\n                this.handleModes(currConfig, pop_mode, push_mode, newToken);\n            }\n            else {\n                // error recovery, drop characters until we identify a valid token's start point\n                const errorStartOffset = offset;\n                const errorLine = line;\n                const errorColumn = column;\n                let foundResyncPoint = recoveryEnabled === false;\n                while (foundResyncPoint === false && offset < orgLength) {\n                    // Identity Func (when sticky flag is enabled)\n                    text = this.chopInput(text, 1);\n                    offset++;\n                    for (j = 0; j < currModePatternsLength; j++) {\n                        const currConfig = patternIdxToConfig[j];\n                        const currPattern = currConfig.pattern;\n                        // manually in-lined because > 600 chars won't be in-lined in V8\n                        const singleCharCode = currConfig.short;\n                        if (singleCharCode !== false) {\n                            if (orgText.charCodeAt(offset) === singleCharCode) {\n                                // single character string\n                                foundResyncPoint = true;\n                            }\n                        }\n                        else if (currConfig.isCustom === true) {\n                            foundResyncPoint =\n                                currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n                        }\n                        else {\n                            this.updateLastIndex(currPattern, offset);\n                            foundResyncPoint = currPattern.exec(text) !== null;\n                        }\n                        if (foundResyncPoint === true) {\n                            break;\n                        }\n                    }\n                }\n                errLength = offset - errorStartOffset;\n                column = this.computeNewColumn(column, errLength);\n                // at this point we either re-synced or reached the end of the input text\n                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n                errors.push({\n                    offset: errorStartOffset,\n                    line: errorLine,\n                    column: errorColumn,\n                    length: errLength,\n                    message: msg,\n                });\n                if (recoveryEnabled === false) {\n                    break;\n                }\n            }\n        }\n        // if we do have custom patterns which push directly into the\n        // TODO: custom tokens should not push directly??\n        if (!this.hasCustom) {\n            // if we guessed a too large size for the tokens array this will shrink it to the right size.\n            matchedTokens.length = matchedTokensIndex;\n        }\n        return {\n            tokens: matchedTokens,\n            groups: groups,\n            errors: errors,\n        };\n    }\n    handleModes(config, pop_mode, push_mode, newToken) {\n        if (config.pop === true) {\n            // need to save the PUSH_MODE property as if the mode is popped\n            // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n            const pushMode = config.push;\n            pop_mode(newToken);\n            if (pushMode !== undefined) {\n                push_mode.call(this, pushMode);\n            }\n        }\n        else if (config.push !== undefined) {\n            push_mode.call(this, config.push);\n        }\n    }\n    chopInput(text, length) {\n        return text.substring(length);\n    }\n    updateLastIndex(regExp, newLastIndex) {\n        regExp.lastIndex = newLastIndex;\n    }\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    updateTokenEndLineColumnLocation(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n        let lastCharIsLT, fixForEndingInLT;\n        if (group !== undefined) {\n            // a none skipped multi line Token, need to update endLine/endColumn\n            lastCharIsLT = lastLTIdx === imageLength - 1;\n            fixForEndingInLT = lastCharIsLT ? -1 : 0;\n            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n                // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n                newToken.endLine = line + fixForEndingInLT;\n                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n                // inclusive to exclusive range.\n                newToken.endColumn = column - 1 + -fixForEndingInLT;\n            }\n            // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n        }\n    }\n    computeNewColumn(oldColumn, imageLength) {\n        return oldColumn + imageLength;\n    }\n    createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n        return {\n            image,\n            startOffset,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    createStartOnlyToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n        return {\n            image,\n            startOffset,\n            startLine,\n            startColumn,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    createFullToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n        return {\n            image,\n            startOffset,\n            endOffset: startOffset + imageLength - 1,\n            startLine,\n            endLine: startLine,\n            startColumn,\n            endColumn: startColumn + imageLength - 1,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    addTokenUsingPush(tokenVector, index, tokenToAdd) {\n        tokenVector.push(tokenToAdd);\n        return index;\n    }\n    addTokenUsingMemberAccess(tokenVector, index, tokenToAdd) {\n        tokenVector[index] = tokenToAdd;\n        index++;\n        return index;\n    }\n    handlePayloadNoCustom(token, payload) { }\n    handlePayloadWithCustom(token, payload) {\n        if (payload !== null) {\n            token.payload = payload;\n        }\n    }\n    matchWithTest(pattern, text, offset) {\n        const found = pattern.test(text);\n        if (found === true) {\n            return text.substring(offset, pattern.lastIndex);\n        }\n        return null;\n    }\n    matchWithExec(pattern, text) {\n        const regExpArray = pattern.exec(text);\n        return regExpArray !== null ? regExpArray[0] : null;\n    }\n}\nLexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\nLexer.NA = /NOT_APPLICABLE/;\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nexport function tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n        return tokType.LABEL;\n    }\n    else {\n        return tokType.name;\n    }\n}\nexport function tokenName(tokType) {\n    return tokType.name;\n}\nexport function hasTokenLabel(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\nexport function createToken(config) {\n    return createTokenInternal(config);\n}\nfunction createTokenInternal(config) {\n    const pattern = config.pattern;\n    const tokenType = {};\n    tokenType.name = config.name;\n    if (!isUndefined(pattern)) {\n        tokenType.PATTERN = pattern;\n    }\n    if (has(config, PARENT)) {\n        throw (\"The parent property is no longer supported.\\n\" +\n            \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\");\n    }\n    if (has(config, CATEGORIES)) {\n        // casting to ANY as this will be fixed inside `augmentTokenTypes``\n        tokenType.CATEGORIES = config[CATEGORIES];\n    }\n    augmentTokenTypes([tokenType]);\n    if (has(config, LABEL)) {\n        tokenType.LABEL = config[LABEL];\n    }\n    if (has(config, GROUP)) {\n        tokenType.GROUP = config[GROUP];\n    }\n    if (has(config, POP_MODE)) {\n        tokenType.POP_MODE = config[POP_MODE];\n    }\n    if (has(config, PUSH_MODE)) {\n        tokenType.PUSH_MODE = config[PUSH_MODE];\n    }\n    if (has(config, LONGER_ALT)) {\n        tokenType.LONGER_ALT = config[LONGER_ALT];\n    }\n    if (has(config, LINE_BREAKS)) {\n        tokenType.LINE_BREAKS = config[LINE_BREAKS];\n    }\n    if (has(config, START_CHARS_HINT)) {\n        tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n    }\n    return tokenType;\n}\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\nexport function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n        image,\n        startOffset,\n        endOffset,\n        startLine,\n        endLine,\n        startColumn,\n        endColumn,\n        tokenTypeIdx: tokType.tokenTypeIdx,\n        tokenType: tokType,\n    };\n}\nexport function tokenMatcher(token, tokType) {\n    return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport { getProductionDslName, NonTerminal, Rule, Terminal, } from \"@chevrotain/gast\";\nexport const defaultParserErrorProvider = {\n    buildMismatchTokenMessage({ expected, actual, previous, ruleName }) {\n        const hasLabel = hasTokenLabel(expected);\n        const expectedMsg = hasLabel\n            ? `--> ${tokenLabel(expected)} <--`\n            : `token of type --> ${expected.name} <--`;\n        const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n        return msg;\n    },\n    buildNotAllInputParsedMessage({ firstRedundant, ruleName }) {\n        return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n    },\n    buildNoViableAltMessage({ expectedPathsPerAlt, actual, previous, customUserDescription, ruleName, }) {\n        const errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        const actualText = first(actual).image;\n        const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        }\n        else {\n            const allLookAheadPaths = reduce(expectedPathsPerAlt, (result, currAltPaths) => result.concat(currAltPaths), []);\n            const nextValidTokenSequences = map(allLookAheadPaths, (currPath) => `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\", \")}]`);\n            const nextValidSequenceItems = map(nextValidTokenSequences, (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`);\n            const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\"\\n\")}`;\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    },\n    buildEarlyExitMessage({ expectedIterationPaths, actual, customUserDescription, ruleName, }) {\n        const errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        const actualText = first(actual).image;\n        const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        }\n        else {\n            const nextValidTokenSequences = map(expectedIterationPaths, (currPath) => `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\",\")}]`);\n            const calculatedDescription = `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n                `<${nextValidTokenSequences.join(\" ,\")}>`;\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    },\n};\nObject.freeze(defaultParserErrorProvider);\nexport const defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError(topLevelRule, undefinedRule) {\n        const msg = \"Invalid grammar, reference to a rule which is not defined: ->\" +\n            undefinedRule.nonTerminalName +\n            \"<-\\n\" +\n            \"inside top level rule: ->\" +\n            topLevelRule.name +\n            \"<-\";\n        return msg;\n    },\n};\nexport const defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError(topLevelRule, duplicateProds) {\n        function getExtraProductionArgument(prod) {\n            if (prod instanceof Terminal) {\n                return prod.terminalType.name;\n            }\n            else if (prod instanceof NonTerminal) {\n                return prod.nonTerminalName;\n            }\n            else {\n                return \"\";\n            }\n        }\n        const topLevelName = topLevelRule.name;\n        const duplicateProd = first(duplicateProds);\n        const index = duplicateProd.idx;\n        const dslName = getProductionDslName(duplicateProd);\n        const extraArgument = getExtraProductionArgument(duplicateProd);\n        const hasExplicitIndex = index > 0;\n        let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${extraArgument ? `with argument: ->${extraArgument}<-` : \"\"}\n                  appears more than once (${duplicateProds.length} times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n        // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n        msg = msg.replace(/[ \\t]+/g, \" \");\n        msg = msg.replace(/\\s\\s+/g, \"\\n\");\n        return msg;\n    },\n    buildNamespaceConflictError(rule) {\n        const errMsg = `Namespace conflict found in grammar.\\n` +\n            `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n            `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n            `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n            `and Non-Terminal names start with a lower case letter.`;\n        return errMsg;\n    },\n    buildAlternationPrefixAmbiguityError(options) {\n        const pathMsg = map(options.prefixPath, (currTok) => tokenLabel(currTok)).join(\", \");\n        const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        const errMsg = `Ambiguous alternatives: <${options.ambiguityIndices.join(\" ,\")}> due to common lookahead prefix\\n` +\n            `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n            `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n            `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n            `For Further details.`;\n        return errMsg;\n    },\n    buildAlternationAmbiguityError(options) {\n        const pathMsg = map(options.prefixPath, (currtok) => tokenLabel(currtok)).join(\", \");\n        const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        let currMessage = `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\" ,\")}> in <OR${occurrence}>` +\n            ` inside <${options.topLevelRule.name}> Rule,\\n` +\n            `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n        currMessage =\n            currMessage +\n                `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n                `For Further details.`;\n        return currMessage;\n    },\n    buildEmptyRepetitionError(options) {\n        let dslName = getProductionDslName(options.repetition);\n        if (options.repetition.idx !== 0) {\n            dslName += options.repetition.idx;\n        }\n        const errMsg = `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n            `This could lead to an infinite loop.`;\n        return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options) {\n        /* istanbul ignore next */\n        return \"deprecated\";\n    },\n    buildEmptyAlternationError(options) {\n        const errMsg = `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n            ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n            `Only the last alternative may be an empty alternative.`;\n        return errMsg;\n    },\n    buildTooManyAlternativesError(options) {\n        const errMsg = `An Alternation cannot have more than 256 alternatives:\\n` +\n            `<OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n has ${options.alternation.definition.length + 1} alternatives.`;\n        return errMsg;\n    },\n    buildLeftRecursionError(options) {\n        const ruleName = options.topLevelRule.name;\n        const pathNames = map(options.leftRecursionPath, (currRule) => currRule.name);\n        const leftRecursivePath = `${ruleName} --> ${pathNames\n            .concat([ruleName])\n            .join(\" --> \")}`;\n        const errMsg = `Left Recursion found in grammar.\\n` +\n            `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n            `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n            ` To fix this refactor your grammar to remove the left recursion.\\n` +\n            `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n        return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options) {\n        /* istanbul ignore next */\n        return \"deprecated\";\n    },\n    buildDuplicateRuleNameError(options) {\n        let ruleName;\n        if (options.topLevelRule instanceof Rule) {\n            ruleName = options.topLevelRule.name;\n        }\n        else {\n            ruleName = options.topLevelRule;\n        }\n        const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n        return errMsg;\n    },\n};\n","import { ParserDefinitionErrorType, } from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor } from \"@chevrotain/gast\";\nexport function resolveGrammar(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n    refResolver.resolveRefs();\n    return refResolver.errors;\n}\nexport class GastRefResolverVisitor extends GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider) {\n        super();\n        this.nameToTopRule = nameToTopRule;\n        this.errMsgProvider = errMsgProvider;\n        this.errors = [];\n    }\n    resolveRefs() {\n        forEach(values(this.nameToTopRule), (prod) => {\n            this.currTopLevel = prod;\n            prod.accept(this);\n        });\n    }\n    visitNonTerminal(node) {\n        const ref = this.nameToTopRule[node.nonTerminalName];\n        if (!ref) {\n            const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n            this.errors.push({\n                message: msg,\n                type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n                ruleName: this.currTopLevel.name,\n                unresolvedRefName: node.nonTerminalName,\n            });\n        }\n        else {\n            node.referencedRule = ref;\n        }\n    }\n}\n","import { clone, drop, dropRight, first as _first, forEach, isEmpty, last, } from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"@chevrotain/gast\";\nexport class AbstractNextPossibleTokensWalker extends RestWalker {\n    constructor(topProd, path) {\n        super();\n        this.topProd = topProd;\n        this.path = path;\n        this.possibleTokTypes = [];\n        this.nextProductionName = \"\";\n        this.nextProductionOccurrence = 0;\n        this.found = false;\n        this.isAtEndOfPath = false;\n    }\n    startWalking() {\n        this.found = false;\n        if (this.path.ruleStack[0] !== this.topProd.name) {\n            throw Error(\"The path does not start with the walker's top Rule!\");\n        }\n        // immutable for the win\n        this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n        this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n        // already verified that the first production is valid, we now seek the 2nd production\n        this.ruleStack.pop();\n        this.occurrenceStack.pop();\n        this.updateExpectedNext();\n        this.walk(this.topProd);\n        return this.possibleTokTypes;\n    }\n    walk(prod, prevRest = []) {\n        // stop scanning once we found the path\n        if (!this.found) {\n            super.walk(prod, prevRest);\n        }\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n        // found the next production, need to keep walking in it\n        if (refProd.referencedRule.name === this.nextProductionName &&\n            refProd.idx === this.nextProductionOccurrence) {\n            const fullRest = currRest.concat(prevRest);\n            this.updateExpectedNext();\n            this.walk(refProd.referencedRule, fullRest);\n        }\n    }\n    updateExpectedNext() {\n        // need to consume the Terminal\n        if (isEmpty(this.ruleStack)) {\n            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n            // really seeking is the last Terminal...\n            this.nextProductionName = \"\";\n            this.nextProductionOccurrence = 0;\n            this.isAtEndOfPath = true;\n        }\n        else {\n            this.nextProductionName = this.ruleStack.pop();\n            this.nextProductionOccurrence = this.occurrenceStack.pop();\n        }\n    }\n}\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n    constructor(topProd, path) {\n        super(topProd, path);\n        this.path = path;\n        this.nextTerminalName = \"\";\n        this.nextTerminalOccurrence = 0;\n        this.nextTerminalName = this.path.lastTok.name;\n        this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n        if (this.isAtEndOfPath &&\n            terminal.terminalType.name === this.nextTerminalName &&\n            terminal.idx === this.nextTerminalOccurrence &&\n            !this.found) {\n            const fullRest = currRest.concat(prevRest);\n            const restProd = new Alternative({ definition: fullRest });\n            this.possibleTokTypes = first(restProd);\n            this.found = true;\n        }\n    }\n}\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n    constructor(topRule, occurrence) {\n        super();\n        this.topRule = topRule;\n        this.occurrence = occurrence;\n        this.result = {\n            token: undefined,\n            occurrence: undefined,\n            isEndOfRule: undefined,\n        };\n    }\n    startWalking() {\n        this.walk(this.topRule);\n        return this.result;\n    }\n}\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkMany(manyProd, currRest, prevRest) {\n        if (manyProd.idx === this.occurrence) {\n            const firstAfterMany = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterMany === undefined;\n            if (firstAfterMany instanceof Terminal) {\n                this.result.token = firstAfterMany.terminalType;\n                this.result.occurrence = firstAfterMany.idx;\n            }\n        }\n        else {\n            super.walkMany(manyProd, currRest, prevRest);\n        }\n    }\n}\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (manySepProd.idx === this.occurrence) {\n            const firstAfterManySep = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterManySep === undefined;\n            if (firstAfterManySep instanceof Terminal) {\n                this.result.token = firstAfterManySep.terminalType;\n                this.result.occurrence = firstAfterManySep.idx;\n            }\n        }\n        else {\n            super.walkManySep(manySepProd, currRest, prevRest);\n        }\n    }\n}\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (atLeastOneProd.idx === this.occurrence) {\n            const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n            if (firstAfterAtLeastOne instanceof Terminal) {\n                this.result.token = firstAfterAtLeastOne.terminalType;\n                this.result.occurrence = firstAfterAtLeastOne.idx;\n            }\n        }\n        else {\n            super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n        }\n    }\n}\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest) {\n        if (atleastOneSepProd.idx === this.occurrence) {\n            const firstAfterfirstAfterAtLeastOneSep = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n            if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n                this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n            }\n        }\n        else {\n            super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n        }\n    }\n}\nexport function possiblePathsFrom(targetDef, maxLength, currPath = []) {\n    // avoid side effects\n    currPath = clone(currPath);\n    let result = [];\n    let i = 0;\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n        return nextDef.concat(drop(targetDef, i + 1));\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n        const alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n        return result.concat(alternatives);\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */\n    while (currPath.length < maxLength && i < targetDef.length) {\n        const prod = targetDef[i];\n        /* istanbul ignore else */\n        if (prod instanceof Alternative) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof NonTerminal) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof Option) {\n            result = getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof RepetitionMandatory) {\n            const newDef = prod.definition.concat([\n                new Repetition({\n                    definition: prod.definition,\n                }),\n            ]);\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof RepetitionMandatoryWithSeparator) {\n            const newDef = [\n                new Alternative({ definition: prod.definition }),\n                new Repetition({\n                    definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition),\n                }),\n            ];\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof RepetitionWithSeparator) {\n            const newDef = prod.definition.concat([\n                new Repetition({\n                    definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition),\n                }),\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof Repetition) {\n            const newDef = prod.definition.concat([\n                new Repetition({\n                    definition: prod.definition,\n                }),\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof Alternation) {\n            forEach(prod.definition, (currAlt) => {\n                // TODO: this is a limited check for empty alternatives\n                //   It would prevent a common case of infinite loops during parser initialization.\n                //   However **in-directly** empty alternatives may still cause issues.\n                if (isEmpty(currAlt.definition) === false) {\n                    result = getAlternativesForProd(currAlt.definition);\n                }\n            });\n            return result;\n        }\n        else if (prod instanceof Terminal) {\n            currPath.push(prod.terminalType);\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n        i++;\n    }\n    result.push({\n        partialPath: currPath,\n        suffixDef: drop(targetDef, i),\n    });\n    return result;\n}\nexport function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    const EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    // to avoid creating a new Array each time.\n    const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n    const EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    let foundCompletePath = false;\n    const tokenVectorLength = tokenVector.length;\n    const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    const result = [];\n    const possiblePaths = [];\n    possiblePaths.push({\n        idx: -1,\n        def: initialDef,\n        ruleStack: [],\n        occurrenceStack: [],\n    });\n    while (!isEmpty(possiblePaths)) {\n        const currPath = possiblePaths.pop();\n        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n        if (currPath === EXIT_ALTERNATIVE) {\n            if (foundCompletePath &&\n                last(possiblePaths).idx <= minimalAlternativesIndex) {\n                // remove irrelevant alternative\n                possiblePaths.pop();\n            }\n            continue;\n        }\n        const currDef = currPath.def;\n        const currIdx = currPath.idx;\n        const currRuleStack = currPath.ruleStack;\n        const currOccurrenceStack = currPath.occurrenceStack;\n        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n        if (isEmpty(currDef)) {\n            continue;\n        }\n        const prod = currDef[0];\n        /* istanbul ignore else */\n        if (prod === EXIT_NON_TERMINAL) {\n            const nextPath = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: dropRight(currRuleStack),\n                occurrenceStack: dropRight(currOccurrenceStack),\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof Terminal) {\n            /* istanbul ignore else */\n            if (currIdx < tokenVectorLength - 1) {\n                const nextIdx = currIdx + 1;\n                const actualToken = tokenVector[nextIdx];\n                if (tokMatcher(actualToken, prod.terminalType)) {\n                    const nextPath = {\n                        idx: nextIdx,\n                        def: drop(currDef),\n                        ruleStack: currRuleStack,\n                        occurrenceStack: currOccurrenceStack,\n                    };\n                    possiblePaths.push(nextPath);\n                }\n                // end of the line\n            }\n            else if (currIdx === tokenVectorLength - 1) {\n                // IGNORE ABOVE ELSE\n                result.push({\n                    nextTokenType: prod.terminalType,\n                    nextTokenOccurrence: prod.idx,\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack,\n                });\n                foundCompletePath = true;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        }\n        else if (prod instanceof NonTerminal) {\n            const newRuleStack = clone(currRuleStack);\n            newRuleStack.push(prod.nonTerminalName);\n            const newOccurrenceStack = clone(currOccurrenceStack);\n            newOccurrenceStack.push(prod.idx);\n            const nextPath = {\n                idx: currIdx,\n                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n                ruleStack: newRuleStack,\n                occurrenceStack: newOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof Option) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            const nextPathWith = {\n                idx: currIdx,\n                def: prod.definition.concat(drop(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof RepetitionMandatory) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            const secondIteration = new Repetition({\n                definition: prod.definition,\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n            const nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof RepetitionMandatoryWithSeparator) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            const separatorGast = new Terminal({\n                terminalType: prod.separator,\n            });\n            const secondIteration = new Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n            const nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof RepetitionWithSeparator) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            const separatorGast = new Terminal({\n                terminalType: prod.separator,\n            });\n            const nthRepetition = new Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n            const nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof Repetition) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n            const nthRepetition = new Repetition({\n                definition: prod.definition,\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n            const nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof Alternation) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            for (let i = prod.definition.length - 1; i >= 0; i--) {\n                const currAlt = prod.definition[i];\n                const currAltPath = {\n                    idx: currIdx,\n                    def: currAlt.definition.concat(drop(currDef)),\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack,\n                };\n                possiblePaths.push(currAltPath);\n                possiblePaths.push(EXIT_ALTERNATIVE);\n            }\n        }\n        else if (prod instanceof Alternative) {\n            possiblePaths.push({\n                idx: currIdx,\n                def: prod.definition.concat(drop(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            });\n        }\n        else if (prod instanceof Rule) {\n            // last because we should only encounter at most a single one of these per invocation.\n            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n    return result;\n}\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    const newRuleStack = clone(currRuleStack);\n    newRuleStack.push(topRule.name);\n    const newCurrOccurrenceStack = clone(currOccurrenceStack);\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1);\n    return {\n        idx: currIdx,\n        def: topRule.definition,\n        ruleStack: newRuleStack,\n        occurrenceStack: newCurrOccurrenceStack,\n    };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { tokenStructuredMatcher, tokenStructuredMatcherNoCategories, } from \"../../scan/tokens.js\";\nimport { Alternation, Alternative as AlternativeGAST, GAstVisitor, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, } from \"@chevrotain/gast\";\nexport var PROD_TYPE;\n(function (PROD_TYPE) {\n    PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE || (PROD_TYPE = {}));\nexport function getProdType(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof Option || prod === \"Option\") {\n        return PROD_TYPE.OPTION;\n    }\n    else if (prod instanceof Repetition || prod === \"Repetition\") {\n        return PROD_TYPE.REPETITION;\n    }\n    else if (prod instanceof RepetitionMandatory ||\n        prod === \"RepetitionMandatory\") {\n        return PROD_TYPE.REPETITION_MANDATORY;\n    }\n    else if (prod instanceof RepetitionMandatoryWithSeparator ||\n        prod === \"RepetitionMandatoryWithSeparator\") {\n        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    }\n    else if (prod instanceof RepetitionWithSeparator ||\n        prod === \"RepetitionWithSeparator\") {\n        return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    }\n    else if (prod instanceof Alternation || prod === \"Alternation\") {\n        return PROD_TYPE.ALTERNATION;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function getLookaheadPaths(options) {\n    const { occurrence, rule, prodType, maxLookahead } = options;\n    const type = getProdType(prodType);\n    if (type === PROD_TYPE.ALTERNATION) {\n        return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n    }\n    else {\n        return getLookaheadPathsForOptionalProd(occurrence, rule, type, maxLookahead);\n    }\n}\nexport function buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? tokenStructuredMatcherNoCategories\n        : tokenStructuredMatcher;\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? tokenStructuredMatcherNoCategories\n        : tokenStructuredMatcher;\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nexport function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    const numOfAlts = alts.length;\n    const areAllOneTokenLookahead = every(alts, (currAlt) => {\n        return every(currAlt, (currPath) => {\n            return currPath.length === 1;\n        });\n    });\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function (orAlts) {\n            // unfortunately the predicates must be extracted every single time\n            // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n            const predicates = map(orAlts, (currAlt) => currAlt.GATE);\n            for (let t = 0; t < numOfAlts; t++) {\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                const currPredicate = predicates[t];\n                if (currPredicate !== undefined && currPredicate.call(this) === false) {\n                    // if the predicate does not match there is no point in checking the paths\n                    continue;\n                }\n                nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for (let i = 0; i < currPathLength; i++) {\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        // optimized (common) case of all the lookaheads paths requiring only\n        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n        const singleTokenAlts = map(alts, (currAlt) => {\n            return flatten(currAlt);\n        });\n        const choiceToAlt = reduce(singleTokenAlts, (result, currAlt, idx) => {\n            forEach(currAlt, (currTokType) => {\n                if (!has(result, currTokType.tokenTypeIdx)) {\n                    result[currTokType.tokenTypeIdx] = idx;\n                }\n                forEach(currTokType.categoryMatches, (currExtendingType) => {\n                    if (!has(result, currExtendingType)) {\n                        result[currExtendingType] = idx;\n                    }\n                });\n            });\n            return result;\n        }, {});\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            const nextToken = this.LA(1);\n            return choiceToAlt[nextToken.tokenTypeIdx];\n        };\n    }\n    else {\n        // optimized lookahead without needing to check the predicates at all.\n        // this causes code duplication which is intentional to improve performance.\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            for (let t = 0; t < numOfAlts; t++) {\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for (let i = 0; i < currPathLength; i++) {\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n}\nexport function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = every(alt, (currPath) => {\n        return currPath.length === 1;\n    });\n    const numOfPaths = alt.length;\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        const singleTokensTypes = flatten(alt);\n        if (singleTokensTypes.length === 1 &&\n            isEmpty(singleTokensTypes[0].categoryMatches)) {\n            const expectedTokenType = singleTokensTypes[0];\n            const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n            return function () {\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n            };\n        }\n        else {\n            const choiceToAlt = reduce(singleTokensTypes, (result, currTokType, idx) => {\n                result[currTokType.tokenTypeIdx] = true;\n                forEach(currTokType.categoryMatches, (currExtendingType) => {\n                    result[currExtendingType] = true;\n                });\n                return result;\n            }, []);\n            return function () {\n                const nextToken = this.LA(1);\n                return choiceToAlt[nextToken.tokenTypeIdx] === true;\n            };\n        }\n    }\n    else {\n        return function () {\n            nextPath: for (let j = 0; j < numOfPaths; j++) {\n                const currPath = alt[j];\n                const currPathLength = currPath.length;\n                for (let i = 0; i < currPathLength; i++) {\n                    const nextToken = this.LA(i + 1);\n                    if (tokenMatcher(nextToken, currPath[i]) === false) {\n                        // mismatch in current path\n                        // try the next pth\n                        continue nextPath;\n                    }\n                }\n                // found a full path that matches.\n                return true;\n            }\n            // none of the paths matched\n            return false;\n        };\n    }\n}\nclass RestDefinitionFinderWalker extends RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType) {\n        super();\n        this.topProd = topProd;\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.restDef;\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdType) {\n            this.restDef = currRest.concat(prevRest);\n            return true;\n        }\n        // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n        return false;\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n            super.walkOption(optionProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n            super.walkOption(atLeastOneProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(atLeastOneSepProd, currRest, prevRest);\n        }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n            super.walkOption(manyProd, currRest, prevRest);\n        }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(manySepProd, currRest, prevRest);\n        }\n    }\n}\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef) {\n        super();\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n        this.targetRef = targetRef;\n        this.result = [];\n    }\n    checkIsTarget(node, expectedProdName) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdName &&\n            (this.targetRef === undefined || node === this.targetRef)) {\n            this.result = node.definition;\n        }\n    }\n    visitOption(node) {\n        this.checkIsTarget(node, PROD_TYPE.OPTION);\n    }\n    visitRepetition(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    }\n    visitRepetitionMandatory(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    }\n    visitRepetitionWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    }\n    visitAlternation(node) {\n        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    }\n}\nfunction initializeArrayOfArrays(size) {\n    const result = new Array(size);\n    for (let i = 0; i < size; i++) {\n        result[i] = [];\n    }\n    return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path) {\n    let keys = [\"\"];\n    for (let i = 0; i < path.length; i++) {\n        const tokType = path[i];\n        const longerKeys = [];\n        for (let j = 0; j < keys.length; j++) {\n            const currShorterKey = keys[j];\n            longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n            for (let t = 0; t < tokType.categoryMatches.length; t++) {\n                const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n                longerKeys.push(currShorterKey + categoriesKeySuffix);\n            }\n        }\n        keys = longerKeys;\n    }\n    return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n        // We only want to test vs the other alternatives\n        if (currAltIdx === idx) {\n            continue;\n        }\n        const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n        for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n            const searchKey = searchPathKeys[searchIdx];\n            if (otherAltKnownPathsKeys[searchKey] === true) {\n                return false;\n            }\n        }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true;\n}\nexport function lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = map(altsDefs, (currAlt) => possiblePathsFrom([currAlt], 1));\n    const finalResult = initializeArrayOfArrays(partialAlts.length);\n    const altsHashes = map(partialAlts, (currAltPaths) => {\n        const dict = {};\n        forEach(currAltPaths, (item) => {\n            const keys = pathToHashKeys(item.partialPath);\n            forEach(keys, (currKey) => {\n                dict[currKey] = true;\n            });\n        });\n        return dict;\n    });\n    let newData = partialAlts;\n    // maxLookahead loop\n    for (let pathLength = 1; pathLength <= k; pathLength++) {\n        const currDataset = newData;\n        newData = initializeArrayOfArrays(currDataset.length);\n        // alternatives loop\n        for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n            const currAltPathsAndSuffixes = currDataset[altIdx];\n            // paths in current alternative loop\n            for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n                const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n                const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n                const prefixKeys = pathToHashKeys(currPathPrefix);\n                const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n                // End of the line for this path.\n                if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n                    const currAltResult = finalResult[altIdx];\n                    // TODO: Can we implement a containsPath using Maps/Dictionaries?\n                    if (containsPath(currAltResult, currPathPrefix) === false) {\n                        currAltResult.push(currPathPrefix);\n                        // Update all new  keys for the current path.\n                        for (let j = 0; j < prefixKeys.length; j++) {\n                            const currKey = prefixKeys[j];\n                            altsHashes[altIdx][currKey] = true;\n                        }\n                    }\n                }\n                // Expand longer paths\n                else {\n                    const newPartialPathsAndSuffixes = possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix);\n                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n                    // Update keys for new known paths\n                    forEach(newPartialPathsAndSuffixes, (item) => {\n                        const prefixKeys = pathToHashKeys(item.partialPath);\n                        forEach(prefixKeys, (key) => {\n                            altsHashes[altIdx][key] = true;\n                        });\n                    });\n                }\n            }\n        }\n    }\n    return finalResult;\n}\nexport function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nexport function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    const insideDef = insideDefVisitor.result;\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    const afterDef = afterDefWalker.startWalking();\n    const insideFlat = new AlternativeGAST({ definition: insideDef });\n    const afterFlat = new AlternativeGAST({ definition: afterDef });\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\nexport function containsPath(alternative, searchPath) {\n    compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n        const otherPath = alternative[i];\n        if (otherPath.length !== searchPath.length) {\n            continue;\n        }\n        for (let j = 0; j < otherPath.length; j++) {\n            const searchTok = searchPath[j];\n            const otherTok = otherPath[j];\n            const matchingTokens = searchTok === otherTok ||\n                otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n            if (matchingTokens === false) {\n                continue compareOtherPath;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nexport function isStrictPrefixOfPath(prefix, other) {\n    return (prefix.length < other.length &&\n        every(prefix, (tokType, idx) => {\n            const otherTokType = other[idx];\n            return (tokType === otherTokType ||\n                otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]);\n        }));\n}\nexport function areTokenCategoriesNotUsed(lookAheadPaths) {\n    return every(lookAheadPaths, (singleAltPaths) => every(singleAltPaths, (singlePath) => every(singlePath, (token) => isEmpty(token.categoryMatches))));\n}\n","import { clone, compact, difference, drop, dropRight, filter, first, flatMap, flatten, forEach, groupBy, includes, isEmpty, map, pickBy, reduce, reject, values, } from \"lodash-es\";\nimport { ParserDefinitionErrorType, } from \"../parser/parser.js\";\nimport { Alternation, Alternative as AlternativeGAST, GAstVisitor, getProductionDslName, isOptionalProd, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal, } from \"@chevrotain/gast\";\nimport { containsPath, getLookaheadPathsForOptionalProd, getLookaheadPathsForOr, getProdType, isStrictPrefixOfPath, } from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\nexport function validateLookahead(options) {\n    const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n        rules: options.rules,\n        tokenTypes: options.tokenTypes,\n        grammarName: options.grammarName,\n    });\n    return map(lookaheadValidationErrorMessages, (errorMessage) => (Object.assign({ type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION }, errorMessage)));\n}\nexport function validateGrammar(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    const duplicateErrors = flatMap(topLevels, (currTopLevel) => validateDuplicateProductions(currTopLevel, errMsgProvider));\n    const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    const tooManyAltsErrors = flatMap(topLevels, (curRule) => validateTooManyAlts(curRule, errMsgProvider));\n    const duplicateRulesError = flatMap(topLevels, (curRule) => validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider));\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);\n}\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    const collectorVisitor = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    const productionGroups = groupBy(allRuleProductions, identifyProductionForDuplicates);\n    const duplicates = pickBy(productionGroups, (currGroup) => {\n        return currGroup.length > 1;\n    });\n    const errors = map(values(duplicates), (currDuplicates) => {\n        const firstProd = first(currDuplicates);\n        const msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n        const dslName = getProductionDslName(firstProd);\n        const defError = {\n            message: msg,\n            type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n            ruleName: topLevelRule.name,\n            dslName: dslName,\n            occurrence: firstProd.idx,\n        };\n        const param = getExtraProductionArgument(firstProd);\n        if (param) {\n            defError.parameter = param;\n        }\n        return defError;\n    });\n    return errors;\n}\nexport function identifyProductionForDuplicates(prod) {\n    return `${getProductionDslName(prod)}_#_${prod.idx}_#_${getExtraProductionArgument(prod)}`;\n}\nfunction getExtraProductionArgument(prod) {\n    if (prod instanceof Terminal) {\n        return prod.terminalType.name;\n    }\n    else if (prod instanceof NonTerminal) {\n        return prod.nonTerminalName;\n    }\n    else {\n        return \"\";\n    }\n}\nexport class OccurrenceValidationCollector extends GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.allProductions = [];\n    }\n    visitNonTerminal(subrule) {\n        this.allProductions.push(subrule);\n    }\n    visitOption(option) {\n        this.allProductions.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.allProductions.push(many);\n    }\n    visitAlternation(or) {\n        this.allProductions.push(or);\n    }\n    visitTerminal(terminal) {\n        this.allProductions.push(terminal);\n    }\n}\nexport function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    const errors = [];\n    const occurrences = reduce(allRules, (result, curRule) => {\n        if (curRule.name === rule.name) {\n            return result + 1;\n        }\n        return result;\n    }, 0);\n    if (occurrences > 1) {\n        const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n            topLevelRule: rule,\n            grammarName: className,\n        });\n        errors.push({\n            message: errMsg,\n            type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n            ruleName: rule.name,\n        });\n    }\n    return errors;\n}\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    const errors = [];\n    let errMsg;\n    if (!includes(definedRulesNames, ruleName)) {\n        errMsg =\n            `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n                `as it is not defined in any of the super grammars `;\n        errors.push({\n            message: errMsg,\n            type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n            ruleName: ruleName,\n        });\n    }\n    return errors;\n}\nexport function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path = []) {\n    const errors = [];\n    const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if (isEmpty(nextNonTerminals)) {\n        return [];\n    }\n    else {\n        const ruleName = topRule.name;\n        const foundLeftRecursion = includes(nextNonTerminals, topRule);\n        if (foundLeftRecursion) {\n            errors.push({\n                message: errMsgProvider.buildLeftRecursionError({\n                    topLevelRule: topRule,\n                    leftRecursionPath: path,\n                }),\n                type: ParserDefinitionErrorType.LEFT_RECURSION,\n                ruleName: ruleName,\n            });\n        }\n        // we are only looking for cyclic paths leading back to the specific topRule\n        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n        const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n        const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n            const newPath = clone(path);\n            newPath.push(currRefRule);\n            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n        });\n        return errors.concat(errorsFromNextSteps);\n    }\n}\nexport function getFirstNoneTerminal(definition) {\n    let result = [];\n    if (isEmpty(definition)) {\n        return result;\n    }\n    const firstProd = first(definition);\n    /* istanbul ignore else */\n    if (firstProd instanceof NonTerminal) {\n        result.push(firstProd.referencedRule);\n    }\n    else if (firstProd instanceof AlternativeGAST ||\n        firstProd instanceof Option ||\n        firstProd instanceof RepetitionMandatory ||\n        firstProd instanceof RepetitionMandatoryWithSeparator ||\n        firstProd instanceof RepetitionWithSeparator ||\n        firstProd instanceof Repetition) {\n        result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    }\n    else if (firstProd instanceof Alternation) {\n        // each sub definition in alternation is a FLAT\n        result = flatten(map(firstProd.definition, (currSubDef) => getFirstNoneTerminal(currSubDef.definition)));\n    }\n    else if (firstProd instanceof Terminal) {\n        // nothing to see, move along\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n    const isFirstOptional = isOptionalProd(firstProd);\n    const hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n        const rest = drop(definition);\n        return result.concat(getFirstNoneTerminal(rest));\n    }\n    else {\n        return result;\n    }\n}\nclass OrCollector extends GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.alternations = [];\n    }\n    visitAlternation(node) {\n        this.alternations.push(node);\n    }\n}\nexport function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = flatMap(ors, (currOr) => {\n        const exceptLast = dropRight(currOr.definition);\n        return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n            const possibleFirstInAlt = nextPossibleTokensAfter([currAlternative], [], tokenStructuredMatcher, 1);\n            if (isEmpty(possibleFirstInAlt)) {\n                return [\n                    {\n                        message: errMsgProvider.buildEmptyAlternationError({\n                            topLevelRule: topLevelRule,\n                            alternation: currOr,\n                            emptyChoiceIdx: currAltIdx,\n                        }),\n                        type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n                        ruleName: topLevelRule.name,\n                        occurrence: currOr.idx,\n                        alternative: currAltIdx + 1,\n                    },\n                ];\n            }\n            else {\n                return [];\n            }\n        });\n    });\n    return errors;\n}\nexport function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    let ors = orCollector.alternations;\n    // New Handling of ignoring ambiguities\n    // - https://github.com/chevrotain/chevrotain/issues/869\n    ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n    const errors = flatMap(ors, (currOr) => {\n        const currOccurrence = currOr.idx;\n        const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n        const alternatives = getLookaheadPathsForOr(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n        const altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n    });\n    return errors;\n}\nexport class RepetitionCollector extends GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.allProductions = [];\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.allProductions.push(many);\n    }\n}\nexport function validateTooManyAlts(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = flatMap(ors, (currOr) => {\n        if (currOr.definition.length > 255) {\n            return [\n                {\n                    message: errMsgProvider.buildTooManyAlternativesError({\n                        topLevelRule: topLevelRule,\n                        alternation: currOr,\n                    }),\n                    type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n                    ruleName: topLevelRule.name,\n                    occurrence: currOr.idx,\n                },\n            ];\n        }\n        else {\n            return [];\n        }\n    });\n    return errors;\n}\nexport function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    const errors = [];\n    forEach(topLevelRules, (currTopRule) => {\n        const collectorVisitor = new RepetitionCollector();\n        currTopRule.accept(collectorVisitor);\n        const allRuleProductions = collectorVisitor.allProductions;\n        forEach(allRuleProductions, (currProd) => {\n            const prodType = getProdType(currProd);\n            const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n            const currOccurrence = currProd.idx;\n            const paths = getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n            const pathsInsideProduction = paths[0];\n            if (isEmpty(flatten(pathsInsideProduction))) {\n                const errMsg = errMsgProvider.buildEmptyRepetitionError({\n                    topLevelRule: currTopRule,\n                    repetition: currProd,\n                });\n                errors.push({\n                    message: errMsg,\n                    type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n                    ruleName: currTopRule.name,\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const foundAmbiguousPaths = [];\n    const identicalAmbiguities = reduce(alternatives, (result, currAlt, currAltIdx) => {\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n            return result;\n        }\n        forEach(currAlt, (currPath) => {\n            const altsCurrPathAppearsIn = [currAltIdx];\n            forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n                if (currAltIdx !== currOtherAltIdx &&\n                    containsPath(currOtherAlt, currPath) &&\n                    // ignore (skip) ambiguities with this \"other\" alternative\n                    alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n                    altsCurrPathAppearsIn.push(currOtherAltIdx);\n                }\n            });\n            if (altsCurrPathAppearsIn.length > 1 &&\n                !containsPath(foundAmbiguousPaths, currPath)) {\n                foundAmbiguousPaths.push(currPath);\n                result.push({\n                    alts: altsCurrPathAppearsIn,\n                    path: currPath,\n                });\n            }\n        });\n        return result;\n    }, []);\n    const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n        const ambgIndices = map(currAmbDescriptor.alts, (currAltIdx) => currAltIdx + 1);\n        const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbDescriptor.path,\n        });\n        return {\n            message: currMessage,\n            type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n            ruleName: rule.name,\n            occurrence: alternation.idx,\n            alternatives: currAmbDescriptor.alts,\n        };\n    });\n    return currErrors;\n}\nexport function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    // flatten\n    const pathsAndIndices = reduce(alternatives, (result, currAlt, idx) => {\n        const currPathsAndIdx = map(currAlt, (currPath) => {\n            return { idx: idx, path: currPath };\n        });\n        return result.concat(currPathsAndIdx);\n    }, []);\n    const errors = compact(flatMap(pathsAndIndices, (currPathAndIdx) => {\n        const alternativeGast = alternation.definition[currPathAndIdx.idx];\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n            return [];\n        }\n        const targetIdx = currPathAndIdx.idx;\n        const targetPath = currPathAndIdx.path;\n        const prefixAmbiguitiesPathsAndIndices = filter(pathsAndIndices, (searchPathAndIdx) => {\n            // prefix ambiguity can only be created from lower idx (higher priority) path\n            return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n                true &&\n                searchPathAndIdx.idx < targetIdx &&\n                // checking for strict prefix because identical lookaheads\n                // will be be detected using a different validation.\n                isStrictPrefixOfPath(searchPathAndIdx.path, targetPath));\n        });\n        const currPathPrefixErrors = map(prefixAmbiguitiesPathsAndIndices, (currAmbPathAndIdx) => {\n            const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n            const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n            const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n                topLevelRule: rule,\n                alternation: alternation,\n                ambiguityIndices: ambgIndices,\n                prefixPath: currAmbPathAndIdx.path,\n            });\n            return {\n                message: message,\n                type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n                ruleName: rule.name,\n                occurrence: occurrence,\n                alternatives: ambgIndices,\n            };\n        });\n        return currPathPrefixErrors;\n    }));\n    return errors;\n}\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    const errors = [];\n    const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n    forEach(topLevels, (currRule) => {\n        const currRuleName = currRule.name;\n        if (includes(tokenNames, currRuleName)) {\n            const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n            errors.push({\n                message: errMsg,\n                type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n                ruleName: currRuleName,\n            });\n        }\n    });\n    return errors;\n}\n","import { includes } from \"lodash-es\";\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nconst RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nclass RecognitionException extends Error {\n    constructor(message, token) {\n        super(message);\n        this.token = token;\n        this.resyncedTokens = [];\n        // fix prototype chain when typescript target is ES5\n        Object.setPrototypeOf(this, new.target.prototype);\n        /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nexport class MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = MISMATCHED_TOKEN_EXCEPTION;\n    }\n}\nexport class NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = NO_VIABLE_ALT_EXCEPTION;\n    }\n}\nexport class NotAllInputParsedException extends RecognitionException {\n    constructor(message, token) {\n        super(message, token);\n        this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    }\n}\nexport class EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = EARLY_EXIT_EXCEPTION;\n    }\n}\n","import { createTokenInstance, EOF, tokenMatcher, } from \"../../../scan/tokens_public.js\";\nimport { clone, dropRight, find, flatten, has, includes, isEmpty, map, } from \"lodash-es\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nexport const EOF_FOLLOW_KEY = {};\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nexport class InRuleRecoveryException extends Error {\n    constructor(message) {\n        super(message);\n        this.name = IN_RULE_RECOVERY_EXCEPTION;\n    }\n}\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n    initRecoverable(config) {\n        this.firstAfterRepMap = {};\n        this.resyncFollows = {};\n        this.recoveryEnabled = has(config, \"recoveryEnabled\")\n            ? config.recoveryEnabled // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n        // performance optimization, NOOP will be inlined which\n        // effectively means that this optional feature does not exist\n        // when not used.\n        if (this.recoveryEnabled) {\n            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n        }\n    }\n    getTokenToInsert(tokType) {\n        const tokToInsert = createTokenInstance(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n        tokToInsert.isInsertedInRecovery = true;\n        return tokToInsert;\n    }\n    canTokenTypeBeInsertedInRecovery(tokType) {\n        return true;\n    }\n    canTokenTypeBeDeletedInRecovery(tokType) {\n        return true;\n    }\n    tryInRepetitionRecovery(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n        // TODO: can the resyncTokenType be cached?\n        const reSyncTokType = this.findReSyncTokenType();\n        const savedLexerState = this.exportLexerState();\n        const resyncedTokens = [];\n        let passedResyncPoint = false;\n        const nextTokenWithoutResync = this.LA(1);\n        let currToken = this.LA(1);\n        const generateErrorMessage = () => {\n            const previousToken = this.LA(0);\n            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n            // the error that would have been thrown\n            const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: expectedTokType,\n                actual: nextTokenWithoutResync,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName(),\n            });\n            const error = new MismatchedTokenException(msg, nextTokenWithoutResync, this.LA(0));\n            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n            error.resyncedTokens = dropRight(resyncedTokens);\n            this.SAVE_ERROR(error);\n        };\n        while (!passedResyncPoint) {\n            // re-synced to a point where we can safely exit the repetition/\n            if (this.tokenMatcher(currToken, expectedTokType)) {\n                generateErrorMessage();\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (lookAheadFunc.call(this)) {\n                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n                generateErrorMessage();\n                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n                grammarRule.apply(this, grammarRuleArgs);\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (this.tokenMatcher(currToken, reSyncTokType)) {\n                passedResyncPoint = true;\n            }\n            else {\n                currToken = this.SKIP_TOKEN();\n                this.addToResyncTokens(currToken, resyncedTokens);\n            }\n        }\n        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n        // \"between rules\" resync recovery later in the flow.\n        this.importLexerState(savedLexerState);\n    }\n    shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck) {\n        // Edge case of arriving from a MANY repetition which is stuck\n        // Attempting recovery in this case could cause an infinite loop\n        if (notStuck === false) {\n            return false;\n        }\n        // no need to recover, next token is what we expect...\n        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n            return false;\n        }\n        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n        // and prefer some backtracking path that includes recovered errors.\n        if (this.isBackTracking()) {\n            return false;\n        }\n        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n        //noinspection RedundantIfStatementJS\n        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n            return false;\n        }\n        return true;\n    }\n    // Error Recovery functionality\n    getFollowsForInRuleRecovery(tokType, tokIdxInRule) {\n        const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n        const follows = this.getNextPossibleTokenTypes(grammarPath);\n        return follows;\n    }\n    tryInRuleRecovery(expectedTokType, follows) {\n        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n            const tokToInsert = this.getTokenToInsert(expectedTokType);\n            return tokToInsert;\n        }\n        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n            const nextTok = this.SKIP_TOKEN();\n            this.consumeToken();\n            return nextTok;\n        }\n        throw new InRuleRecoveryException(\"sad sad panda\");\n    }\n    canPerformInRuleRecovery(expectedToken, follows) {\n        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n            this.canRecoverWithSingleTokenDeletion(expectedToken));\n    }\n    canRecoverWithSingleTokenInsertion(expectedTokType, follows) {\n        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n            return false;\n        }\n        // must know the possible following tokens to perform single token insertion\n        if (isEmpty(follows)) {\n            return false;\n        }\n        const mismatchedTok = this.LA(1);\n        const isMisMatchedTokInFollows = find(follows, (possibleFollowsTokType) => {\n            return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n        }) !== undefined;\n        return isMisMatchedTokInFollows;\n    }\n    canRecoverWithSingleTokenDeletion(expectedTokType) {\n        if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n            return false;\n        }\n        const isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n        return isNextTokenWhatIsExpected;\n    }\n    isInCurrentRuleReSyncSet(tokenTypeIdx) {\n        const followKey = this.getCurrFollowKey();\n        const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n        return includes(currentRuleReSyncSet, tokenTypeIdx);\n    }\n    findReSyncTokenType() {\n        const allPossibleReSyncTokTypes = this.flattenFollowSet();\n        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n        let nextToken = this.LA(1);\n        let k = 2;\n        while (true) {\n            const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n                const canMatch = tokenMatcher(nextToken, resyncTokType);\n                return canMatch;\n            });\n            if (foundMatch !== undefined) {\n                return foundMatch;\n            }\n            nextToken = this.LA(k);\n            k++;\n        }\n    }\n    getCurrFollowKey() {\n        // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n        if (this.RULE_STACK.length === 1) {\n            return EOF_FOLLOW_KEY;\n        }\n        const currRuleShortName = this.getLastExplicitRuleShortName();\n        const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n        const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n        return {\n            ruleName: this.shortRuleNameToFullName(currRuleShortName),\n            idxInCallingRule: currRuleIdx,\n            inRule: this.shortRuleNameToFullName(prevRuleShortName),\n        };\n    }\n    buildFullFollowKeyStack() {\n        const explicitRuleStack = this.RULE_STACK;\n        const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return map(explicitRuleStack, (ruleName, idx) => {\n            if (idx === 0) {\n                return EOF_FOLLOW_KEY;\n            }\n            return {\n                ruleName: this.shortRuleNameToFullName(ruleName),\n                idxInCallingRule: explicitOccurrenceStack[idx],\n                inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n            };\n        });\n    }\n    flattenFollowSet() {\n        const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n            return this.getFollowSetFromFollowKey(currKey);\n        });\n        return flatten(followStack);\n    }\n    getFollowSetFromFollowKey(followKey) {\n        if (followKey === EOF_FOLLOW_KEY) {\n            return [EOF];\n        }\n        const followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n        return this.resyncFollows[followName];\n    }\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    addToResyncTokens(token, resyncTokens) {\n        if (!this.tokenMatcher(token, EOF)) {\n            resyncTokens.push(token);\n        }\n        return resyncTokens;\n    }\n    reSyncTo(tokType) {\n        const resyncedTokens = [];\n        let nextTok = this.LA(1);\n        while (this.tokenMatcher(nextTok, tokType) === false) {\n            nextTok = this.SKIP_TOKEN();\n            this.addToResyncTokens(nextTok, resyncedTokens);\n        }\n        // the last token is not part of the error.\n        return dropRight(resyncedTokens);\n    }\n    attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n        // by default this is a NO-OP\n        // The actual implementation is with the function(not method) below\n    }\n    getCurrentGrammarPath(tokType, tokIdxInRule) {\n        const pathRuleStack = this.getHumanReadableRuleStack();\n        const pathOccurrenceStack = clone(this.RULE_OCCURRENCE_STACK);\n        const grammarPath = {\n            ruleStack: pathRuleStack,\n            occurrenceStack: pathOccurrenceStack,\n            lastTok: tokType,\n            lastTokOccurrence: tokIdxInRule,\n        };\n        return grammarPath;\n    }\n    getHumanReadableRuleStack() {\n        return map(this.RULE_STACK, (currShortName) => this.shortRuleNameToFullName(currShortName));\n    }\n}\nexport function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    let firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === undefined) {\n        const currRuleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[currRuleName];\n        const walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n        firstAfterRepInfo = walker.startWalking();\n        this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    let expectTokAfterLastMatch = firstAfterRepInfo.token;\n    let nextTokIdx = firstAfterRepInfo.occurrence;\n    const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 &&\n        isEndOfRule &&\n        expectTokAfterLastMatch === undefined) {\n        expectTokAfterLastMatch = EOF;\n        nextTokIdx = 1;\n    }\n    // We don't have anything to re-sync to...\n    // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n        return;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n        // TODO: performance optimization: instead of passing the original args here, we modify\n        // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n        // to avoid searching the cache for it once more.\n        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    return occurrence | dslMethodIdx | ruleIdx;\n}\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport { validateAmbiguousAlternationAlternatives, validateEmptyOrAlternative, validateNoLeftRecursion, validateSomeNonEmptyLookaheadPath, } from \"./checks.js\";\nimport { buildAlternativesLookAheadFunc, buildLookaheadFuncForOptionalProd, buildLookaheadFuncForOr, buildSingleAlternativeLookaheadFunction, getProdType, } from \"./lookahead.js\";\nexport class LLkLookaheadStrategy {\n    constructor(options) {\n        var _a;\n        this.maxLookahead =\n            (_a = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a !== void 0 ? _a : DEFAULT_PARSER_CONFIG.maxLookahead;\n    }\n    validate(options) {\n        const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n        if (isEmpty(leftRecursionErrors)) {\n            const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n            const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead);\n            const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead);\n            const allErrors = [\n                ...leftRecursionErrors,\n                ...emptyAltErrors,\n                ...ambiguousAltsErrors,\n                ...emptyRepetitionErrors,\n            ];\n            return allErrors;\n        }\n        return leftRecursionErrors;\n    }\n    validateNoLeftRecursion(rules) {\n        return flatMap(rules, (currTopRule) => validateNoLeftRecursion(currTopRule, currTopRule, defaultGrammarValidatorErrorProvider));\n    }\n    validateEmptyOrAlternatives(rules) {\n        return flatMap(rules, (currTopRule) => validateEmptyOrAlternative(currTopRule, defaultGrammarValidatorErrorProvider));\n    }\n    validateAmbiguousAlternationAlternatives(rules, maxLookahead) {\n        return flatMap(rules, (currTopRule) => validateAmbiguousAlternationAlternatives(currTopRule, maxLookahead, defaultGrammarValidatorErrorProvider));\n    }\n    validateSomeNonEmptyLookaheadPath(rules, maxLookahead) {\n        return validateSomeNonEmptyLookaheadPath(rules, maxLookahead, defaultGrammarValidatorErrorProvider);\n    }\n    buildLookaheadForAlternation(options) {\n        return buildLookaheadFuncForOr(options.prodOccurrence, options.rule, options.maxLookahead, options.hasPredicates, options.dynamicTokensEnabled, buildAlternativesLookAheadFunc);\n    }\n    buildLookaheadForOptional(options) {\n        return buildLookaheadFuncForOptionalProd(options.prodOccurrence, options.rule, options.maxLookahead, options.dynamicTokensEnabled, getProdType(options.prodType), buildSingleAlternativeLookaheadFunction);\n    }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport { AT_LEAST_ONE_IDX, AT_LEAST_ONE_SEP_IDX, getKeyForAutomaticLookahead, MANY_IDX, MANY_SEP_IDX, OPTION_IDX, OR_IDX, } from \"../../grammar/keys.js\";\nimport { GAstVisitor, getProductionDslName, } from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n    initLooksAhead(config) {\n        this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n            ? config.dynamicTokensEnabled // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n        this.maxLookahead = has(config, \"maxLookahead\")\n            ? config.maxLookahead // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.maxLookahead;\n        this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n            ? config.lookaheadStrategy // assumes end user provides the correct config value/type\n            : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n        this.lookAheadFuncsCache = new Map();\n    }\n    preComputeLookaheadFunctions(rules) {\n        forEach(rules, (currRule) => {\n            this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n                const { alternation, repetition, option, repetitionMandatory, repetitionMandatoryWithSeparator, repetitionWithSeparator, } = collectMethods(currRule);\n                forEach(alternation, (currProd) => {\n                    const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n                    this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n                        const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n                            prodOccurrence: currProd.idx,\n                            rule: currRule,\n                            maxLookahead: currProd.maxLookahead || this.maxLookahead,\n                            hasPredicates: currProd.hasPredicates,\n                            dynamicTokensEnabled: this.dynamicTokensEnabled,\n                        });\n                        const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[currRule.name], OR_IDX, currProd.idx);\n                        this.setLaFuncCache(key, laFunc);\n                    });\n                });\n                forEach(repetition, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, MANY_IDX, \"Repetition\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n                forEach(option, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, OPTION_IDX, \"Option\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n                forEach(repetitionMandatory, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, AT_LEAST_ONE_IDX, \"RepetitionMandatory\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n                forEach(repetitionMandatoryWithSeparator, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, AT_LEAST_ONE_SEP_IDX, \"RepetitionMandatoryWithSeparator\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n                forEach(repetitionWithSeparator, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, MANY_SEP_IDX, \"RepetitionWithSeparator\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n            });\n        });\n    }\n    computeLookaheadFunc(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n        this.TRACE_INIT(`${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n                prodOccurrence,\n                rule,\n                maxLookahead: prodMaxLookahead || this.maxLookahead,\n                dynamicTokensEnabled: this.dynamicTokensEnabled,\n                prodType,\n            });\n            const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\n            this.setLaFuncCache(key, laFunc);\n        });\n    }\n    // this actually returns a number, but it is always used as a string (object prop key)\n    getKeyForAutomaticLookahead(dslMethodIdx, occurrence) {\n        const currRuleShortName = this.getLastExplicitRuleShortName();\n        return getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence);\n    }\n    getLaFuncFromCache(key) {\n        return this.lookAheadFuncsCache.get(key);\n    }\n    /* istanbul ignore next */\n    setLaFuncCache(key, value) {\n        this.lookAheadFuncsCache.set(key, value);\n    }\n}\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: [],\n        };\n    }\n    reset() {\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: [],\n        };\n    }\n    visitOption(option) {\n        this.dslMethods.option.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.dslMethods.repetitionWithSeparator.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.dslMethods.repetitionMandatory.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.dslMethods.repetition.push(many);\n    }\n    visitAlternation(or) {\n        this.dslMethods.alternation.push(or);\n    }\n}\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule) {\n    collectorVisitor.reset();\n    rule.accept(collectorVisitor);\n    const dslMethods = collectorVisitor.dslMethods;\n    // avoid uncleaned references\n    collectorVisitor.reset();\n    return dslMethods;\n}\n","/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (both start/end offsets exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n    // Once the startOffset has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n}\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (all start/end props exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.startColumn = newLocationInfo.startColumn;\n        currNodeLocation.startLine = newLocationInfo.startLine;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n    // Once the start props has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n}\nexport function addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === undefined) {\n        node.children[tokenTypeName] = [token];\n    }\n    else {\n        node.children[tokenTypeName].push(token);\n    }\n}\nexport function addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === undefined) {\n        node.children[ruleName] = [ruleResult];\n    }\n    else {\n        node.children[ruleName].push(ruleResult);\n    }\n}\n","const NAME = \"name\";\nexport function defineNameProp(obj, nameValue) {\n    Object.defineProperty(obj, NAME, {\n        enumerable: false,\n        configurable: true,\n        writable: false,\n        value: nameValue,\n    });\n}\n","import { compact, filter, forEach, isArray, isEmpty, isFunction, isUndefined, keys, map, } from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nexport function defaultVisit(ctx, param) {\n    const childrenNames = keys(ctx);\n    const childrenNamesLength = childrenNames.length;\n    for (let i = 0; i < childrenNamesLength; i++) {\n        const currChildName = childrenNames[i];\n        const currChildArray = ctx[currChildName];\n        const currChildArrayLength = currChildArray.length;\n        for (let j = 0; j < currChildArrayLength; j++) {\n            const currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                this[currChild.name](currChild.children, param);\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n}\nexport function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    const derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n    const semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if (isArray(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if (isUndefined(cstNode)) {\n                return undefined;\n            }\n            return this[cstNode.name](cstNode.children, param);\n        },\n        validateVisitor: function () {\n            const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!isEmpty(semanticDefinitionErrors)) {\n                const errorMessages = map(semanticDefinitionErrors, (currDefError) => currDefError.msg);\n                throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n                    `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`);\n            }\n        },\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nexport function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    const derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    const withDefaultsProto = Object.create(baseConstructor.prototype);\n    forEach(ruleNames, (ruleName) => {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nexport var CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\nexport function validateVisitor(visitorInstance, ruleNames) {\n    const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    return missingErrors;\n}\nexport function validateMissingCstMethods(visitorInstance, ruleNames) {\n    const missingRuleNames = filter(ruleNames, (currRuleName) => {\n        return isFunction(visitorInstance[currRuleName]) === false;\n    });\n    const errors = map(missingRuleNames, (currRuleName) => {\n        return {\n            msg: `Missing visitor method: <${currRuleName}> on ${(visitorInstance.constructor.name)} CST Visitor.`,\n            type: CstVisitorDefinitionError.MISSING_METHOD,\n            methodName: currRuleName,\n        };\n    });\n    return compact(errors);\n}\n","import { forEach, has, isArray, isFunction, last as peek, some, } from \"lodash-es\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport { augmentTokenTypes, hasShortKeyProperty, } from \"../../../scan/tokens.js\";\nimport { createToken, createTokenInstance, } from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nconst RECORDING_NULL_OBJECT = {\n    description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\", \n// Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nconst RECORDING_PHASE_CSTNODE = {\n    name: \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n        \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n    children: {},\n};\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n    initGastRecorder(config) {\n        this.recordingProdStack = [];\n        this.RECORDING_PHASE = false;\n    }\n    enableRecording() {\n        this.RECORDING_PHASE = true;\n        this.TRACE_INIT(\"Enable Recording\", () => {\n            /**\n             * Warning Dark Voodoo Magic upcoming!\n             * We are \"replacing\" the public parsing DSL methods API\n             * With **new** alternative implementations on the Parser **instance**\n             *\n             * So far this is the only way I've found to avoid performance regressions during parsing time.\n             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n             *   implementations directly instead.\n             */\n            for (let i = 0; i < 10; i++) {\n                const idx = i > 0 ? i : \"\";\n                this[`CONSUME${idx}`] = function (arg1, arg2) {\n                    return this.consumeInternalRecord(arg1, i, arg2);\n                };\n                this[`SUBRULE${idx}`] = function (arg1, arg2) {\n                    return this.subruleInternalRecord(arg1, i, arg2);\n                };\n                this[`OPTION${idx}`] = function (arg1) {\n                    return this.optionInternalRecord(arg1, i);\n                };\n                this[`OR${idx}`] = function (arg1) {\n                    return this.orInternalRecord(arg1, i);\n                };\n                this[`MANY${idx}`] = function (arg1) {\n                    this.manyInternalRecord(i, arg1);\n                };\n                this[`MANY_SEP${idx}`] = function (arg1) {\n                    this.manySepFirstInternalRecord(i, arg1);\n                };\n                this[`AT_LEAST_ONE${idx}`] = function (arg1) {\n                    this.atLeastOneInternalRecord(i, arg1);\n                };\n                this[`AT_LEAST_ONE_SEP${idx}`] = function (arg1) {\n                    this.atLeastOneSepFirstInternalRecord(i, arg1);\n                };\n            }\n            // DSL methods with the idx(suffix) as an argument\n            this[`consume`] = function (idx, arg1, arg2) {\n                return this.consumeInternalRecord(arg1, idx, arg2);\n            };\n            this[`subrule`] = function (idx, arg1, arg2) {\n                return this.subruleInternalRecord(arg1, idx, arg2);\n            };\n            this[`option`] = function (idx, arg1) {\n                return this.optionInternalRecord(arg1, idx);\n            };\n            this[`or`] = function (idx, arg1) {\n                return this.orInternalRecord(arg1, idx);\n            };\n            this[`many`] = function (idx, arg1) {\n                this.manyInternalRecord(idx, arg1);\n            };\n            this[`atLeastOne`] = function (idx, arg1) {\n                this.atLeastOneInternalRecord(idx, arg1);\n            };\n            this.ACTION = this.ACTION_RECORD;\n            this.BACKTRACK = this.BACKTRACK_RECORD;\n            this.LA = this.LA_RECORD;\n        });\n    }\n    disableRecording() {\n        this.RECORDING_PHASE = false;\n        // By deleting these **instance** properties, any future invocation\n        // will be deferred to the original methods on the **prototype** object\n        // This seems to get rid of any incorrect optimizations that V8 may\n        // do during the recording phase.\n        this.TRACE_INIT(\"Deleting Recording methods\", () => {\n            const that = this;\n            for (let i = 0; i < 10; i++) {\n                const idx = i > 0 ? i : \"\";\n                delete that[`CONSUME${idx}`];\n                delete that[`SUBRULE${idx}`];\n                delete that[`OPTION${idx}`];\n                delete that[`OR${idx}`];\n                delete that[`MANY${idx}`];\n                delete that[`MANY_SEP${idx}`];\n                delete that[`AT_LEAST_ONE${idx}`];\n                delete that[`AT_LEAST_ONE_SEP${idx}`];\n            }\n            delete that[`consume`];\n            delete that[`subrule`];\n            delete that[`option`];\n            delete that[`or`];\n            delete that[`many`];\n            delete that[`atLeastOne`];\n            delete that.ACTION;\n            delete that.BACKTRACK;\n            delete that.LA;\n        });\n    }\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    // @ts-expect-error -- noop place holder\n    ACTION_RECORD(impl) {\n        // NO-OP during recording\n    }\n    // Executing backtracking logic will break our recording logic assumptions\n    BACKTRACK_RECORD(grammarRule, args) {\n        return () => true;\n    }\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    LA_RECORD(howMuch) {\n        // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n        // On LA return EOF at the end of the input so an infinite loop may occur.\n        return END_OF_FILE;\n    }\n    topLevelRuleRecord(name, def) {\n        try {\n            const newTopLevelRule = new Rule({ definition: [], name: name });\n            newTopLevelRule.name = name;\n            this.recordingProdStack.push(newTopLevelRule);\n            def.call(this);\n            this.recordingProdStack.pop();\n            return newTopLevelRule;\n        }\n        catch (originalError) {\n            if (originalError.KNOWN_RECORDER_ERROR !== true) {\n                try {\n                    originalError.message =\n                        originalError.message +\n                            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n                            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n                }\n                catch (mutabilityError) {\n                    // We may not be able to modify the original error object\n                    throw originalError;\n                }\n            }\n            throw originalError;\n        }\n    }\n    // Implementation of parsing DSL\n    optionInternalRecord(actionORMethodDef, occurrence) {\n        return recordProd.call(this, Option, actionORMethodDef, occurrence);\n    }\n    atLeastOneInternalRecord(occurrence, actionORMethodDef) {\n        recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n    }\n    atLeastOneSepFirstInternalRecord(occurrence, options) {\n        recordProd.call(this, RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    manyInternalRecord(occurrence, actionORMethodDef) {\n        recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n    }\n    manySepFirstInternalRecord(occurrence, options) {\n        recordProd.call(this, RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    orInternalRecord(altsOrOpts, occurrence) {\n        return recordOrProd.call(this, altsOrOpts, occurrence);\n    }\n    subruleInternalRecord(ruleToCall, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n            const error = new Error(`<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n                ` expecting a Parser method reference but got: <${JSON.stringify(ruleToCall)}>` +\n                `\\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        const prevProd = peek(this.recordingProdStack);\n        const ruleName = ruleToCall.ruleName;\n        const newNoneTerminal = new NonTerminal({\n            idx: occurrence,\n            nonTerminalName: ruleName,\n            label: options === null || options === void 0 ? void 0 : options.LABEL,\n            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n            referencedRule: undefined,\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return this.outputCst\n            ? RECORDING_PHASE_CSTNODE\n            : RECORDING_NULL_OBJECT;\n    }\n    consumeInternalRecord(tokType, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!hasShortKeyProperty(tokType)) {\n            const error = new Error(`<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n                ` expecting a TokenType reference but got: <${JSON.stringify(tokType)}>` +\n                `\\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        const prevProd = peek(this.recordingProdStack);\n        const newNoneTerminal = new Terminal({\n            idx: occurrence,\n            terminalType: tokType,\n            label: options === null || options === void 0 ? void 0 : options.LABEL,\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return RECORDING_PHASE_TOKEN;\n    }\n}\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep = false) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = peek(this.recordingProdStack);\n    const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n    const newProd = new prodConstructor({ definition: [], idx: occurrence });\n    if (handleSep) {\n        newProd.separator = mainProdArg.SEP;\n    }\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    this.recordingProdStack.push(newProd);\n    grammarAction.call(this);\n    prevProd.definition.push(newProd);\n    this.recordingProdStack.pop();\n    return RECORDING_NULL_OBJECT;\n}\nfunction recordOrProd(mainProdArg, occurrence) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = peek(this.recordingProdStack);\n    // Only an array of alternatives\n    const hasOptions = isArray(mainProdArg) === false;\n    const alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n    const newOrProd = new Alternation({\n        definition: [],\n        idx: occurrence,\n        ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n    });\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    const hasPredicates = some(alts, (currAlt) => isFunction(currAlt.GATE));\n    newOrProd.hasPredicates = hasPredicates;\n    prevProd.definition.push(newOrProd);\n    forEach(alts, (currAlt) => {\n        const currAltFlat = new Alternative({ definition: [] });\n        newOrProd.definition.push(currAltFlat);\n        if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES; // assumes end user provides the correct config value/type\n        }\n        // **implicit** ignoreAmbiguities due to usage of gate\n        else if (has(currAlt, \"GATE\")) {\n            currAltFlat.ignoreAmbiguities = true;\n        }\n        this.recordingProdStack.push(currAltFlat);\n        currAlt.ALT.call(this);\n        this.recordingProdStack.pop();\n    });\n    return RECORDING_NULL_OBJECT;\n}\nfunction getIdxSuffix(idx) {\n    return idx === 0 ? \"\" : `${idx}`;\n}\nfunction assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n        const error = new Error(\n        // The stack trace will contain all the needed details\n        `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n            `Idx value must be a none negative value smaller than ${MAX_METHOD_IDX + 1}`);\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n    }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport { defaultGrammarValidatorErrorProvider, defaultParserErrorProvider, } from \"../errors_public.js\";\nimport { resolveGrammar, validateGrammar, } from \"../grammar/gast/gast_resolver_public.js\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\nexport const END_OF_FILE = createTokenInstance(EOF, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\nObject.freeze(END_OF_FILE);\nexport const DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 3,\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: defaultParserErrorProvider,\n    nodeLocationTracking: \"none\",\n    traceInitPerf: false,\n    skipValidations: false,\n});\nexport const DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: () => undefined,\n    resyncEnabled: true,\n});\nexport var ParserDefinitionErrorType;\n(function (ParserDefinitionErrorType) {\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_NAME\"] = 0] = \"INVALID_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_RULE_NAME\"] = 1] = \"DUPLICATE_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_OVERRIDE\"] = 2] = \"INVALID_RULE_OVERRIDE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_PRODUCTIONS\"] = 3] = \"DUPLICATE_PRODUCTIONS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"UNRESOLVED_SUBRULE_REF\"] = 4] = \"UNRESOLVED_SUBRULE_REF\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"LEFT_RECURSION\"] = 5] = \"LEFT_RECURSION\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NONE_LAST_EMPTY_ALT\"] = 6] = \"NONE_LAST_EMPTY_ALT\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_ALTS\"] = 7] = \"AMBIGUOUS_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CONFLICT_TOKENS_RULES_NAMESPACE\"] = 8] = \"CONFLICT_TOKENS_RULES_NAMESPACE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_TOKEN_NAME\"] = 9] = \"INVALID_TOKEN_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NO_NON_EMPTY_LOOKAHEAD\"] = 10] = \"NO_NON_EMPTY_LOOKAHEAD\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_PREFIX_ALTS\"] = 11] = \"AMBIGUOUS_PREFIX_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"TOO_MANY_ALTS\"] = 12] = \"TOO_MANY_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CUSTOM_LOOKAHEAD_VALIDATION\"] = 13] = \"CUSTOM_LOOKAHEAD_VALIDATION\";\n})(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));\nexport function EMPTY_ALT(value = undefined) {\n    return function () {\n        return value;\n    };\n}\nexport class Parser {\n    /**\n     *  @deprecated use the **instance** method with the same name instead\n     */\n    static performSelfAnalysis(parserInstance) {\n        throw Error(\"The **static** `performSelfAnalysis` method has been deprecated.\" +\n            \"\\t\\nUse the **instance** method with the same name instead.\");\n    }\n    performSelfAnalysis() {\n        this.TRACE_INIT(\"performSelfAnalysis\", () => {\n            let defErrorsMsgs;\n            this.selfAnalysisDone = true;\n            const className = this.className;\n            this.TRACE_INIT(\"toFastProps\", () => {\n                // Without this voodoo magic the parser would be x3-x4 slower\n                // It seems it is better to invoke `toFastProperties` **before**\n                // Any manipulations of the `this` object done during the recording phase.\n                toFastProperties(this);\n            });\n            this.TRACE_INIT(\"Grammar Recording\", () => {\n                try {\n                    this.enableRecording();\n                    // Building the GAST\n                    forEach(this.definedRulesNames, (currRuleName) => {\n                        const wrappedRule = this[currRuleName];\n                        const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n                        let recordedRuleGast;\n                        this.TRACE_INIT(`${currRuleName} Rule`, () => {\n                            recordedRuleGast = this.topLevelRuleRecord(currRuleName, originalGrammarAction);\n                        });\n                        this.gastProductionsCache[currRuleName] = recordedRuleGast;\n                    });\n                }\n                finally {\n                    this.disableRecording();\n                }\n            });\n            let resolverErrors = [];\n            this.TRACE_INIT(\"Grammar Resolving\", () => {\n                resolverErrors = resolveGrammar({\n                    rules: values(this.gastProductionsCache),\n                });\n                this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n            });\n            this.TRACE_INIT(\"Grammar Validations\", () => {\n                // only perform additional grammar validations IFF no resolving errors have occurred.\n                // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n                if (isEmpty(resolverErrors) && this.skipValidations === false) {\n                    const validationErrors = validateGrammar({\n                        rules: values(this.gastProductionsCache),\n                        tokenTypes: values(this.tokensMap),\n                        errMsgProvider: defaultGrammarValidatorErrorProvider,\n                        grammarName: className,\n                    });\n                    const lookaheadValidationErrors = validateLookahead({\n                        lookaheadStrategy: this.lookaheadStrategy,\n                        rules: values(this.gastProductionsCache),\n                        tokenTypes: values(this.tokensMap),\n                        grammarName: className,\n                    });\n                    this.definitionErrors = this.definitionErrors.concat(validationErrors, lookaheadValidationErrors);\n                }\n            });\n            // this analysis may fail if the grammar is not perfectly valid\n            if (isEmpty(this.definitionErrors)) {\n                // The results of these computations are not needed unless error recovery is enabled.\n                if (this.recoveryEnabled) {\n                    this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n                        const allFollows = computeAllProdsFollows(values(this.gastProductionsCache));\n                        this.resyncFollows = allFollows;\n                    });\n                }\n                this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n                    var _a, _b;\n                    (_b = (_a = this.lookaheadStrategy).initialize) === null || _b === void 0 ? void 0 : _b.call(_a, {\n                        rules: values(this.gastProductionsCache),\n                    });\n                    this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n                });\n            }\n            if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n                !isEmpty(this.definitionErrors)) {\n                defErrorsMsgs = map(this.definitionErrors, (defError) => defError.message);\n                throw new Error(`Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\"\\n-------------------------------\\n\")}`);\n            }\n        });\n    }\n    constructor(tokenVocabulary, config) {\n        this.definitionErrors = [];\n        this.selfAnalysisDone = false;\n        const that = this;\n        that.initErrorHandler(config);\n        that.initLexerAdapter();\n        that.initLooksAhead(config);\n        that.initRecognizerEngine(tokenVocabulary, config);\n        that.initRecoverable(config);\n        that.initTreeBuilder(config);\n        that.initContentAssist();\n        that.initGastRecorder(config);\n        that.initPerformanceTracer(config);\n        if (has(config, \"ignoredIssues\")) {\n            throw new Error(\"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n                \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n                \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n                \"For further details.\");\n        }\n        this.skipValidations = has(config, \"skipValidations\")\n            ? config.skipValidations // casting assumes the end user passing the correct type\n            : DEFAULT_PARSER_CONFIG.skipValidations;\n    }\n}\n// Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n// (normally during the parser's constructor).\n// This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n// for example: duplicate rule names, referencing an unresolved subrule, ect...\n// This flag should not be enabled during normal usage, it is used in special situations, for example when\n// needing to display the parser definition errors in some GUI(online playground).\nParser.DEFER_DEFINITION_ERRORS_HANDLING = false;\napplyMixins(Parser, [\n    Recoverable,\n    LooksAhead,\n    TreeBuilder,\n    LexerAdapter,\n    RecognizerEngine,\n    RecognizerApi,\n    ErrorHandler,\n    ContentAssist,\n    GastRecorder,\n    PerformanceTracer,\n]);\nexport class CstParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n        const configClone = clone(config);\n        configClone.outputCst = true;\n        super(tokenVocabulary, configClone);\n    }\n}\nexport class EmbeddedActionsParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n        const configClone = clone(config);\n        configClone.outputCst = false;\n        super(tokenVocabulary, configClone);\n    }\n}\n","import { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport { defaultGrammarResolverErrorProvider, defaultGrammarValidatorErrorProvider, } from \"../../errors_public.js\";\nexport function resolveGrammar(options) {\n    const actualOptions = defaults(options, {\n        errMsgProvider: defaultGrammarResolverErrorProvider,\n    });\n    const topRulesTable = {};\n    forEach(options.rules, (rule) => {\n        topRulesTable[rule.name] = rule;\n    });\n    return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\nexport function validateGrammar(options) {\n    options = defaults(options, {\n        errMsgProvider: defaultGrammarValidatorErrorProvider,\n    });\n    return orgValidateGrammar(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName);\n}\n","export function applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach((baseCtor) => {\n        const baseProto = baseCtor.prototype;\n        Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n            if (propName === \"constructor\") {\n                return;\n            }\n            const basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);\n            // Handle Accessors\n            if (basePropDescriptor &&\n                (basePropDescriptor.get || basePropDescriptor.set)) {\n                Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);\n            }\n            else {\n                derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n            }\n        });\n    });\n}\n","import { addNoneTerminalToCst, addTerminalToCst, setNodeLocationFull, setNodeLocationOnlyOffset, } from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport { createBaseSemanticVisitorConstructor, createBaseVisitorConstructorWithDefaults, } from \"../../cst/cst_visitor.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n    initTreeBuilder(config) {\n        this.CST_STACK = [];\n        // outputCst is no longer exposed/defined in the pubic API\n        this.outputCst = config.outputCst;\n        this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n            ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n        if (!this.outputCst) {\n            this.cstInvocationStateUpdate = noop;\n            this.cstFinallyStateUpdate = noop;\n            this.cstPostTerminal = noop;\n            this.cstPostNonTerminal = noop;\n            this.cstPostRule = noop;\n        }\n        else {\n            if (/full/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = setNodeLocationFull;\n                    this.setNodeLocationFromNode = setNodeLocationFull;\n                    this.cstPostRule = noop;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = noop;\n                    this.setNodeLocationFromNode = noop;\n                    this.cstPostRule = this.cstPostRuleFull;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n                }\n            }\n            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = setNodeLocationOnlyOffset;\n                    this.setNodeLocationFromNode = setNodeLocationOnlyOffset;\n                    this.cstPostRule = noop;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = noop;\n                    this.setNodeLocationFromNode = noop;\n                    this.cstPostRule = this.cstPostRuleOnlyOffset;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRegular;\n                }\n            }\n            else if (/none/i.test(this.nodeLocationTracking)) {\n                this.setNodeLocationFromToken = noop;\n                this.setNodeLocationFromNode = noop;\n                this.cstPostRule = noop;\n                this.setInitialNodeLocation = noop;\n            }\n            else {\n                throw Error(`Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`);\n            }\n        }\n    }\n    setInitialNodeLocationOnlyOffsetRecovery(cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            endOffset: NaN,\n        };\n    }\n    setInitialNodeLocationOnlyOffsetRegular(cstNode) {\n        cstNode.location = {\n            // without error recovery the starting Location of a new CstNode is guaranteed\n            // To be the next Token's startOffset (for valid inputs).\n            // For invalid inputs there won't be any CSTOutput so this potential\n            // inaccuracy does not matter\n            startOffset: this.LA(1).startOffset,\n            endOffset: NaN,\n        };\n    }\n    setInitialNodeLocationFullRecovery(cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            startLine: NaN,\n            startColumn: NaN,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN,\n        };\n    }\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */\n    setInitialNodeLocationFullRegular(cstNode) {\n        const nextToken = this.LA(1);\n        cstNode.location = {\n            startOffset: nextToken.startOffset,\n            startLine: nextToken.startLine,\n            startColumn: nextToken.startColumn,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN,\n        };\n    }\n    cstInvocationStateUpdate(fullRuleName) {\n        const cstNode = {\n            name: fullRuleName,\n            children: Object.create(null),\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    }\n    cstFinallyStateUpdate() {\n        this.CST_STACK.pop();\n    }\n    cstPostRuleFull(ruleCstNode) {\n        // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n        const prevToken = this.LA(0);\n        const loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n            loc.endLine = prevToken.endLine;\n            loc.endColumn = prevToken.endColumn;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n            loc.startLine = NaN;\n            loc.startColumn = NaN;\n        }\n    }\n    cstPostRuleOnlyOffset(ruleCstNode) {\n        const prevToken = this.LA(0);\n        // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n        const loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n        }\n    }\n    cstPostTerminal(key, consumedToken) {\n        const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n        addTerminalToCst(rootCst, consumedToken, key);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    }\n    cstPostNonTerminal(ruleCstResult, ruleName) {\n        const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n        addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    }\n    getBaseCstVisitorConstructor() {\n        if (isUndefined(this.baseCstVisitorConstructor)) {\n            const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(this.className, keys(this.gastProductionsCache));\n            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n            return newBaseCstVisitorConstructor;\n        }\n        return this.baseCstVisitorConstructor;\n    }\n    getBaseCstVisitorConstructorWithDefaults() {\n        if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n            const newConstructor = createBaseVisitorConstructorWithDefaults(this.className, keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n            this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n            return newConstructor;\n        }\n        return this.baseCstVisitorWithDefaultsConstructor;\n    }\n    getLastExplicitRuleShortName() {\n        const ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 1];\n    }\n    getPreviousExplicitRuleShortName() {\n        const ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 2];\n    }\n    getLastExplicitRuleOccurrenceIndex() {\n        const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return occurrenceStack[occurrenceStack.length - 1];\n    }\n}\n","import { END_OF_FILE } from \"../parser.js\";\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n    initLexerAdapter() {\n        this.tokVector = [];\n        this.tokVectorLength = 0;\n        this.currIdx = -1;\n    }\n    set input(newInput) {\n        // @ts-ignore - `this parameter` not supported in setters/getters\n        //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n        if (this.selfAnalysisDone !== true) {\n            throw Error(`Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`);\n        }\n        // @ts-ignore - `this parameter` not supported in setters/getters\n        //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n        this.reset();\n        this.tokVector = newInput;\n        this.tokVectorLength = newInput.length;\n    }\n    get input() {\n        return this.tokVector;\n    }\n    // skips a token and returns the next token\n    SKIP_TOKEN() {\n        if (this.currIdx <= this.tokVector.length - 2) {\n            this.consumeToken();\n            return this.LA(1);\n        }\n        else {\n            return END_OF_FILE;\n        }\n    }\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LA(howMuch) {\n        const soughtIdx = this.currIdx + howMuch;\n        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n            return END_OF_FILE;\n        }\n        else {\n            return this.tokVector[soughtIdx];\n        }\n    }\n    consumeToken() {\n        this.currIdx++;\n    }\n    exportLexerState() {\n        return this.currIdx;\n    }\n    importLexerState(newState) {\n        this.currIdx = newState;\n    }\n    resetLexerState() {\n        this.currIdx = -1;\n    }\n    moveToTerminatedState() {\n        this.currIdx = this.tokVector.length - 1;\n    }\n    getLexerPosition() {\n        return this.exportLexerState();\n    }\n}\n","import { clone, every, flatten, has, isArray, isEmpty, isObject, reduce, uniq, values, } from \"lodash-es\";\nimport { AT_LEAST_ONE_IDX, AT_LEAST_ONE_SEP_IDX, BITS_FOR_METHOD_TYPE, BITS_FOR_OCCURRENCE_IDX, MANY_IDX, MANY_SEP_IDX, OPTION_IDX, OR_IDX, } from \"../../grammar/keys.js\";\nimport { isRecognitionException, MismatchedTokenException, NotAllInputParsedException, } from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport { NextTerminalAfterAtLeastOneSepWalker, NextTerminalAfterAtLeastOneWalker, NextTerminalAfterManySepWalker, NextTerminalAfterManyWalker, } from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { augmentTokenTypes, isTokenType, tokenStructuredMatcher, tokenStructuredMatcherNoCategories, } from \"../../../scan/tokens.js\";\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n    initRecognizerEngine(tokenVocabulary, config) {\n        this.className = this.constructor.name;\n        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n        this.shortRuleNameToFull = {};\n        this.fullRuleNameToShort = {};\n        this.ruleShortNameIdx = 256;\n        this.tokenMatcher = tokenStructuredMatcherNoCategories;\n        this.subruleIdx = 0;\n        this.definedRulesNames = [];\n        this.tokensMap = {};\n        this.isBackTrackingStack = [];\n        this.RULE_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n        this.gastProductionsCache = {};\n        if (has(config, \"serializedGrammar\")) {\n            throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n                \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n                \"\\tFor Further details.\");\n        }\n        if (isArray(tokenVocabulary)) {\n            // This only checks for Token vocabularies provided as arrays.\n            // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n            // rather than all edge cases of empty Token vocabularies.\n            if (isEmpty(tokenVocabulary)) {\n                throw Error(\"A Token Vocabulary cannot be empty.\\n\" +\n                    \"\\tNote that the first argument for the parser constructor\\n\" +\n                    \"\\tis no longer a Token vector (since v4.0).\");\n            }\n            if (typeof tokenVocabulary[0].startOffset === \"number\") {\n                throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n                    \"\\tFor Further details.\");\n            }\n        }\n        if (isArray(tokenVocabulary)) {\n            this.tokensMap = reduce(tokenVocabulary, (acc, tokType) => {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if (has(tokenVocabulary, \"modes\") &&\n            every(flatten(values(tokenVocabulary.modes)), isTokenType)) {\n            const allTokenTypes = flatten(values(tokenVocabulary.modes));\n            const uniqueTokens = uniq(allTokenTypes);\n            this.tokensMap = reduce(uniqueTokens, (acc, tokType) => {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if (isObject(tokenVocabulary)) {\n            this.tokensMap = clone(tokenVocabulary);\n        }\n        else {\n            throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" +\n                \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n        }\n        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n        // parsed with a clear error message (\"expecting EOF but found ...\")\n        this.tokensMap[\"EOF\"] = EOF;\n        const allTokenTypes = has(tokenVocabulary, \"modes\")\n            ? flatten(values(tokenVocabulary.modes))\n            : values(tokenVocabulary);\n        const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) => isEmpty(tokenConstructor.categoryMatches));\n        this.tokenMatcher = noTokenCategoriesUsed\n            ? tokenStructuredMatcherNoCategories\n            : tokenStructuredMatcher;\n        // Because ES2015+ syntax should be supported for creating Token classes\n        // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n        augmentTokenTypes(values(this.tokensMap));\n    }\n    defineRule(ruleName, impl, config) {\n        if (this.selfAnalysisDone) {\n            throw Error(`Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n                `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);\n        }\n        const resyncEnabled = has(config, \"resyncEnabled\")\n            ? config.resyncEnabled // assumes end user provides the correct config value/type\n            : DEFAULT_RULE_CONFIG.resyncEnabled;\n        const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n            ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n            : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n        // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n        // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n        const shortName = this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n        this.ruleShortNameIdx++;\n        this.shortRuleNameToFull[shortName] = ruleName;\n        this.fullRuleNameToShort[ruleName] = shortName;\n        let invokeRuleWithTry;\n        // Micro optimization, only check the condition **once** on rule definition\n        // instead of **every single** rule invocation.\n        if (this.outputCst === true) {\n            invokeRuleWithTry = function invokeRuleWithTry(...args) {\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    impl.apply(this, args);\n                    const cst = this.CST_STACK[this.CST_STACK.length - 1];\n                    this.cstPostRule(cst);\n                    return cst;\n                }\n                catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                }\n                finally {\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        else {\n            invokeRuleWithTry = function invokeRuleWithTryCst(...args) {\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    return impl.apply(this, args);\n                }\n                catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                }\n                finally {\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        const wrappedGrammarRule = Object.assign(invokeRuleWithTry, { ruleName, originalGrammarAction: impl });\n        return wrappedGrammarRule;\n    }\n    invokeRuleCatch(e, resyncEnabledConfig, recoveryValueFunc) {\n        const isFirstInvokedRule = this.RULE_STACK.length === 1;\n        // note the reSync is always enabled for the first rule invocation, because we must always be able to\n        // reSync with EOF and just output some INVALID ParseTree\n        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n        // path is really the most valid one\n        const reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n        if (isRecognitionException(e)) {\n            const recogError = e;\n            if (reSyncEnabled) {\n                const reSyncTokType = this.findReSyncTokenType();\n                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n                    if (this.outputCst) {\n                        const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        return partialCstResult;\n                    }\n                    else {\n                        return recoveryValueFunc(e);\n                    }\n                }\n                else {\n                    if (this.outputCst) {\n                        const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        recogError.partialCstResult = partialCstResult;\n                    }\n                    // to be handled Further up the call stack\n                    throw recogError;\n                }\n            }\n            else if (isFirstInvokedRule) {\n                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n                this.moveToTerminatedState();\n                // the parser should never throw one of its own errors outside its flow.\n                // even if error recovery is disabled\n                return recoveryValueFunc(e);\n            }\n            else {\n                // to be recovered Further up the call stack\n                throw recogError;\n            }\n        }\n        else {\n            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n            throw e;\n        }\n    }\n    // Implementation of parsing DSL\n    optionInternal(actionORMethodDef, occurrence) {\n        const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n        return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    }\n    optionInternalLogic(actionORMethodDef, occurrence, key) {\n        let lookAheadFunc = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookAheadFunc;\n                lookAheadFunc = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            return action.call(this);\n        }\n        return undefined;\n    }\n    atLeastOneInternal(prodOccurrence, actionORMethodDef) {\n        const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_IDX, prodOccurrence);\n        return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key) {\n        let lookAheadFunc = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookAheadFunc;\n                lookAheadFunc = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            let notStuck = this.doSingleRepetition(action);\n            while (lookAheadFunc.call(this) === true &&\n                notStuck === true) {\n                notStuck = this.doSingleRepetition(action);\n            }\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n        }\n        // note that while it may seem that this can cause an error because by using a recursive call to\n        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, AT_LEAST_ONE_IDX, prodOccurrence, NextTerminalAfterAtLeastOneWalker);\n    }\n    atLeastOneSepFirstInternal(prodOccurrence, options) {\n        const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    atLeastOneSepFirstInternalLogic(prodOccurrence, options, key) {\n        const action = options.DEF;\n        const separator = options.SEP;\n        const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLookaheadFunc.call(this) === true) {\n            action.call(this);\n            //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n            //  because it is only needed in error recovery scenarios.\n            const separatorLookAheadFunc = () => {\n                return this.tokenMatcher(this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                NextTerminalAfterAtLeastOneSepWalker,\n            ], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, NextTerminalAfterAtLeastOneSepWalker);\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n        }\n    }\n    manyInternal(prodOccurrence, actionORMethodDef) {\n        const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    manyInternalLogic(prodOccurrence, actionORMethodDef, key) {\n        let lookaheadFunction = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookaheadFunction;\n                lookaheadFunction = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        let notStuck = true;\n        while (lookaheadFunction.call(this) === true && notStuck === true) {\n            notStuck = this.doSingleRepetition(action);\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, MANY_IDX, prodOccurrence, NextTerminalAfterManyWalker, \n        // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck);\n    }\n    manySepFirstInternal(prodOccurrence, options) {\n        const laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence);\n        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    manySepFirstInternalLogic(prodOccurrence, options, key) {\n        const action = options.DEF;\n        const separator = options.SEP;\n        const firstIterationLaFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLaFunc.call(this) === true) {\n            action.call(this);\n            const separatorLookAheadFunc = () => {\n                return this.tokenMatcher(this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                NextTerminalAfterManySepWalker,\n            ], separatorLookAheadFunc, MANY_SEP_IDX, prodOccurrence, NextTerminalAfterManySepWalker);\n        }\n    }\n    repetitionSepSecondInternal(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n        while (separatorLookAheadFunc()) {\n            // note that this CONSUME will never enter recovery because\n            // the separatorLookAheadFunc checks that the separator really does exist.\n            this.CONSUME(separator);\n            action.call(this);\n        }\n        // we can only arrive to this function after an error\n        // has occurred (hence the name 'second') so the following\n        // IF will always be entered, its possible to remove it...\n        // however it is kept to avoid confusion and be consistent.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        /* istanbul ignore else */\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n            prodOccurrence,\n            separator,\n            separatorLookAheadFunc,\n            action,\n            nextTerminalAfterWalker,\n        ], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n    }\n    doSingleRepetition(action) {\n        const beforeIteration = this.getLexerPosition();\n        action.call(this);\n        const afterIteration = this.getLexerPosition();\n        // This boolean will indicate if this repetition progressed\n        // or if we are \"stuck\" (potential infinite loop in the repetition).\n        return afterIteration > beforeIteration;\n    }\n    orInternal(altsOrOpts, occurrence) {\n        const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n        const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n        const laFunc = this.getLaFuncFromCache(laKey);\n        const altIdxToTake = laFunc.call(this, alts);\n        if (altIdxToTake !== undefined) {\n            const chosenAlternative = alts[altIdxToTake];\n            return chosenAlternative.ALT.call(this);\n        }\n        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    }\n    ruleFinallyStateUpdate() {\n        this.RULE_STACK.pop();\n        this.RULE_OCCURRENCE_STACK.pop();\n        // NOOP when cst is disabled\n        this.cstFinallyStateUpdate();\n        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n            const firstRedundantTok = this.LA(1);\n            const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n                firstRedundant: firstRedundantTok,\n                ruleName: this.getCurrRuleFullName(),\n            });\n            this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok));\n        }\n    }\n    subruleInternal(ruleToCall, idx, options) {\n        let ruleResult;\n        try {\n            const args = options !== undefined ? options.ARGS : undefined;\n            this.subruleIdx = idx;\n            ruleResult = ruleToCall.apply(this, args);\n            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleToCall.ruleName);\n            return ruleResult;\n        }\n        catch (e) {\n            throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n        }\n    }\n    subruleInternalError(e, options, ruleName) {\n        if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleName);\n            delete e.partialCstResult;\n        }\n        throw e;\n    }\n    consumeInternal(tokType, idx, options) {\n        let consumedToken;\n        try {\n            const nextToken = this.LA(1);\n            if (this.tokenMatcher(nextToken, tokType) === true) {\n                this.consumeToken();\n                consumedToken = nextToken;\n            }\n            else {\n                this.consumeInternalError(tokType, nextToken, options);\n            }\n        }\n        catch (eFromConsumption) {\n            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n        }\n        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined\n            ? options.LABEL\n            : tokType.name, consumedToken);\n        return consumedToken;\n    }\n    consumeInternalError(tokType, nextToken, options) {\n        let msg;\n        const previousToken = this.LA(0);\n        if (options !== undefined && options.ERR_MSG) {\n            msg = options.ERR_MSG;\n        }\n        else {\n            msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: tokType,\n                actual: nextToken,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName(),\n            });\n        }\n        throw this.SAVE_ERROR(new MismatchedTokenException(msg, nextToken, previousToken));\n    }\n    consumeInternalRecovery(tokType, idx, eFromConsumption) {\n        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n        // but the original syntax could have been parsed successfully without any backtracking + recovery\n        if (this.recoveryEnabled &&\n            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n            eFromConsumption.name === \"MismatchedTokenException\" &&\n            !this.isBackTracking()) {\n            const follows = this.getFollowsForInRuleRecovery(tokType, idx);\n            try {\n                return this.tryInRuleRecovery(tokType, follows);\n            }\n            catch (eFromInRuleRecovery) {\n                if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n                    // failed in RuleRecovery.\n                    // throw the original error in order to trigger reSync error recovery\n                    throw eFromConsumption;\n                }\n                else {\n                    throw eFromInRuleRecovery;\n                }\n            }\n        }\n        else {\n            throw eFromConsumption;\n        }\n    }\n    saveRecogState() {\n        // errors is a getter which will clone the errors array\n        const savedErrors = this.errors;\n        const savedRuleStack = clone(this.RULE_STACK);\n        return {\n            errors: savedErrors,\n            lexerState: this.exportLexerState(),\n            RULE_STACK: savedRuleStack,\n            CST_STACK: this.CST_STACK,\n        };\n    }\n    reloadRecogState(newState) {\n        this.errors = newState.errors;\n        this.importLexerState(newState.lexerState);\n        this.RULE_STACK = newState.RULE_STACK;\n    }\n    ruleInvocationStateUpdate(shortName, fullName, idxInCallingRule) {\n        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n        this.RULE_STACK.push(shortName);\n        // NOOP when cst is disabled\n        this.cstInvocationStateUpdate(fullName);\n    }\n    isBackTracking() {\n        return this.isBackTrackingStack.length !== 0;\n    }\n    getCurrRuleFullName() {\n        const shortName = this.getLastExplicitRuleShortName();\n        return this.shortRuleNameToFull[shortName];\n    }\n    shortRuleNameToFullName(shortName) {\n        return this.shortRuleNameToFull[shortName];\n    }\n    isAtEndOfInput() {\n        return this.tokenMatcher(this.LA(1), EOF);\n    }\n    reset() {\n        this.resetLexerState();\n        this.subruleIdx = 0;\n        this.isBackTrackingStack = [];\n        this.errors = [];\n        this.RULE_STACK = [];\n        // TODO: extract a specific reset for TreeBuilder trait\n        this.CST_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n    }\n}\n","import { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { serializeGrammar } from \"@chevrotain/gast\";\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n    ACTION(impl) {\n        return impl.call(this);\n    }\n    consume(idx, tokType, options) {\n        return this.consumeInternal(tokType, idx, options);\n    }\n    subrule(idx, ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, idx, options);\n    }\n    option(idx, actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, idx);\n    }\n    or(idx, altsOrOpts) {\n        return this.orInternal(altsOrOpts, idx);\n    }\n    many(idx, actionORMethodDef) {\n        return this.manyInternal(idx, actionORMethodDef);\n    }\n    atLeastOne(idx, actionORMethodDef) {\n        return this.atLeastOneInternal(idx, actionORMethodDef);\n    }\n    CONSUME(tokType, options) {\n        return this.consumeInternal(tokType, 0, options);\n    }\n    CONSUME1(tokType, options) {\n        return this.consumeInternal(tokType, 1, options);\n    }\n    CONSUME2(tokType, options) {\n        return this.consumeInternal(tokType, 2, options);\n    }\n    CONSUME3(tokType, options) {\n        return this.consumeInternal(tokType, 3, options);\n    }\n    CONSUME4(tokType, options) {\n        return this.consumeInternal(tokType, 4, options);\n    }\n    CONSUME5(tokType, options) {\n        return this.consumeInternal(tokType, 5, options);\n    }\n    CONSUME6(tokType, options) {\n        return this.consumeInternal(tokType, 6, options);\n    }\n    CONSUME7(tokType, options) {\n        return this.consumeInternal(tokType, 7, options);\n    }\n    CONSUME8(tokType, options) {\n        return this.consumeInternal(tokType, 8, options);\n    }\n    CONSUME9(tokType, options) {\n        return this.consumeInternal(tokType, 9, options);\n    }\n    SUBRULE(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 0, options);\n    }\n    SUBRULE1(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 1, options);\n    }\n    SUBRULE2(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 2, options);\n    }\n    SUBRULE3(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 3, options);\n    }\n    SUBRULE4(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 4, options);\n    }\n    SUBRULE5(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 5, options);\n    }\n    SUBRULE6(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 6, options);\n    }\n    SUBRULE7(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 7, options);\n    }\n    SUBRULE8(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 8, options);\n    }\n    SUBRULE9(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 9, options);\n    }\n    OPTION(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 0);\n    }\n    OPTION1(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 1);\n    }\n    OPTION2(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 2);\n    }\n    OPTION3(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 3);\n    }\n    OPTION4(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 4);\n    }\n    OPTION5(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 5);\n    }\n    OPTION6(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 6);\n    }\n    OPTION7(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 7);\n    }\n    OPTION8(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 8);\n    }\n    OPTION9(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 9);\n    }\n    OR(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 0);\n    }\n    OR1(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 1);\n    }\n    OR2(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 2);\n    }\n    OR3(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 3);\n    }\n    OR4(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 4);\n    }\n    OR5(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 5);\n    }\n    OR6(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 6);\n    }\n    OR7(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 7);\n    }\n    OR8(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 8);\n    }\n    OR9(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 9);\n    }\n    MANY(actionORMethodDef) {\n        this.manyInternal(0, actionORMethodDef);\n    }\n    MANY1(actionORMethodDef) {\n        this.manyInternal(1, actionORMethodDef);\n    }\n    MANY2(actionORMethodDef) {\n        this.manyInternal(2, actionORMethodDef);\n    }\n    MANY3(actionORMethodDef) {\n        this.manyInternal(3, actionORMethodDef);\n    }\n    MANY4(actionORMethodDef) {\n        this.manyInternal(4, actionORMethodDef);\n    }\n    MANY5(actionORMethodDef) {\n        this.manyInternal(5, actionORMethodDef);\n    }\n    MANY6(actionORMethodDef) {\n        this.manyInternal(6, actionORMethodDef);\n    }\n    MANY7(actionORMethodDef) {\n        this.manyInternal(7, actionORMethodDef);\n    }\n    MANY8(actionORMethodDef) {\n        this.manyInternal(8, actionORMethodDef);\n    }\n    MANY9(actionORMethodDef) {\n        this.manyInternal(9, actionORMethodDef);\n    }\n    MANY_SEP(options) {\n        this.manySepFirstInternal(0, options);\n    }\n    MANY_SEP1(options) {\n        this.manySepFirstInternal(1, options);\n    }\n    MANY_SEP2(options) {\n        this.manySepFirstInternal(2, options);\n    }\n    MANY_SEP3(options) {\n        this.manySepFirstInternal(3, options);\n    }\n    MANY_SEP4(options) {\n        this.manySepFirstInternal(4, options);\n    }\n    MANY_SEP5(options) {\n        this.manySepFirstInternal(5, options);\n    }\n    MANY_SEP6(options) {\n        this.manySepFirstInternal(6, options);\n    }\n    MANY_SEP7(options) {\n        this.manySepFirstInternal(7, options);\n    }\n    MANY_SEP8(options) {\n        this.manySepFirstInternal(8, options);\n    }\n    MANY_SEP9(options) {\n        this.manySepFirstInternal(9, options);\n    }\n    AT_LEAST_ONE(actionORMethodDef) {\n        this.atLeastOneInternal(0, actionORMethodDef);\n    }\n    AT_LEAST_ONE1(actionORMethodDef) {\n        return this.atLeastOneInternal(1, actionORMethodDef);\n    }\n    AT_LEAST_ONE2(actionORMethodDef) {\n        this.atLeastOneInternal(2, actionORMethodDef);\n    }\n    AT_LEAST_ONE3(actionORMethodDef) {\n        this.atLeastOneInternal(3, actionORMethodDef);\n    }\n    AT_LEAST_ONE4(actionORMethodDef) {\n        this.atLeastOneInternal(4, actionORMethodDef);\n    }\n    AT_LEAST_ONE5(actionORMethodDef) {\n        this.atLeastOneInternal(5, actionORMethodDef);\n    }\n    AT_LEAST_ONE6(actionORMethodDef) {\n        this.atLeastOneInternal(6, actionORMethodDef);\n    }\n    AT_LEAST_ONE7(actionORMethodDef) {\n        this.atLeastOneInternal(7, actionORMethodDef);\n    }\n    AT_LEAST_ONE8(actionORMethodDef) {\n        this.atLeastOneInternal(8, actionORMethodDef);\n    }\n    AT_LEAST_ONE9(actionORMethodDef) {\n        this.atLeastOneInternal(9, actionORMethodDef);\n    }\n    AT_LEAST_ONE_SEP(options) {\n        this.atLeastOneSepFirstInternal(0, options);\n    }\n    AT_LEAST_ONE_SEP1(options) {\n        this.atLeastOneSepFirstInternal(1, options);\n    }\n    AT_LEAST_ONE_SEP2(options) {\n        this.atLeastOneSepFirstInternal(2, options);\n    }\n    AT_LEAST_ONE_SEP3(options) {\n        this.atLeastOneSepFirstInternal(3, options);\n    }\n    AT_LEAST_ONE_SEP4(options) {\n        this.atLeastOneSepFirstInternal(4, options);\n    }\n    AT_LEAST_ONE_SEP5(options) {\n        this.atLeastOneSepFirstInternal(5, options);\n    }\n    AT_LEAST_ONE_SEP6(options) {\n        this.atLeastOneSepFirstInternal(6, options);\n    }\n    AT_LEAST_ONE_SEP7(options) {\n        this.atLeastOneSepFirstInternal(7, options);\n    }\n    AT_LEAST_ONE_SEP8(options) {\n        this.atLeastOneSepFirstInternal(8, options);\n    }\n    AT_LEAST_ONE_SEP9(options) {\n        this.atLeastOneSepFirstInternal(9, options);\n    }\n    RULE(name, implementation, config = DEFAULT_RULE_CONFIG) {\n        if (includes(this.definedRulesNames, name)) {\n            const errMsg = defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n                topLevelRule: name,\n                grammarName: this.className,\n            });\n            const error = {\n                message: errMsg,\n                type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n                ruleName: name,\n            };\n            this.definitionErrors.push(error);\n        }\n        this.definedRulesNames.push(name);\n        const ruleImplementation = this.defineRule(name, implementation, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    }\n    OVERRIDE_RULE(name, impl, config = DEFAULT_RULE_CONFIG) {\n        const ruleErrors = validateRuleIsOverridden(name, this.definedRulesNames, this.className);\n        this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n        const ruleImplementation = this.defineRule(name, impl, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    }\n    BACKTRACK(grammarRule, args) {\n        return function () {\n            // save org state\n            this.isBackTrackingStack.push(1);\n            const orgState = this.saveRecogState();\n            try {\n                grammarRule.apply(this, args);\n                // if no exception was thrown we have succeed parsing the rule.\n                return true;\n            }\n            catch (e) {\n                if (isRecognitionException(e)) {\n                    return false;\n                }\n                else {\n                    throw e;\n                }\n            }\n            finally {\n                this.reloadRecogState(orgState);\n                this.isBackTrackingStack.pop();\n            }\n        };\n    }\n    // GAST export APIs\n    getGAstProductions() {\n        return this.gastProductionsCache;\n    }\n    getSerializedGastProductions() {\n        return serializeGrammar(values(this.gastProductionsCache));\n    }\n}\n","import { EarlyExitException, isRecognitionException, NoViableAltException, } from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport { getLookaheadPathsForOptionalProd, getLookaheadPathsForOr, } from \"../../grammar/lookahead.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n    initErrorHandler(config) {\n        this._errors = [];\n        this.errorMessageProvider = has(config, \"errorMessageProvider\")\n            ? config.errorMessageProvider // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n    }\n    SAVE_ERROR(error) {\n        if (isRecognitionException(error)) {\n            error.context = {\n                ruleStack: this.getHumanReadableRuleStack(),\n                ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n            };\n            this._errors.push(error);\n            return error;\n        }\n        else {\n            throw Error(\"Trying to save an Error which is not a RecognitionException\");\n        }\n    }\n    get errors() {\n        return clone(this._errors);\n    }\n    set errors(newErrors) {\n        this._errors = newErrors;\n    }\n    // TODO: consider caching the error message computed information\n    raiseEarlyExitException(occurrence, prodType, userDefinedErrMsg) {\n        const ruleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[ruleName];\n        const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n        const insideProdPaths = lookAheadPathsPerAlternative[0];\n        const actualTokens = [];\n        for (let i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        const msg = this.errorMessageProvider.buildEarlyExitMessage({\n            expectedIterationPaths: insideProdPaths,\n            actual: actualTokens,\n            previous: this.LA(0),\n            customUserDescription: userDefinedErrMsg,\n            ruleName: ruleName,\n        });\n        throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n    }\n    // TODO: consider caching the error message computed information\n    raiseNoAltException(occurrence, errMsgTypes) {\n        const ruleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[ruleName];\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n        const lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n        const actualTokens = [];\n        for (let i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        const previousToken = this.LA(0);\n        const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\n            actual: actualTokens,\n            previous: previousToken,\n            customUserDescription: errMsgTypes,\n            ruleName: this.getCurrRuleFullName(),\n        });\n        throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken));\n    }\n}\n","import { NextAfterTokenWalker, nextPossibleTokensAfter, } from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nexport class ContentAssist {\n    initContentAssist() { }\n    computeContentAssist(startRuleName, precedingInput) {\n        const startRuleGast = this.gastProductionsCache[startRuleName];\n        if (isUndefined(startRuleGast)) {\n            throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n        }\n        return nextPossibleTokensAfter([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);\n    }\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    getNextPossibleTokenTypes(grammarPath) {\n        const topRuleName = first(grammarPath.ruleStack);\n        const gastProductions = this.getGAstProductions();\n        const topProduction = gastProductions[topRuleName];\n        const nextPossibleTokenTypes = new NextAfterTokenWalker(topProduction, grammarPath).startWalking();\n        return nextPossibleTokenTypes;\n    }\n}\n","import { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n    initPerformanceTracer(config) {\n        if (has(config, \"traceInitPerf\")) {\n            const userTraceInitPerf = config.traceInitPerf;\n            const traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf; // assumes end user provides the correct config value/type\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(`${indent}--> <${phaseDesc}>`);\n            }\n            const { time, value } = timer(phaseImpl);\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            const traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    }\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport map from \"lodash-es/map.js\";\nimport filter from \"lodash-es/filter.js\";\nimport { Alternation, NonTerminal, Option, RepetitionMandatory, Repetition, Terminal, RepetitionWithSeparator, RepetitionMandatoryWithSeparator } from \"chevrotain\";\nexport function buildATNKey(rule, type, occurrence) {\n    return `${rule.name}_${type}_${occurrence}`;\n}\nexport const ATN_INVALID_TYPE = 0;\nexport const ATN_BASIC = 1;\nexport const ATN_RULE_START = 2;\nexport const ATN_PLUS_BLOCK_START = 4;\nexport const ATN_STAR_BLOCK_START = 5;\n// Currently unused as the ATN is not used for lexing\nexport const ATN_TOKEN_START = 6;\nexport const ATN_RULE_STOP = 7;\nexport const ATN_BLOCK_END = 8;\nexport const ATN_STAR_LOOP_BACK = 9;\nexport const ATN_STAR_LOOP_ENTRY = 10;\nexport const ATN_PLUS_LOOP_BACK = 11;\nexport const ATN_LOOP_END = 12;\nexport class AbstractTransition {\n    constructor(target) {\n        this.target = target;\n    }\n    isEpsilon() {\n        return false;\n    }\n}\nexport class AtomTransition extends AbstractTransition {\n    constructor(target, tokenType) {\n        super(target);\n        this.tokenType = tokenType;\n    }\n}\nexport class EpsilonTransition extends AbstractTransition {\n    constructor(target) {\n        super(target);\n    }\n    isEpsilon() {\n        return true;\n    }\n}\nexport class RuleTransition extends AbstractTransition {\n    constructor(ruleStart, rule, followState) {\n        super(ruleStart);\n        this.rule = rule;\n        this.followState = followState;\n    }\n    isEpsilon() {\n        return true;\n    }\n}\nexport function createATN(rules) {\n    const atn = {\n        decisionMap: {},\n        decisionStates: [],\n        ruleToStartState: new Map(),\n        ruleToStopState: new Map(),\n        states: []\n    };\n    createRuleStartAndStopATNStates(atn, rules);\n    const ruleLength = rules.length;\n    for (let i = 0; i < ruleLength; i++) {\n        const rule = rules[i];\n        const ruleBlock = block(atn, rule, rule);\n        if (ruleBlock === undefined) {\n            continue;\n        }\n        buildRuleHandle(atn, rule, ruleBlock);\n    }\n    return atn;\n}\nfunction createRuleStartAndStopATNStates(atn, rules) {\n    const ruleLength = rules.length;\n    for (let i = 0; i < ruleLength; i++) {\n        const rule = rules[i];\n        const start = newState(atn, rule, undefined, {\n            type: ATN_RULE_START\n        });\n        const stop = newState(atn, rule, undefined, {\n            type: ATN_RULE_STOP\n        });\n        start.stop = stop;\n        atn.ruleToStartState.set(rule, start);\n        atn.ruleToStopState.set(rule, stop);\n    }\n}\nfunction atom(atn, rule, production) {\n    if (production instanceof Terminal) {\n        return tokenRef(atn, rule, production.terminalType, production);\n    }\n    else if (production instanceof NonTerminal) {\n        return ruleRef(atn, rule, production);\n    }\n    else if (production instanceof Alternation) {\n        return alternation(atn, rule, production);\n    }\n    else if (production instanceof Option) {\n        return option(atn, rule, production);\n    }\n    else if (production instanceof Repetition) {\n        return repetition(atn, rule, production);\n    }\n    else if (production instanceof RepetitionWithSeparator) {\n        return repetitionSep(atn, rule, production);\n    }\n    else if (production instanceof RepetitionMandatory) {\n        return repetitionMandatory(atn, rule, production);\n    }\n    else if (production instanceof RepetitionMandatoryWithSeparator) {\n        return repetitionMandatorySep(atn, rule, production);\n    }\n    else {\n        return block(atn, rule, production);\n    }\n}\nfunction repetition(atn, rule, repetition) {\n    const starState = newState(atn, rule, repetition, {\n        type: ATN_STAR_BLOCK_START\n    });\n    defineDecisionState(atn, starState);\n    const handle = makeAlts(atn, rule, starState, repetition, block(atn, rule, repetition));\n    return star(atn, rule, repetition, handle);\n}\nfunction repetitionSep(atn, rule, repetition) {\n    const starState = newState(atn, rule, repetition, {\n        type: ATN_STAR_BLOCK_START\n    });\n    defineDecisionState(atn, starState);\n    const handle = makeAlts(atn, rule, starState, repetition, block(atn, rule, repetition));\n    const sep = tokenRef(atn, rule, repetition.separator, repetition);\n    return star(atn, rule, repetition, handle, sep);\n}\nfunction repetitionMandatory(atn, rule, repetition) {\n    const plusState = newState(atn, rule, repetition, {\n        type: ATN_PLUS_BLOCK_START\n    });\n    defineDecisionState(atn, plusState);\n    const handle = makeAlts(atn, rule, plusState, repetition, block(atn, rule, repetition));\n    return plus(atn, rule, repetition, handle);\n}\nfunction repetitionMandatorySep(atn, rule, repetition) {\n    const plusState = newState(atn, rule, repetition, {\n        type: ATN_PLUS_BLOCK_START\n    });\n    defineDecisionState(atn, plusState);\n    const handle = makeAlts(atn, rule, plusState, repetition, block(atn, rule, repetition));\n    const sep = tokenRef(atn, rule, repetition.separator, repetition);\n    return plus(atn, rule, repetition, handle, sep);\n}\nfunction alternation(atn, rule, alternation) {\n    const start = newState(atn, rule, alternation, {\n        type: ATN_BASIC\n    });\n    defineDecisionState(atn, start);\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e));\n    const handle = makeAlts(atn, rule, start, alternation, ...alts);\n    return handle;\n}\nfunction option(atn, rule, option) {\n    const start = newState(atn, rule, option, {\n        type: ATN_BASIC\n    });\n    defineDecisionState(atn, start);\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option));\n    return optional(atn, rule, option, handle);\n}\nfunction block(atn, rule, block) {\n    const handles = filter(map(block.definition, (e) => atom(atn, rule, e)), (e) => e !== undefined);\n    if (handles.length === 1) {\n        return handles[0];\n    }\n    else if (handles.length === 0) {\n        return undefined;\n    }\n    else {\n        return makeBlock(atn, handles);\n    }\n}\nfunction plus(atn, rule, plus, handle, sep) {\n    const blkStart = handle.left;\n    const blkEnd = handle.right;\n    const loop = newState(atn, rule, plus, {\n        type: ATN_PLUS_LOOP_BACK\n    });\n    defineDecisionState(atn, loop);\n    const end = newState(atn, rule, plus, {\n        type: ATN_LOOP_END\n    });\n    blkStart.loopback = loop;\n    end.loopback = loop;\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\n    epsilon(blkEnd, loop); // block can see loop back\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\n    // This influences the chosen option in the lookahead DFA\n    if (sep === undefined) {\n        epsilon(loop, blkStart); // loop back to start\n        epsilon(loop, end); // exit\n    }\n    else {\n        epsilon(loop, end); // exit\n        // loop back to start with separator\n        epsilon(loop, sep.left);\n        epsilon(sep.right, blkStart);\n    }\n    return {\n        left: blkStart,\n        right: end\n    };\n}\nfunction star(atn, rule, star, handle, sep) {\n    const start = handle.left;\n    const end = handle.right;\n    const entry = newState(atn, rule, star, {\n        type: ATN_STAR_LOOP_ENTRY\n    });\n    defineDecisionState(atn, entry);\n    const loopEnd = newState(atn, rule, star, {\n        type: ATN_LOOP_END\n    });\n    const loop = newState(atn, rule, star, {\n        type: ATN_STAR_LOOP_BACK\n    });\n    entry.loopback = loop;\n    loopEnd.loopback = loop;\n    epsilon(entry, start); // loop enter edge (alt 2)\n    epsilon(entry, loopEnd); // bypass loop edge (alt 1)\n    epsilon(end, loop); // block end hits loop back\n    if (sep !== undefined) {\n        epsilon(loop, loopEnd); // end loop\n        // loop back to start of handle using separator\n        epsilon(loop, sep.left);\n        epsilon(sep.right, start);\n    }\n    else {\n        epsilon(loop, entry); // loop back to entry/exit decision\n    }\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\n    return {\n        left: entry,\n        right: loopEnd\n    };\n}\nfunction optional(atn, rule, optional, handle) {\n    const start = handle.left;\n    const end = handle.right;\n    epsilon(start, end);\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\n    return handle;\n}\nfunction defineDecisionState(atn, state) {\n    atn.decisionStates.push(state);\n    state.decision = atn.decisionStates.length - 1;\n    return state.decision;\n}\nfunction makeAlts(atn, rule, start, production, ...alts) {\n    const end = newState(atn, rule, production, {\n        type: ATN_BLOCK_END,\n        start\n    });\n    start.end = end;\n    for (const alt of alts) {\n        if (alt !== undefined) {\n            // hook alts up to decision block\n            epsilon(start, alt.left);\n            epsilon(alt.right, end);\n        }\n        else {\n            epsilon(start, end);\n        }\n    }\n    const handle = {\n        left: start,\n        right: end\n    };\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start;\n    return handle;\n}\nfunction getProdType(production) {\n    if (production instanceof Alternation) {\n        return 'Alternation';\n    }\n    else if (production instanceof Option) {\n        return 'Option';\n    }\n    else if (production instanceof Repetition) {\n        return 'Repetition';\n    }\n    else if (production instanceof RepetitionWithSeparator) {\n        return 'RepetitionWithSeparator';\n    }\n    else if (production instanceof RepetitionMandatory) {\n        return 'RepetitionMandatory';\n    }\n    else if (production instanceof RepetitionMandatoryWithSeparator) {\n        return 'RepetitionMandatoryWithSeparator';\n    }\n    else {\n        throw new Error('Invalid production type encountered');\n    }\n}\nfunction makeBlock(atn, alts) {\n    const altsLength = alts.length;\n    for (let i = 0; i < altsLength - 1; i++) {\n        const handle = alts[i];\n        let transition;\n        if (handle.left.transitions.length === 1) {\n            transition = handle.left.transitions[0];\n        }\n        const isRuleTransition = transition instanceof RuleTransition;\n        const ruleTransition = transition;\n        const next = alts[i + 1].left;\n        if (handle.left.type === ATN_BASIC &&\n            handle.right.type === ATN_BASIC &&\n            transition !== undefined &&\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\n                transition.target === handle.right)) {\n            // we can avoid epsilon edge to next element\n            if (isRuleTransition) {\n                ruleTransition.followState = next;\n            }\n            else {\n                transition.target = next;\n            }\n            removeState(atn, handle.right); // we skipped over this state\n        }\n        else {\n            // need epsilon if previous block's right end node is complex\n            epsilon(handle.right, next);\n        }\n    }\n    const first = alts[0];\n    const last = alts[altsLength - 1];\n    return {\n        left: first.left,\n        right: last.right\n    };\n}\nfunction tokenRef(atn, rule, tokenType, production) {\n    const left = newState(atn, rule, production, {\n        type: ATN_BASIC\n    });\n    const right = newState(atn, rule, production, {\n        type: ATN_BASIC\n    });\n    addTransition(left, new AtomTransition(right, tokenType));\n    return {\n        left,\n        right\n    };\n}\nfunction ruleRef(atn, currentRule, nonTerminal) {\n    const rule = nonTerminal.referencedRule;\n    const start = atn.ruleToStartState.get(rule);\n    const left = newState(atn, currentRule, nonTerminal, {\n        type: ATN_BASIC\n    });\n    const right = newState(atn, currentRule, nonTerminal, {\n        type: ATN_BASIC\n    });\n    const call = new RuleTransition(start, rule, right);\n    addTransition(left, call);\n    return {\n        left,\n        right\n    };\n}\nfunction buildRuleHandle(atn, rule, block) {\n    const start = atn.ruleToStartState.get(rule);\n    epsilon(start, block.left);\n    const stop = atn.ruleToStopState.get(rule);\n    epsilon(block.right, stop);\n    const handle = {\n        left: start,\n        right: stop\n    };\n    return handle;\n}\nfunction epsilon(a, b) {\n    const transition = new EpsilonTransition(b);\n    addTransition(a, transition);\n}\nfunction newState(atn, rule, production, partial) {\n    const t = Object.assign({ atn,\n        production, epsilonOnlyTransitions: false, rule, transitions: [], nextTokenWithinRule: [], stateNumber: atn.states.length }, partial);\n    atn.states.push(t);\n    return t;\n}\nfunction addTransition(state, transition) {\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\n    // Because they are never mixed, only setting the property for the first transition is fine\n    if (state.transitions.length === 0) {\n        state.epsilonOnlyTransitions = transition.isEpsilon();\n    }\n    state.transitions.push(transition);\n}\nfunction removeState(atn, state) {\n    atn.states.splice(atn.states.indexOf(state), 1);\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport map from \"lodash-es/map.js\";\nexport const DFA_ERROR = {};\nexport class ATNConfigSet {\n    constructor() {\n        this.map = {};\n        this.configs = [];\n    }\n    get size() {\n        return this.configs.length;\n    }\n    finalize() {\n        // Empties the map to free up memory\n        this.map = {};\n    }\n    add(config) {\n        const key = getATNConfigKey(config);\n        // Only add configs which don't exist in our map already\n        // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\n        if (!(key in this.map)) {\n            this.map[key] = this.configs.length;\n            this.configs.push(config);\n        }\n    }\n    get elements() {\n        return this.configs;\n    }\n    get alts() {\n        return map(this.configs, (e) => e.alt);\n    }\n    get key() {\n        let value = \"\";\n        for (const k in this.map) {\n            value += k + \":\";\n        }\n        return value;\n    }\n}\nexport function getATNConfigKey(config, alt = true) {\n    return `${alt ? `a${config.alt}` : \"\"}s${config.state.stateNumber}:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`;\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { tokenMatcher, tokenLabel, NonTerminal, Alternation, Option, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Repetition, Terminal, LLkLookaheadStrategy, getLookaheadPaths } from \"chevrotain\";\nimport { ATN_RULE_STOP, AtomTransition, buildATNKey, createATN, EpsilonTransition, RuleTransition } from \"./atn.js\";\nimport { ATNConfigSet, DFA_ERROR, getATNConfigKey } from \"./dfa.js\";\nimport min from \"lodash-es/min.js\";\nimport flatMap from \"lodash-es/flatMap.js\";\nimport uniqBy from \"lodash-es/uniqBy.js\";\nimport map from \"lodash-es/map.js\";\nimport flatten from \"lodash-es/flatten.js\";\nimport forEach from \"lodash-es/forEach.js\";\nimport isEmpty from \"lodash-es/isEmpty.js\";\nimport reduce from \"lodash-es/reduce.js\";\nfunction createDFACache(startState, decision) {\n    const map = {};\n    return (predicateSet) => {\n        const key = predicateSet.toString();\n        let existing = map[key];\n        if (existing !== undefined) {\n            return existing;\n        }\n        else {\n            existing = {\n                atnStartState: startState,\n                decision,\n                states: {}\n            };\n            map[key] = existing;\n            return existing;\n        }\n    };\n}\nclass PredicateSet {\n    constructor() {\n        this.predicates = [];\n    }\n    is(index) {\n        return index >= this.predicates.length || this.predicates[index];\n    }\n    set(index, value) {\n        this.predicates[index] = value;\n    }\n    toString() {\n        let value = \"\";\n        const size = this.predicates.length;\n        for (let i = 0; i < size; i++) {\n            value += this.predicates[i] === true ? \"1\" : \"0\";\n        }\n        return value;\n    }\n}\nconst EMPTY_PREDICATES = new PredicateSet();\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\n    constructor(options) {\n        var _a;\n        super();\n        this.logging = (_a = options === null || options === void 0 ? void 0 : options.logging) !== null && _a !== void 0 ? _a : ((message) => console.log(message));\n    }\n    initialize(options) {\n        this.atn = createATN(options.rules);\n        this.dfas = initATNSimulator(this.atn);\n    }\n    validateAmbiguousAlternationAlternatives() {\n        return [];\n    }\n    validateEmptyOrAlternatives() {\n        return [];\n    }\n    buildLookaheadForAlternation(options) {\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\n        const dfas = this.dfas;\n        const logging = this.logging;\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\n        const decisionState = this.atn.decisionMap[key];\n        const decisionIndex = decisionState.decision;\n        const partialAlts = map(getLookaheadPaths({\n            maxLookahead: 1,\n            occurrence: prodOccurrence,\n            prodType: \"Alternation\",\n            rule: rule\n        }), (currAlt) => map(currAlt, (path) => path[0]));\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\n            const choiceToAlt = reduce(partialAlts, (result, currAlt, idx) => {\n                forEach(currAlt, (currTokType) => {\n                    if (currTokType) {\n                        result[currTokType.tokenTypeIdx] = idx;\n                        forEach(currTokType.categoryMatches, (currExtendingType) => {\n                            result[currExtendingType] = idx;\n                        });\n                    }\n                });\n                return result;\n            }, {});\n            if (hasPredicates) {\n                return function (orAlts) {\n                    var _a;\n                    const nextToken = this.LA(1);\n                    const prediction = choiceToAlt[nextToken.tokenTypeIdx];\n                    if (orAlts !== undefined && prediction !== undefined) {\n                        const gate = (_a = orAlts[prediction]) === null || _a === void 0 ? void 0 : _a.GATE;\n                        if (gate !== undefined && gate.call(this) === false) {\n                            return undefined;\n                        }\n                    }\n                    return prediction;\n                };\n            }\n            else {\n                return function () {\n                    const nextToken = this.LA(1);\n                    return choiceToAlt[nextToken.tokenTypeIdx];\n                };\n            }\n        }\n        else if (hasPredicates) {\n            return function (orAlts) {\n                const predicates = new PredicateSet();\n                const length = orAlts === undefined ? 0 : orAlts.length;\n                for (let i = 0; i < length; i++) {\n                    const gate = orAlts === null || orAlts === void 0 ? void 0 : orAlts[i].GATE;\n                    predicates.set(i, gate === undefined || gate.call(this));\n                }\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\n                return typeof result === 'number' ? result : undefined;\n            };\n        }\n        else {\n            return function () {\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\n                return typeof result === 'number' ? result : undefined;\n            };\n        }\n    }\n    buildLookaheadForOptional(options) {\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\n        const dfas = this.dfas;\n        const logging = this.logging;\n        const key = buildATNKey(rule, prodType, prodOccurrence);\n        const decisionState = this.atn.decisionMap[key];\n        const decisionIndex = decisionState.decision;\n        const alts = map(getLookaheadPaths({\n            maxLookahead: 1,\n            occurrence: prodOccurrence,\n            prodType,\n            rule\n        }), (e) => {\n            return map(e, (g) => g[0]);\n        });\n        if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\n            const alt = alts[0];\n            const singleTokensTypes = flatten(alt);\n            if (singleTokensTypes.length === 1 &&\n                isEmpty(singleTokensTypes[0].categoryMatches)) {\n                const expectedTokenType = singleTokensTypes[0];\n                const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n                return function () {\n                    return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n                };\n            }\n            else {\n                const choiceToAlt = reduce(singleTokensTypes, (result, currTokType) => {\n                    if (currTokType !== undefined) {\n                        result[currTokType.tokenTypeIdx] = true;\n                        forEach(currTokType.categoryMatches, (currExtendingType) => {\n                            result[currExtendingType] = true;\n                        });\n                    }\n                    return result;\n                }, {});\n                return function () {\n                    const nextToken = this.LA(1);\n                    return choiceToAlt[nextToken.tokenTypeIdx] === true;\n                };\n            }\n        }\n        return function () {\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\n            return typeof result === \"object\" ? false : result === 0;\n        };\n    }\n}\nfunction isLL1Sequence(sequences, allowEmpty = true) {\n    const fullSet = new Set();\n    for (const alt of sequences) {\n        const altSet = new Set();\n        for (const tokType of alt) {\n            if (tokType === undefined) {\n                if (allowEmpty) {\n                    // Epsilon production encountered\n                    break;\n                }\n                else {\n                    return false;\n                }\n            }\n            const indices = [tokType.tokenTypeIdx].concat(tokType.categoryMatches);\n            for (const index of indices) {\n                if (fullSet.has(index)) {\n                    if (!altSet.has(index)) {\n                        return false;\n                    }\n                }\n                else {\n                    fullSet.add(index);\n                    altSet.add(index);\n                }\n            }\n        }\n    }\n    return true;\n}\nfunction initATNSimulator(atn) {\n    const decisionLength = atn.decisionStates.length;\n    const decisionToDFA = Array(decisionLength);\n    for (let i = 0; i < decisionLength; i++) {\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i);\n    }\n    return decisionToDFA;\n}\nfunction adaptivePredict(dfaCaches, decision, predicateSet, logging) {\n    const dfa = dfaCaches[decision](predicateSet);\n    let start = dfa.start;\n    if (start === undefined) {\n        const closure = computeStartState(dfa.atnStartState);\n        start = addDFAState(dfa, newDFAState(closure));\n        dfa.start = start;\n    }\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging]);\n    return alt;\n}\nfunction performLookahead(dfa, s0, predicateSet, logging) {\n    let previousD = s0;\n    let i = 1;\n    const path = [];\n    let t = this.LA(i++);\n    while (true) {\n        let d = getExistingTargetState(previousD, t);\n        if (d === undefined) {\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging]);\n        }\n        if (d === DFA_ERROR) {\n            return buildAdaptivePredictError(path, previousD, t);\n        }\n        if (d.isAcceptState === true) {\n            return d.prediction;\n        }\n        previousD = d;\n        path.push(t);\n        t = this.LA(i++);\n    }\n}\nfunction computeLookaheadTarget(dfa, previousD, token, lookahead, predicateSet, logging) {\n    const reach = computeReachSet(previousD.configs, token, predicateSet);\n    if (reach.size === 0) {\n        addDFAEdge(dfa, previousD, token, DFA_ERROR);\n        return DFA_ERROR;\n    }\n    let newState = newDFAState(reach);\n    const predictedAlt = getUniqueAlt(reach, predicateSet);\n    if (predictedAlt !== undefined) {\n        newState.isAcceptState = true;\n        newState.prediction = predictedAlt;\n        newState.configs.uniqueAlt = predictedAlt;\n    }\n    else if (hasConflictTerminatingPrediction(reach)) {\n        const prediction = min(reach.alts);\n        newState.isAcceptState = true;\n        newState.prediction = prediction;\n        newState.configs.uniqueAlt = prediction;\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging]);\n    }\n    newState = addDFAEdge(dfa, previousD, token, newState);\n    return newState;\n}\nfunction reportLookaheadAmbiguity(dfa, lookahead, ambiguityIndices, logging) {\n    const prefixPath = [];\n    for (let i = 1; i <= lookahead; i++) {\n        prefixPath.push(this.LA(i).tokenType);\n    }\n    const atnState = dfa.atnStartState;\n    const topLevelRule = atnState.rule;\n    const production = atnState.production;\n    const message = buildAmbiguityError({\n        topLevelRule,\n        ambiguityIndices,\n        production,\n        prefixPath\n    });\n    logging(message);\n}\nfunction buildAmbiguityError(options) {\n    const pathMsg = map(options.prefixPath, (currtok) => tokenLabel(currtok)).join(\", \");\n    const occurrence = options.production.idx === 0 ? \"\" : options.production.idx;\n    let currMessage = `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\", \")}> in <${getProductionDslName(options.production)}${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n    currMessage =\n        currMessage +\n            `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n            `For Further details.`;\n    return currMessage;\n}\nfunction getProductionDslName(prod) {\n    if (prod instanceof NonTerminal) {\n        return \"SUBRULE\";\n    }\n    else if (prod instanceof Option) {\n        return \"OPTION\";\n    }\n    else if (prod instanceof Alternation) {\n        return \"OR\";\n    }\n    else if (prod instanceof RepetitionMandatory) {\n        return \"AT_LEAST_ONE\";\n    }\n    else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        return \"AT_LEAST_ONE_SEP\";\n    }\n    else if (prod instanceof RepetitionWithSeparator) {\n        return \"MANY_SEP\";\n    }\n    else if (prod instanceof Repetition) {\n        return \"MANY\";\n    }\n    else if (prod instanceof Terminal) {\n        return \"CONSUME\";\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction buildAdaptivePredictError(path, previous, current) {\n    const nextTransitions = flatMap(previous.configs.elements, (e) => e.state.transitions);\n    const nextTokenTypes = uniqBy(nextTransitions\n        .filter((e) => e instanceof AtomTransition)\n        .map((e) => e.tokenType), (e) => e.tokenTypeIdx);\n    return {\n        actualToken: current,\n        possibleTokenTypes: nextTokenTypes,\n        tokenPath: path\n    };\n}\nfunction getExistingTargetState(state, token) {\n    return state.edges[token.tokenTypeIdx];\n}\nfunction computeReachSet(configs, token, predicateSet) {\n    const intermediate = new ATNConfigSet();\n    const skippedStopStates = [];\n    for (const c of configs.elements) {\n        if (predicateSet.is(c.alt) === false) {\n            continue;\n        }\n        if (c.state.type === ATN_RULE_STOP) {\n            skippedStopStates.push(c);\n            continue;\n        }\n        const transitionLength = c.state.transitions.length;\n        for (let i = 0; i < transitionLength; i++) {\n            const transition = c.state.transitions[i];\n            const target = getReachableTarget(transition, token);\n            if (target !== undefined) {\n                intermediate.add({\n                    state: target,\n                    alt: c.alt,\n                    stack: c.stack\n                });\n            }\n        }\n    }\n    let reach;\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\n        reach = intermediate;\n    }\n    if (reach === undefined) {\n        reach = new ATNConfigSet();\n        for (const c of intermediate.elements) {\n            closure(c, reach);\n        }\n    }\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\n        for (const c of skippedStopStates) {\n            reach.add(c);\n        }\n    }\n    return reach;\n}\nfunction getReachableTarget(transition, token) {\n    if (transition instanceof AtomTransition &&\n        tokenMatcher(token, transition.tokenType)) {\n        return transition.target;\n    }\n    return undefined;\n}\nfunction getUniqueAlt(configs, predicateSet) {\n    let alt;\n    for (const c of configs.elements) {\n        if (predicateSet.is(c.alt) === true) {\n            if (alt === undefined) {\n                alt = c.alt;\n            }\n            else if (alt !== c.alt) {\n                return undefined;\n            }\n        }\n    }\n    return alt;\n}\nfunction newDFAState(closure) {\n    return {\n        configs: closure,\n        edges: {},\n        isAcceptState: false,\n        prediction: -1\n    };\n}\nfunction addDFAEdge(dfa, from, token, to) {\n    to = addDFAState(dfa, to);\n    from.edges[token.tokenTypeIdx] = to;\n    return to;\n}\nfunction addDFAState(dfa, state) {\n    if (state === DFA_ERROR) {\n        return state;\n    }\n    // Repetitions have the same config set\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\n    const mapKey = state.configs.key;\n    const existing = dfa.states[mapKey];\n    if (existing !== undefined) {\n        return existing;\n    }\n    state.configs.finalize();\n    dfa.states[mapKey] = state;\n    return state;\n}\nfunction computeStartState(atnState) {\n    const configs = new ATNConfigSet();\n    const numberOfTransitions = atnState.transitions.length;\n    for (let i = 0; i < numberOfTransitions; i++) {\n        const target = atnState.transitions[i].target;\n        const config = {\n            state: target,\n            alt: i,\n            stack: []\n        };\n        closure(config, configs);\n    }\n    return configs;\n}\nfunction closure(config, configs) {\n    const p = config.state;\n    if (p.type === ATN_RULE_STOP) {\n        if (config.stack.length > 0) {\n            const atnStack = [...config.stack];\n            const followState = atnStack.pop();\n            const followConfig = {\n                state: followState,\n                alt: config.alt,\n                stack: atnStack\n            };\n            closure(followConfig, configs);\n        }\n        else {\n            // Dipping into outer context, simply add the config\n            // This will stop computation once every config is at the rule stop state\n            configs.add(config);\n        }\n        return;\n    }\n    if (!p.epsilonOnlyTransitions) {\n        configs.add(config);\n    }\n    const transitionLength = p.transitions.length;\n    for (let i = 0; i < transitionLength; i++) {\n        const transition = p.transitions[i];\n        const c = getEpsilonTarget(config, transition);\n        if (c !== undefined) {\n            closure(c, configs);\n        }\n    }\n}\nfunction getEpsilonTarget(config, transition) {\n    if (transition instanceof EpsilonTransition) {\n        return {\n            state: transition.target,\n            alt: config.alt,\n            stack: config.stack\n        };\n    }\n    else if (transition instanceof RuleTransition) {\n        const stack = [...config.stack, transition.followState];\n        return {\n            state: transition.target,\n            alt: config.alt,\n            stack\n        };\n    }\n    return undefined;\n}\nfunction hasConfigInRuleStopState(configs) {\n    for (const c of configs.elements) {\n        if (c.state.type === ATN_RULE_STOP) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction allConfigsInRuleStopStates(configs) {\n    for (const c of configs.elements) {\n        if (c.state.type !== ATN_RULE_STOP) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction hasConflictTerminatingPrediction(configs) {\n    if (allConfigsInRuleStopStates(configs)) {\n        return true;\n    }\n    const altSets = getConflictingAltSets(configs.elements);\n    const heuristic = hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets);\n    return heuristic;\n}\nfunction getConflictingAltSets(configs) {\n    const configToAlts = new Map();\n    for (const c of configs) {\n        const key = getATNConfigKey(c, false);\n        let alts = configToAlts.get(key);\n        if (alts === undefined) {\n            alts = {};\n            configToAlts.set(key, alts);\n        }\n        alts[c.alt] = true;\n    }\n    return configToAlts;\n}\nfunction hasConflictingAltSet(altSets) {\n    for (const value of Array.from(altSets.values())) {\n        if (Object.keys(value).length > 1) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction hasStateAssociatedWithOneAlt(altSets) {\n    for (const value of Array.from(altSets.values())) {\n        if (Object.keys(value).length === 1) {\n            return true;\n        }\n    }\n    return false;\n}\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Position } from 'vscode-languageserver-types';\nimport { tokenToRange } from '../utils/cst-utils.js';\nexport class CstNodeBuilder {\n    constructor() {\n        this.nodeStack = [];\n    }\n    get current() {\n        var _a;\n        return (_a = this.nodeStack[this.nodeStack.length - 1]) !== null && _a !== void 0 ? _a : this.rootNode;\n    }\n    buildRootNode(input) {\n        this.rootNode = new RootCstNodeImpl(input);\n        this.rootNode.root = this.rootNode;\n        this.nodeStack = [this.rootNode];\n        return this.rootNode;\n    }\n    buildCompositeNode(feature) {\n        const compositeNode = new CompositeCstNodeImpl();\n        compositeNode.grammarSource = feature;\n        compositeNode.root = this.rootNode;\n        this.current.content.push(compositeNode);\n        this.nodeStack.push(compositeNode);\n        return compositeNode;\n    }\n    buildLeafNode(token, feature) {\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, !feature);\n        leafNode.grammarSource = feature;\n        leafNode.root = this.rootNode;\n        this.current.content.push(leafNode);\n        return leafNode;\n    }\n    removeNode(node) {\n        const parent = node.container;\n        if (parent) {\n            const index = parent.content.indexOf(node);\n            if (index >= 0) {\n                parent.content.splice(index, 1);\n            }\n        }\n    }\n    addHiddenNodes(tokens) {\n        const nodes = [];\n        for (const token of tokens) {\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\n            leafNode.root = this.rootNode;\n            nodes.push(leafNode);\n        }\n        let current = this.current;\n        let added = false;\n        // If we are within a composite node, we add the hidden nodes to the content\n        if (current.content.length > 0) {\n            current.content.push(...nodes);\n            return;\n        }\n        // Otherwise we are at a newly created node\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\n        while (current.container) {\n            const index = current.container.content.indexOf(current);\n            if (index > 0) {\n                // Add the hidden nodes before the current node\n                current.container.content.splice(index, 0, ...nodes);\n                added = true;\n                break;\n            }\n            current = current.container;\n        }\n        // If we arrive at the root node, we add the hidden nodes at the beginning\n        // This is the case if the hidden nodes are the first nodes in the tree\n        if (!added) {\n            this.rootNode.content.unshift(...nodes);\n        }\n    }\n    construct(item) {\n        const current = this.current;\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\n        // Only if the $type is a string, we actually assign the element\n        if (typeof item.$type === 'string') {\n            this.current.astNode = item;\n        }\n        item.$cstNode = current;\n        const node = this.nodeStack.pop();\n        // Empty composite nodes are not valid\n        // Simply remove the node from the tree\n        if ((node === null || node === void 0 ? void 0 : node.content.length) === 0) {\n            this.removeNode(node);\n        }\n    }\n}\nexport class AbstractCstNode {\n    /** @deprecated use `container` instead. */\n    get parent() {\n        return this.container;\n    }\n    /** @deprecated use `grammarSource` instead. */\n    get feature() {\n        return this.grammarSource;\n    }\n    get hidden() {\n        return false;\n    }\n    get astNode() {\n        var _a, _b;\n        const node = typeof ((_a = this._astNode) === null || _a === void 0 ? void 0 : _a.$type) === 'string' ? this._astNode : (_b = this.container) === null || _b === void 0 ? void 0 : _b.astNode;\n        if (!node) {\n            throw new Error('This node has no associated AST element');\n        }\n        return node;\n    }\n    set astNode(value) {\n        this._astNode = value;\n    }\n    /** @deprecated use `astNode` instead. */\n    get element() {\n        return this.astNode;\n    }\n    get text() {\n        return this.root.fullText.substring(this.offset, this.end);\n    }\n}\nexport class LeafCstNodeImpl extends AbstractCstNode {\n    get offset() {\n        return this._offset;\n    }\n    get length() {\n        return this._length;\n    }\n    get end() {\n        return this._offset + this._length;\n    }\n    get hidden() {\n        return this._hidden;\n    }\n    get tokenType() {\n        return this._tokenType;\n    }\n    get range() {\n        return this._range;\n    }\n    constructor(offset, length, range, tokenType, hidden = false) {\n        super();\n        this._hidden = hidden;\n        this._offset = offset;\n        this._tokenType = tokenType;\n        this._length = length;\n        this._range = range;\n    }\n}\nexport class CompositeCstNodeImpl extends AbstractCstNode {\n    constructor() {\n        super(...arguments);\n        this.content = new CstNodeContainer(this);\n    }\n    /** @deprecated use `content` instead. */\n    get children() {\n        return this.content;\n    }\n    get offset() {\n        var _a, _b;\n        return (_b = (_a = this.firstNonHiddenNode) === null || _a === void 0 ? void 0 : _a.offset) !== null && _b !== void 0 ? _b : 0;\n    }\n    get length() {\n        return this.end - this.offset;\n    }\n    get end() {\n        var _a, _b;\n        return (_b = (_a = this.lastNonHiddenNode) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : 0;\n    }\n    get range() {\n        const firstNode = this.firstNonHiddenNode;\n        const lastNode = this.lastNonHiddenNode;\n        if (firstNode && lastNode) {\n            if (this._rangeCache === undefined) {\n                const { range: firstRange } = firstNode;\n                const { range: lastRange } = lastNode;\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\n            }\n            return this._rangeCache;\n        }\n        else {\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\n        }\n    }\n    get firstNonHiddenNode() {\n        for (const child of this.content) {\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[0];\n    }\n    get lastNonHiddenNode() {\n        for (let i = this.content.length - 1; i >= 0; i--) {\n            const child = this.content[i];\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[this.content.length - 1];\n    }\n}\nclass CstNodeContainer extends Array {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\n    }\n    push(...items) {\n        this.addParents(items);\n        return super.push(...items);\n    }\n    unshift(...items) {\n        this.addParents(items);\n        return super.unshift(...items);\n    }\n    splice(start, count, ...items) {\n        this.addParents(items);\n        return super.splice(start, count, ...items);\n    }\n    addParents(items) {\n        for (const item of items) {\n            item.container = this.parent;\n        }\n    }\n}\nexport class RootCstNodeImpl extends CompositeCstNodeImpl {\n    get text() {\n        return this._text.substring(this.offset, this.end);\n    }\n    get fullText() {\n        return this._text;\n    }\n    constructor(input) {\n        super();\n        this._text = '';\n        this._text = input !== null && input !== void 0 ? input : '';\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\nimport { getExplicitRuleType, isDataTypeRule } from '../utils/grammar-utils.js';\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\nimport { CstNodeBuilder } from './cst-node-builder.js';\nexport const DatatypeSymbol = Symbol('Datatype');\nfunction isDataTypeNode(node) {\n    return node.$type === DatatypeSymbol;\n}\nconst ruleSuffix = '\\u200B';\nconst withRuleSuffix = (name) => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\nexport class AbstractLangiumParser {\n    constructor(services) {\n        this._unorderedGroups = new Map();\n        this.allRules = new Map();\n        this.lexer = services.parser.Lexer;\n        const tokens = this.lexer.definition;\n        const production = services.LanguageMetaData.mode === 'production';\n        this.wrapper = new ChevrotainWrapper(tokens, Object.assign(Object.assign({}, services.parser.ParserConfig), { skipValidations: production, errorMessageProvider: services.parser.ParserErrorMessageProvider }));\n    }\n    alternatives(idx, choices) {\n        this.wrapper.wrapOr(idx, choices);\n    }\n    optional(idx, callback) {\n        this.wrapper.wrapOption(idx, callback);\n    }\n    many(idx, callback) {\n        this.wrapper.wrapMany(idx, callback);\n    }\n    atLeastOne(idx, callback) {\n        this.wrapper.wrapAtLeastOne(idx, callback);\n    }\n    getRule(name) {\n        return this.allRules.get(name);\n    }\n    isRecording() {\n        return this.wrapper.IS_RECORDING;\n    }\n    get unorderedGroups() {\n        return this._unorderedGroups;\n    }\n    getRuleStack() {\n        return this.wrapper.RULE_STACK;\n    }\n    finalize() {\n        this.wrapper.wrapSelfAnalysis();\n    }\n}\nexport class LangiumParser extends AbstractLangiumParser {\n    get current() {\n        return this.stack[this.stack.length - 1];\n    }\n    constructor(services) {\n        super(services);\n        this.nodeBuilder = new CstNodeBuilder();\n        this.stack = [];\n        this.assignmentMap = new Map();\n        this.linker = services.references.Linker;\n        this.converter = services.parser.ValueConverter;\n        this.astReflection = services.shared.AstReflection;\n    }\n    rule(rule, impl) {\n        const type = this.computeRuleType(rule);\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\n        this.allRules.set(rule.name, ruleMethod);\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    computeRuleType(rule) {\n        if (rule.fragment) {\n            return undefined;\n        }\n        else if (isDataTypeRule(rule)) {\n            return DatatypeSymbol;\n        }\n        else {\n            const explicit = getExplicitRuleType(rule);\n            return explicit !== null && explicit !== void 0 ? explicit : rule.name;\n        }\n    }\n    parse(input, options = {}) {\n        this.nodeBuilder.buildRootNode(input);\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\n        this.wrapper.input = lexerResult.tokens;\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\n        if (!ruleMethod) {\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\n        }\n        const result = ruleMethod.call(this.wrapper, {});\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\n        this.unorderedGroups.clear();\n        this.lexerResult = undefined;\n        return {\n            value: result,\n            lexerErrors: lexerResult.errors,\n            lexerReport: lexerResult.report,\n            parserErrors: this.wrapper.errors\n        };\n    }\n    startImplementation($type, implementation) {\n        return (args) => {\n            // Only create a new AST node in case the calling rule is not a fragment rule\n            const createNode = !this.isRecording() && $type !== undefined;\n            if (createNode) {\n                const node = { $type };\n                this.stack.push(node);\n                if ($type === DatatypeSymbol) {\n                    node.value = '';\n                }\n            }\n            let result;\n            try {\n                result = implementation(args);\n            }\n            catch (err) {\n                result = undefined;\n            }\n            if (result === undefined && createNode) {\n                result = this.construct();\n            }\n            return result;\n        };\n    }\n    extractHiddenTokens(token) {\n        const hiddenTokens = this.lexerResult.hidden;\n        if (!hiddenTokens.length) {\n            return [];\n        }\n        const offset = token.startOffset;\n        for (let i = 0; i < hiddenTokens.length; i++) {\n            const token = hiddenTokens[i];\n            if (token.startOffset > offset) {\n                return hiddenTokens.splice(0, i);\n            }\n        }\n        return hiddenTokens.splice(0, hiddenTokens.length);\n    }\n    consume(idx, tokenType, feature) {\n        const token = this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording() && this.isValidToken(token)) {\n            const hiddenTokens = this.extractHiddenTokens(token);\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\n            const { assignment, isCrossRef } = this.getAssignment(feature);\n            const current = this.current;\n            if (assignment) {\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\n            }\n            else if (isDataTypeNode(current)) {\n                let text = token.image;\n                if (!isKeyword(feature)) {\n                    text = this.converter.convert(text, leafNode).toString();\n                }\n                current.value += text;\n            }\n        }\n    }\n    /**\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\n     *\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\n     */\n    isValidToken(token) {\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\n    }\n    subrule(idx, rule, fragment, feature, args) {\n        let cstNode;\n        if (!this.isRecording() && !fragment) {\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\n            // This is intended, as fragment rules only enrich the current AST node\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\n        }\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args);\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\n        }\n    }\n    performSubruleAssignment(result, feature, cstNode) {\n        const { assignment, isCrossRef } = this.getAssignment(feature);\n        if (assignment) {\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\n        }\n        else if (!assignment) {\n            // If we call a subrule without an assignment we either:\n            // 1. append the result of the subrule (data type rule)\n            // 2. override the current object with the newly parsed object\n            // If the current element is an AST node and the result of the subrule\n            // is a data type rule, we can safely discard the results.\n            const current = this.current;\n            if (isDataTypeNode(current)) {\n                current.value += result.toString();\n            }\n            else if (typeof result === 'object' && result) {\n                const object = this.assignWithoutOverride(result, current);\n                const newItem = object;\n                this.stack.pop();\n                this.stack.push(newItem);\n            }\n        }\n    }\n    action($type, action) {\n        if (!this.isRecording()) {\n            let last = this.current;\n            if (action.feature && action.operator) {\n                last = this.construct();\n                this.nodeBuilder.removeNode(last.$cstNode);\n                const node = this.nodeBuilder.buildCompositeNode(action);\n                node.content.push(last.$cstNode);\n                const newItem = { $type };\n                this.stack.push(newItem);\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\n            }\n            else {\n                last.$type = $type;\n            }\n        }\n    }\n    construct() {\n        if (this.isRecording()) {\n            return undefined;\n        }\n        const obj = this.current;\n        linkContentToContainer(obj);\n        this.nodeBuilder.construct(obj);\n        this.stack.pop();\n        if (isDataTypeNode(obj)) {\n            return this.converter.convert(obj.value, obj.$cstNode);\n        }\n        else {\n            assignMandatoryProperties(this.astReflection, obj);\n        }\n        return obj;\n    }\n    getAssignment(feature) {\n        if (!this.assignmentMap.has(feature)) {\n            const assignment = getContainerOfType(feature, isAssignment);\n            this.assignmentMap.set(feature, {\n                assignment: assignment,\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\n            });\n        }\n        return this.assignmentMap.get(feature);\n    }\n    assign(operator, feature, value, cstNode, isCrossRef) {\n        const obj = this.current;\n        let item;\n        if (isCrossRef && typeof value === 'string') {\n            item = this.linker.buildReference(obj, feature, cstNode, value);\n        }\n        else {\n            item = value;\n        }\n        switch (operator) {\n            case '=': {\n                obj[feature] = item;\n                break;\n            }\n            case '?=': {\n                obj[feature] = true;\n                break;\n            }\n            case '+=': {\n                if (!Array.isArray(obj[feature])) {\n                    obj[feature] = [];\n                }\n                obj[feature].push(item);\n            }\n        }\n    }\n    assignWithoutOverride(target, source) {\n        for (const [name, existingValue] of Object.entries(source)) {\n            const newValue = target[name];\n            if (newValue === undefined) {\n                target[name] = existingValue;\n            }\n            else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\n                existingValue.push(...newValue);\n                target[name] = existingValue;\n            }\n        }\n        // The target was parsed from a unassigned subrule\n        // After the subrule construction, it received a cst node\n        // This CST node will later be overriden by the cst node builder\n        // To prevent references to stale AST nodes in the CST,\n        // we need to remove the reference here\n        const targetCstNode = target.$cstNode;\n        if (targetCstNode) {\n            targetCstNode.astNode = undefined;\n            target.$cstNode = undefined;\n        }\n        return target;\n    }\n    get definitionErrors() {\n        return this.wrapper.definitionErrors;\n    }\n}\nexport class AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage(options) {\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\n    }\n    buildNotAllInputParsedMessage(options) {\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\n    }\n    buildNoViableAltMessage(options) {\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\n    }\n    buildEarlyExitMessage(options) {\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\n    }\n}\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage({ expected, actual }) {\n        const expectedMsg = expected.LABEL\n            ? '`' + expected.LABEL + '`'\n            : expected.name.endsWith(':KW')\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\n                : `token of type '${expected.name}'`;\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\n    }\n    buildNotAllInputParsedMessage({ firstRedundant }) {\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\n    }\n}\nexport class LangiumCompletionParser extends AbstractLangiumParser {\n    constructor() {\n        super(...arguments);\n        this.tokens = [];\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    action() {\n        // NOOP\n    }\n    construct() {\n        // NOOP\n        return undefined;\n    }\n    parse(input) {\n        this.resetState();\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\n        this.tokens = tokens.tokens;\n        this.wrapper.input = [...this.tokens];\n        this.mainRule.call(this.wrapper, {});\n        this.unorderedGroups.clear();\n        return {\n            tokens: this.tokens,\n            elementStack: [...this.lastElementStack],\n            tokenIndex: this.nextTokenIndex\n        };\n    }\n    rule(rule, impl) {\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\n        this.allRules.set(rule.name, ruleMethod);\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    resetState() {\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    startImplementation(implementation) {\n        return (args) => {\n            const size = this.keepStackSize();\n            try {\n                implementation(args);\n            }\n            finally {\n                this.resetStackSize(size);\n            }\n        };\n    }\n    removeUnexpectedElements() {\n        this.elementStack.splice(this.stackSize);\n    }\n    keepStackSize() {\n        const size = this.elementStack.length;\n        this.stackSize = size;\n        return size;\n    }\n    resetStackSize(size) {\n        this.removeUnexpectedElements();\n        this.stackSize = size;\n    }\n    consume(idx, tokenType, feature) {\n        this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording()) {\n            this.lastElementStack = [...this.elementStack, feature];\n            this.nextTokenIndex = this.currIdx + 1;\n        }\n    }\n    subrule(idx, rule, fragment, feature, args) {\n        this.before(feature);\n        this.wrapper.wrapSubrule(idx, rule, args);\n        this.after(feature);\n    }\n    before(element) {\n        if (!this.isRecording()) {\n            this.elementStack.push(element);\n        }\n    }\n    after(element) {\n        if (!this.isRecording()) {\n            const index = this.elementStack.lastIndexOf(element);\n            if (index >= 0) {\n                this.elementStack.splice(index);\n            }\n        }\n    }\n    get currIdx() {\n        return this.wrapper.currIdx;\n    }\n}\nconst defaultConfig = {\n    recoveryEnabled: true,\n    nodeLocationTracking: 'full',\n    skipValidations: true,\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\n};\n/**\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\n * This way, we can build the `LangiumParser` as a composition.\n */\nclass ChevrotainWrapper extends EmbeddedActionsParser {\n    constructor(tokens, config) {\n        const useDefaultLookahead = config && 'maxLookahead' in config;\n        super(tokens, Object.assign(Object.assign(Object.assign({}, defaultConfig), { lookaheadStrategy: useDefaultLookahead\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\n                : new LLStarLookaheadStrategy({\n                    // If validations are skipped, don't log the lookahead warnings\n                    logging: config.skipValidations ? () => { } : undefined\n                }) }), config));\n    }\n    get IS_RECORDING() {\n        return this.RECORDING_PHASE;\n    }\n    DEFINE_RULE(name, impl) {\n        return this.RULE(name, impl);\n    }\n    wrapSelfAnalysis() {\n        this.performSelfAnalysis();\n    }\n    wrapConsume(idx, tokenType) {\n        return this.consume(idx, tokenType);\n    }\n    wrapSubrule(idx, rule, args) {\n        return this.subrule(idx, rule, {\n            ARGS: [args]\n        });\n    }\n    wrapOr(idx, choices) {\n        this.or(idx, choices);\n    }\n    wrapOption(idx, callback) {\n        this.option(idx, callback);\n    }\n    wrapMany(idx, callback) {\n        this.many(idx, callback);\n    }\n    wrapAtLeastOne(idx, callback) {\n        this.atLeastOne(idx, callback);\n    }\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { EMPTY_ALT, EOF } from 'chevrotain';\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\nimport { stream } from '../utils/stream.js';\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\nexport function createParser(grammar, parser, tokens) {\n    const parserContext = {\n        parser,\n        tokens,\n        ruleNames: new Map()\n    };\n    buildRules(parserContext, grammar);\n    return parser;\n}\nfunction buildRules(parserContext, grammar) {\n    const reachable = getAllReachableRules(grammar, false);\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\n    for (const rule of parserRules) {\n        const ctx = Object.assign(Object.assign({}, parserContext), { consume: 1, optional: 1, subrule: 1, many: 1, or: 1 });\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\n    }\n}\nfunction buildElement(ctx, element, ignoreGuard = false) {\n    let method;\n    if (isKeyword(element)) {\n        method = buildKeyword(ctx, element);\n    }\n    else if (isAction(element)) {\n        method = buildAction(ctx, element);\n    }\n    else if (isAssignment(element)) {\n        method = buildElement(ctx, element.terminal);\n    }\n    else if (isCrossReference(element)) {\n        method = buildCrossReference(ctx, element);\n    }\n    else if (isRuleCall(element)) {\n        method = buildRuleCall(ctx, element);\n    }\n    else if (isAlternatives(element)) {\n        method = buildAlternatives(ctx, element);\n    }\n    else if (isUnorderedGroup(element)) {\n        method = buildUnorderedGroup(ctx, element);\n    }\n    else if (isGroup(element)) {\n        method = buildGroup(ctx, element);\n    }\n    else if (isEndOfFile(element)) {\n        const idx = ctx.consume++;\n        method = () => ctx.parser.consume(idx, EOF, element);\n    }\n    else {\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\n    }\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\n}\nfunction buildAction(ctx, action) {\n    const actionType = getTypeName(action);\n    return () => ctx.parser.action(actionType, action);\n}\nfunction buildRuleCall(ctx, ruleCall) {\n    const rule = ruleCall.rule.ref;\n    if (isParserRule(rule)) {\n        const idx = ctx.subrule++;\n        const fragment = rule.fragment;\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\n    }\n    else if (isTerminalRule(rule)) {\n        const idx = ctx.consume++;\n        const method = getToken(ctx, rule.name);\n        return () => ctx.parser.consume(idx, method, ruleCall);\n    }\n    else if (!rule) {\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\n    }\n    else {\n        assertUnreachable(rule);\n    }\n}\nfunction buildRuleCallPredicate(rule, namedArgs) {\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\n    return (args) => {\n        const ruleArgs = {};\n        for (let i = 0; i < predicates.length; i++) {\n            const ruleTarget = rule.parameters[i];\n            const predicate = predicates[i];\n            ruleArgs[ruleTarget.name] = predicate(args);\n        }\n        return ruleArgs;\n    };\n}\nfunction buildPredicate(condition) {\n    if (isDisjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) || right(args));\n    }\n    else if (isConjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) && right(args));\n    }\n    else if (isNegation(condition)) {\n        const value = buildPredicate(condition.value);\n        return (args) => !value(args);\n    }\n    else if (isParameterReference(condition)) {\n        const name = condition.parameter.ref.name;\n        return (args) => args !== undefined && args[name] === true;\n    }\n    else if (isBooleanLiteral(condition)) {\n        const value = Boolean(condition.true);\n        return () => value;\n    }\n    assertUnreachable(condition);\n}\nfunction buildAlternatives(ctx, alternatives) {\n    if (alternatives.elements.length === 1) {\n        return buildElement(ctx, alternatives.elements[0]);\n    }\n    else {\n        const methods = [];\n        for (const element of alternatives.elements) {\n            const predicatedMethod = {\n                // Since we handle the guard condition in the alternative already\n                // We can ignore the group guard condition inside\n                ALT: buildElement(ctx, element, true)\n            };\n            const guard = getGuardCondition(element);\n            if (guard) {\n                predicatedMethod.GATE = buildPredicate(guard);\n            }\n            methods.push(predicatedMethod);\n        }\n        const idx = ctx.or++;\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\n            const alt = {\n                ALT: () => method.ALT(args)\n            };\n            const gate = method.GATE;\n            if (gate) {\n                alt.GATE = () => gate(args);\n            }\n            return alt;\n        }));\n    }\n}\nfunction buildUnorderedGroup(ctx, group) {\n    if (group.elements.length === 1) {\n        return buildElement(ctx, group.elements[0]);\n    }\n    const methods = [];\n    for (const element of group.elements) {\n        const predicatedMethod = {\n            // Since we handle the guard condition in the alternative already\n            // We can ignore the group guard condition inside\n            ALT: buildElement(ctx, element, true)\n        };\n        const guard = getGuardCondition(element);\n        if (guard) {\n            predicatedMethod.GATE = buildPredicate(guard);\n        }\n        methods.push(predicatedMethod);\n    }\n    const orIdx = ctx.or++;\n    const idFunc = (groupIdx, lParser) => {\n        const stackId = lParser.getRuleStack().join('-');\n        return `uGroup_${groupIdx}_${stackId}`;\n    };\n    const alternatives = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\n        const alt = { ALT: () => true };\n        const parser = ctx.parser;\n        alt.ALT = () => {\n            method.ALT(args);\n            if (!parser.isRecording()) {\n                const key = idFunc(orIdx, parser);\n                if (!parser.unorderedGroups.get(key)) {\n                    // init after clear state\n                    parser.unorderedGroups.set(key, []);\n                }\n                const groupState = parser.unorderedGroups.get(key);\n                if (typeof (groupState === null || groupState === void 0 ? void 0 : groupState[idx]) === 'undefined') {\n                    // Not accessed yet\n                    groupState[idx] = true;\n                }\n            }\n        };\n        const gate = method.GATE;\n        if (gate) {\n            alt.GATE = () => gate(args);\n        }\n        else {\n            alt.GATE = () => {\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\n                const allow = !(trackedAlternatives === null || trackedAlternatives === void 0 ? void 0 : trackedAlternatives[idx]);\n                return allow;\n            };\n        }\n        return alt;\n    }));\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\n    return (args) => {\n        wrapped(args);\n        if (!ctx.parser.isRecording()) {\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\n        }\n    };\n}\nfunction buildGroup(ctx, group) {\n    const methods = group.elements.map(e => buildElement(ctx, e));\n    return (args) => methods.forEach(method => method(args));\n}\nfunction getGuardCondition(element) {\n    if (isGroup(element)) {\n        return element.guardCondition;\n    }\n    return undefined;\n}\nfunction buildCrossReference(ctx, crossRef, terminal = crossRef.terminal) {\n    if (!terminal) {\n        if (!crossRef.type.ref) {\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\n        }\n        const assignment = findNameAssignment(crossRef.type.ref);\n        const assignTerminal = assignment === null || assignment === void 0 ? void 0 : assignment.terminal;\n        if (!assignTerminal) {\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\n        }\n        return buildCrossReference(ctx, crossRef, assignTerminal);\n    }\n    else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\n        // The terminal is a data type rule here. Everything else will result in a validation error.\n        const rule = terminal.rule.ref;\n        const idx = ctx.subrule++;\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\n    }\n    else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\n        const idx = ctx.consume++;\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\n    }\n    else if (isKeyword(terminal)) {\n        const idx = ctx.consume++;\n        const keyword = getToken(ctx, terminal.value);\n        return () => ctx.parser.consume(idx, keyword, crossRef);\n    }\n    else {\n        throw new Error('Could not build cross reference parser');\n    }\n}\nfunction buildKeyword(ctx, keyword) {\n    const idx = ctx.consume++;\n    const token = ctx.tokens[keyword.value];\n    if (!token) {\n        throw new Error('Could not find token for keyword: ' + keyword.value);\n    }\n    return () => ctx.parser.consume(idx, token, keyword);\n}\nfunction wrap(ctx, guard, method, cardinality) {\n    const gate = guard && buildPredicate(guard);\n    if (!cardinality) {\n        if (gate) {\n            const idx = ctx.or++;\n            return (args) => ctx.parser.alternatives(idx, [\n                {\n                    ALT: () => method(args),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        }\n        else {\n            return method;\n        }\n    }\n    if (cardinality === '*') {\n        const idx = ctx.many++;\n        return (args) => ctx.parser.many(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    }\n    else if (cardinality === '+') {\n        const idx = ctx.many++;\n        if (gate) {\n            const orIdx = ctx.or++;\n            // In the case of a guard condition for the `+` group\n            // We combine it with an empty alternative\n            // If the condition returns true, it needs to parse at least a single iteration\n            // If its false, it is not allowed to parse anything\n            return (args) => ctx.parser.alternatives(orIdx, [\n                {\n                    ALT: () => ctx.parser.atLeastOne(idx, {\n                        DEF: () => method(args)\n                    }),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        }\n        else {\n            return (args) => ctx.parser.atLeastOne(idx, {\n                DEF: () => method(args),\n            });\n        }\n    }\n    else if (cardinality === '?') {\n        const idx = ctx.optional++;\n        return (args) => ctx.parser.optional(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    }\n    else {\n        assertUnreachable(cardinality);\n    }\n}\nfunction getRule(ctx, element) {\n    const name = getRuleName(ctx, element);\n    const rule = ctx.parser.getRule(name);\n    if (!rule)\n        throw new Error(`Rule \"${name}\" not found.\"`);\n    return rule;\n}\nfunction getRuleName(ctx, element) {\n    if (isParserRule(element)) {\n        return element.name;\n    }\n    else if (ctx.ruleNames.has(element)) {\n        return ctx.ruleNames.get(element);\n    }\n    else {\n        let item = element;\n        let parent = item.$container;\n        let ruleName = element.$type;\n        while (!isParserRule(parent)) {\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\n                const index = parent.elements.indexOf(item);\n                ruleName = index.toString() + ':' + ruleName;\n            }\n            item = parent;\n            parent = parent.$container;\n        }\n        const rule = parent;\n        ruleName = rule.name + ':' + ruleName;\n        ctx.ruleNames.set(element, ruleName);\n        return ruleName;\n    }\n}\nfunction getToken(ctx, name) {\n    const token = ctx.tokens[name];\n    if (!token)\n        throw new Error(`Token \"${name}\" not found.\"`);\n    return token;\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Lexer } from 'chevrotain';\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\nimport { streamAllContents } from '../utils/ast-utils.js';\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\nimport { stream } from '../utils/stream.js';\nexport class DefaultTokenBuilder {\n    constructor() {\n        /**\n         * The list of diagnostics stored during the lexing process of a single text.\n         */\n        this.diagnostics = [];\n    }\n    buildTokens(grammar, options) {\n        const reachableRules = stream(getAllReachableRules(grammar, false));\n        const terminalTokens = this.buildTerminalTokens(reachableRules);\n        const tokens = this.buildKeywordTokens(reachableRules, terminalTokens, options);\n        terminalTokens.forEach(terminalToken => {\n            const pattern = terminalToken.PATTERN;\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\n                tokens.unshift(terminalToken);\n            }\n            else {\n                tokens.push(terminalToken);\n            }\n        });\n        // We don't need to add the EOF token explicitly.\n        // It is automatically available at the end of the token stream.\n        return tokens;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flushLexingReport(text) {\n        return { diagnostics: this.popDiagnostics() };\n    }\n    popDiagnostics() {\n        const diagnostics = [...this.diagnostics];\n        this.diagnostics = [];\n        return diagnostics;\n    }\n    buildTerminalTokens(rules) {\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\n    }\n    buildTerminalToken(terminal) {\n        const regex = terminalRegex(terminal);\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\n        const tokenType = {\n            name: terminal.name,\n            PATTERN: pattern,\n        };\n        if (typeof pattern === 'function') {\n            tokenType.LINE_BREAKS = true;\n        }\n        if (terminal.hidden) {\n            // Only skip tokens that are able to accept whitespace\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\n        }\n        return tokenType;\n    }\n    requiresCustomPattern(regex) {\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\n            // Unicode and dotall regexes are not supported by Chevrotain.\n            return true;\n        }\n        else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    regexPatternFunction(regex) {\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\n        return (text, offset) => {\n            stickyRegex.lastIndex = offset;\n            const execResult = stickyRegex.exec(text);\n            return execResult;\n        };\n    }\n    buildKeywordTokens(rules, terminalTokens, options) {\n        return rules\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\n            .filter(isParserRule)\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\n            .distinct(e => e.value).toArray()\n            // Sort keywords by descending length\n            .sort((a, b) => b.value.length - a.value.length)\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options === null || options === void 0 ? void 0 : options.caseInsensitive)));\n    }\n    buildKeywordToken(keyword, terminalTokens, caseInsensitive) {\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\n        const tokenType = {\n            name: keyword.value,\n            PATTERN: keywordPattern,\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\n        };\n        if (typeof keywordPattern === 'function') {\n            tokenType.LINE_BREAKS = true;\n        }\n        return tokenType;\n    }\n    buildKeywordPattern(keyword, caseInsensitive) {\n        return caseInsensitive ?\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\n            keyword.value;\n    }\n    findLongerAlt(keyword, terminalTokens) {\n        return terminalTokens.reduce((longerAlts, token) => {\n            const pattern = token === null || token === void 0 ? void 0 : token.PATTERN;\n            if ((pattern === null || pattern === void 0 ? void 0 : pattern.source) && partialMatches('^' + pattern.source + '$', keyword.value)) {\n                longerAlts.push(token);\n            }\n            return longerAlts;\n        }, []);\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\nexport class DefaultValueConverter {\n    convert(input, cstNode) {\n        let feature = cstNode.grammarSource;\n        if (isCrossReference(feature)) {\n            feature = getCrossReferenceTerminal(feature);\n        }\n        if (isRuleCall(feature)) {\n            const rule = feature.rule.ref;\n            if (!rule) {\n                throw new Error('This cst node was not parsed by a rule.');\n            }\n            return this.runConverter(rule, input, cstNode);\n        }\n        return input;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    runConverter(rule, input, cstNode) {\n        var _a;\n        switch (rule.name.toUpperCase()) {\n            case 'INT': return ValueConverter.convertInt(input);\n            case 'STRING': return ValueConverter.convertString(input);\n            case 'ID': return ValueConverter.convertID(input);\n        }\n        switch ((_a = getRuleType(rule)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) {\n            case 'number': return ValueConverter.convertNumber(input);\n            case 'boolean': return ValueConverter.convertBoolean(input);\n            case 'bigint': return ValueConverter.convertBigint(input);\n            case 'date': return ValueConverter.convertDate(input);\n            default: return input;\n        }\n    }\n}\nexport var ValueConverter;\n(function (ValueConverter) {\n    function convertString(input) {\n        let result = '';\n        for (let i = 1; i < input.length - 1; i++) {\n            const c = input.charAt(i);\n            if (c === '\\\\') {\n                const c1 = input.charAt(++i);\n                result += convertEscapeCharacter(c1);\n            }\n            else {\n                result += c;\n            }\n        }\n        return result;\n    }\n    ValueConverter.convertString = convertString;\n    function convertEscapeCharacter(char) {\n        switch (char) {\n            case 'b': return '\\b';\n            case 'f': return '\\f';\n            case 'n': return '\\n';\n            case 'r': return '\\r';\n            case 't': return '\\t';\n            case 'v': return '\\v';\n            case '0': return '\\0';\n            default: return char;\n        }\n    }\n    function convertID(input) {\n        if (input.charAt(0) === '^') {\n            return input.substring(1);\n        }\n        else {\n            return input;\n        }\n    }\n    ValueConverter.convertID = convertID;\n    function convertInt(input) {\n        return parseInt(input);\n    }\n    ValueConverter.convertInt = convertInt;\n    function convertBigint(input) {\n        return BigInt(input);\n    }\n    ValueConverter.convertBigint = convertBigint;\n    function convertDate(input) {\n        return new Date(input);\n    }\n    ValueConverter.convertDate = convertDate;\n    function convertNumber(input) {\n        return Number(input);\n    }\n    ValueConverter.convertNumber = convertNumber;\n    function convertBoolean(input) {\n        return input.toLowerCase() === 'true';\n    }\n    ValueConverter.convertBoolean = convertBoolean;\n})(ValueConverter || (ValueConverter = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\n/**\n * Delays the execution of the current code to the next tick of the event loop.\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\n */\nexport function delayNextTick() {\n    return new Promise(resolve => {\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\n        // Using `setTimeout` of the browser API accomplishes the same result.\n        if (typeof setImmediate === 'undefined') {\n            setTimeout(resolve, 0);\n        }\n        else {\n            setImmediate(resolve);\n        }\n    });\n}\nlet lastTick = 0;\nlet globalInterruptionPeriod = 10;\n/**\n * Reset the global interruption period and create a cancellation token source.\n */\nexport function startCancelableOperation() {\n    lastTick = performance.now();\n    return new CancellationTokenSource();\n}\n/**\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\n * The default value is 10ms.\n */\nexport function setInterruptionPeriod(period) {\n    globalInterruptionPeriod = period;\n}\n/**\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\n * this symbol as rejection reason.\n */\nexport const OperationCancelled = Symbol('OperationCancelled');\n/**\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\n * has been cancelled.\n */\nexport function isOperationCancelled(err) {\n    return err === OperationCancelled;\n}\n/**\n * This function does two things:\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\n *\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\n * the promise) to avoid that event being exposed as an error.\n */\nexport async function interruptAndCheck(token) {\n    if (token === CancellationToken.None) {\n        // Early exit in case cancellation was disabled by the caller\n        return;\n    }\n    const current = performance.now();\n    if (current - lastTick >= globalInterruptionPeriod) {\n        lastTick = current;\n        await delayNextTick();\n        // prevent calling delayNextTick every iteration of loop\n        // where delayNextTick takes up the majority or all of the\n        // globalInterruptionPeriod itself\n        lastTick = performance.now();\n    }\n    if (token.isCancellationRequested) {\n        throw OperationCancelled;\n    }\n}\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nexport class Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (arg) => {\n                resolve(arg);\n                return this;\n            };\n            this.reject = (err) => {\n                reject(err);\n                return this;\n            };\n        });\n    }\n}\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","var LIB;(()=>{\"use strict\";var t={470:t=>{function e(t){if(\"string\"!=typeof t)throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(t))}function r(t,e){for(var r,n=\"\",i=0,o=-1,s=0,h=0;h<=t.length;++h){if(h<t.length)r=t.charCodeAt(h);else{if(47===r)break;r=47}if(47===r){if(o===h-1||1===s);else if(o!==h-1&&2===s){if(n.length<2||2!==i||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var a=n.lastIndexOf(\"/\");if(a!==n.length-1){-1===a?(n=\"\",i=0):i=(n=n.slice(0,a)).length-1-n.lastIndexOf(\"/\"),o=h,s=0;continue}}else if(2===n.length||1===n.length){n=\"\",i=0,o=h,s=0;continue}e&&(n.length>0?n+=\"/..\":n=\"..\",i=2)}else n.length>0?n+=\"/\"+t.slice(o+1,h):n=t.slice(o+1,h),i=h-o-1;o=h,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var t,n=\"\",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var s;o>=0?s=arguments[o]:(void 0===t&&(t=process.cwd()),s=t),e(s),0!==s.length&&(n=s+\"/\"+n,i=47===s.charCodeAt(0))}return n=r(n,!i),i?n.length>0?\"/\"+n:\"/\":n.length>0?n:\".\"},normalize:function(t){if(e(t),0===t.length)return\".\";var n=47===t.charCodeAt(0),i=47===t.charCodeAt(t.length-1);return 0!==(t=r(t,!n)).length||n||(t=\".\"),t.length>0&&i&&(t+=\"/\"),n?\"/\"+t:t},isAbsolute:function(t){return e(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return\".\";for(var t,r=0;r<arguments.length;++r){var i=arguments[r];e(i),i.length>0&&(void 0===t?t=i:t+=\"/\"+i)}return void 0===t?\".\":n.normalize(t)},relative:function(t,r){if(e(t),e(r),t===r)return\"\";if((t=n.resolve(t))===(r=n.resolve(r)))return\"\";for(var i=1;i<t.length&&47===t.charCodeAt(i);++i);for(var o=t.length,s=o-i,h=1;h<r.length&&47===r.charCodeAt(h);++h);for(var a=r.length-h,c=s<a?s:a,f=-1,u=0;u<=c;++u){if(u===c){if(a>c){if(47===r.charCodeAt(h+u))return r.slice(h+u+1);if(0===u)return r.slice(h+u)}else s>c&&(47===t.charCodeAt(i+u)?f=u:0===u&&(f=0));break}var l=t.charCodeAt(i+u);if(l!==r.charCodeAt(h+u))break;47===l&&(f=u)}var g=\"\";for(u=i+f+1;u<=o;++u)u!==o&&47!==t.charCodeAt(u)||(0===g.length?g+=\"..\":g+=\"/..\");return g.length>0?g+r.slice(h+f):(h+=f,47===r.charCodeAt(h)&&++h,r.slice(h))},_makeLong:function(t){return t},dirname:function(t){if(e(t),0===t.length)return\".\";for(var r=t.charCodeAt(0),n=47===r,i=-1,o=!0,s=t.length-1;s>=1;--s)if(47===(r=t.charCodeAt(s))){if(!o){i=s;break}}else o=!1;return-1===i?n?\"/\":\".\":n&&1===i?\"//\":t.slice(0,i)},basename:function(t,r){if(void 0!==r&&\"string\"!=typeof r)throw new TypeError('\"ext\" argument must be a string');e(t);var n,i=0,o=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return\"\";var h=r.length-1,a=-1;for(n=t.length-1;n>=0;--n){var c=t.charCodeAt(n);if(47===c){if(!s){i=n+1;break}}else-1===a&&(s=!1,a=n+1),h>=0&&(c===r.charCodeAt(h)?-1==--h&&(o=n):(h=-1,o=a))}return i===o?o=a:-1===o&&(o=t.length),t.slice(i,o)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!s){i=n+1;break}}else-1===o&&(s=!1,o=n+1);return-1===o?\"\":t.slice(i,o)},extname:function(t){e(t);for(var r=-1,n=0,i=-1,o=!0,s=0,h=t.length-1;h>=0;--h){var a=t.charCodeAt(h);if(47!==a)-1===i&&(o=!1,i=h+1),46===a?-1===r?r=h:1!==s&&(s=1):-1!==r&&(s=-1);else if(!o){n=h+1;break}}return-1===r||-1===i||0===s||1===s&&r===i-1&&r===n+1?\"\":t.slice(r,i)},format:function(t){if(null===t||\"object\"!=typeof t)throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof t);return function(t,e){var r=e.dir||e.root,n=e.base||(e.name||\"\")+(e.ext||\"\");return r?r===e.root?r+n:r+\"/\"+n:n}(0,t)},parse:function(t){e(t);var r={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(0===t.length)return r;var n,i=t.charCodeAt(0),o=47===i;o?(r.root=\"/\",n=1):n=0;for(var s=-1,h=0,a=-1,c=!0,f=t.length-1,u=0;f>=n;--f)if(47!==(i=t.charCodeAt(f)))-1===a&&(c=!1,a=f+1),46===i?-1===s?s=f:1!==u&&(u=1):-1!==s&&(u=-1);else if(!c){h=f+1;break}return-1===s||-1===a||0===u||1===u&&s===a-1&&s===h+1?-1!==a&&(r.base=r.name=0===h&&o?t.slice(1,a):t.slice(h,a)):(0===h&&o?(r.name=t.slice(1,s),r.base=t.slice(1,a)):(r.name=t.slice(h,s),r.base=t.slice(h,a)),r.ext=t.slice(s,a)),h>0?r.dir=t.slice(0,h-1):o&&(r.dir=\"/\"),r},sep:\"/\",delimiter:\":\",win32:null,posix:null};n.posix=n,t.exports=n}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})};var n={};(()=>{let t;if(r.r(n),r.d(n,{URI:()=>f,Utils:()=>P}),\"object\"==typeof process)t=\"win32\"===process.platform;else if(\"object\"==typeof navigator){let e=navigator.userAgent;t=e.indexOf(\"Windows\")>=0}const e=/^\\w[\\w\\d+.-]*$/,i=/^\\//,o=/^\\/\\//;function s(t,r){if(!t.scheme&&r)throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${t.authority}\", path: \"${t.path}\", query: \"${t.query}\", fragment: \"${t.fragment}\"}`);if(t.scheme&&!e.test(t.scheme))throw new Error(\"[UriError]: Scheme contains illegal characters.\");if(t.path)if(t.authority){if(!i.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character')}else if(o.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")')}const h=\"\",a=\"/\",c=/^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;class f{static isUri(t){return t instanceof f||!!t&&\"string\"==typeof t.authority&&\"string\"==typeof t.fragment&&\"string\"==typeof t.path&&\"string\"==typeof t.query&&\"string\"==typeof t.scheme&&\"string\"==typeof t.fsPath&&\"function\"==typeof t.with&&\"function\"==typeof t.toString}scheme;authority;path;query;fragment;constructor(t,e,r,n,i,o=!1){\"object\"==typeof t?(this.scheme=t.scheme||h,this.authority=t.authority||h,this.path=t.path||h,this.query=t.query||h,this.fragment=t.fragment||h):(this.scheme=function(t,e){return t||e?t:\"file\"}(t,o),this.authority=e||h,this.path=function(t,e){switch(t){case\"https\":case\"http\":case\"file\":e?e[0]!==a&&(e=a+e):e=a}return e}(this.scheme,r||h),this.query=n||h,this.fragment=i||h,s(this,o))}get fsPath(){return m(this,!1)}with(t){if(!t)return this;let{scheme:e,authority:r,path:n,query:i,fragment:o}=t;return void 0===e?e=this.scheme:null===e&&(e=h),void 0===r?r=this.authority:null===r&&(r=h),void 0===n?n=this.path:null===n&&(n=h),void 0===i?i=this.query:null===i&&(i=h),void 0===o?o=this.fragment:null===o&&(o=h),e===this.scheme&&r===this.authority&&n===this.path&&i===this.query&&o===this.fragment?this:new l(e,r,n,i,o)}static parse(t,e=!1){const r=c.exec(t);return r?new l(r[2]||h,C(r[4]||h),C(r[5]||h),C(r[7]||h),C(r[9]||h),e):new l(h,h,h,h,h)}static file(e){let r=h;if(t&&(e=e.replace(/\\\\/g,a)),e[0]===a&&e[1]===a){const t=e.indexOf(a,2);-1===t?(r=e.substring(2),e=a):(r=e.substring(2,t),e=e.substring(t)||a)}return new l(\"file\",r,e,h,h)}static from(t){const e=new l(t.scheme,t.authority,t.path,t.query,t.fragment);return s(e,!0),e}toString(t=!1){return y(this,t)}toJSON(){return this}static revive(t){if(t){if(t instanceof f)return t;{const e=new l(t);return e._formatted=t.external,e._fsPath=t._sep===u?t.fsPath:null,e}}return t}}const u=t?1:void 0;class l extends f{_formatted=null;_fsPath=null;get fsPath(){return this._fsPath||(this._fsPath=m(this,!1)),this._fsPath}toString(t=!1){return t?y(this,!0):(this._formatted||(this._formatted=y(this,!1)),this._formatted)}toJSON(){const t={$mid:1};return this._fsPath&&(t.fsPath=this._fsPath,t._sep=u),this._formatted&&(t.external=this._formatted),this.path&&(t.path=this.path),this.scheme&&(t.scheme=this.scheme),this.authority&&(t.authority=this.authority),this.query&&(t.query=this.query),this.fragment&&(t.fragment=this.fragment),t}}const g={58:\"%3A\",47:\"%2F\",63:\"%3F\",35:\"%23\",91:\"%5B\",93:\"%5D\",64:\"%40\",33:\"%21\",36:\"%24\",38:\"%26\",39:\"%27\",40:\"%28\",41:\"%29\",42:\"%2A\",43:\"%2B\",44:\"%2C\",59:\"%3B\",61:\"%3D\",32:\"%20\"};function d(t,e,r){let n,i=-1;for(let o=0;o<t.length;o++){const s=t.charCodeAt(o);if(s>=97&&s<=122||s>=65&&s<=90||s>=48&&s<=57||45===s||46===s||95===s||126===s||e&&47===s||r&&91===s||r&&93===s||r&&58===s)-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),void 0!==n&&(n+=t.charAt(o));else{void 0===n&&(n=t.substr(0,o));const e=g[s];void 0!==e?(-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),n+=e):-1===i&&(i=o)}}return-1!==i&&(n+=encodeURIComponent(t.substring(i))),void 0!==n?n:t}function p(t){let e;for(let r=0;r<t.length;r++){const n=t.charCodeAt(r);35===n||63===n?(void 0===e&&(e=t.substr(0,r)),e+=g[n]):void 0!==e&&(e+=t[r])}return void 0!==e?e:t}function m(e,r){let n;return n=e.authority&&e.path.length>1&&\"file\"===e.scheme?`//${e.authority}${e.path}`:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?r?e.path.substr(1):e.path[1].toLowerCase()+e.path.substr(2):e.path,t&&(n=n.replace(/\\//g,\"\\\\\")),n}function y(t,e){const r=e?p:d;let n=\"\",{scheme:i,authority:o,path:s,query:h,fragment:c}=t;if(i&&(n+=i,n+=\":\"),(o||\"file\"===i)&&(n+=a,n+=a),o){let t=o.indexOf(\"@\");if(-1!==t){const e=o.substr(0,t);o=o.substr(t+1),t=e.lastIndexOf(\":\"),-1===t?n+=r(e,!1,!1):(n+=r(e.substr(0,t),!1,!1),n+=\":\",n+=r(e.substr(t+1),!1,!0)),n+=\"@\"}o=o.toLowerCase(),t=o.lastIndexOf(\":\"),-1===t?n+=r(o,!1,!0):(n+=r(o.substr(0,t),!1,!0),n+=o.substr(t))}if(s){if(s.length>=3&&47===s.charCodeAt(0)&&58===s.charCodeAt(2)){const t=s.charCodeAt(1);t>=65&&t<=90&&(s=`/${String.fromCharCode(t+32)}:${s.substr(3)}`)}else if(s.length>=2&&58===s.charCodeAt(1)){const t=s.charCodeAt(0);t>=65&&t<=90&&(s=`${String.fromCharCode(t+32)}:${s.substr(2)}`)}n+=r(s,!0,!1)}return h&&(n+=\"?\",n+=r(h,!1,!1)),c&&(n+=\"#\",n+=e?c:d(c,!1,!1)),n}function v(t){try{return decodeURIComponent(t)}catch{return t.length>3?t.substr(0,3)+v(t.substr(3)):t}}const b=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function C(t){return t.match(b)?t.replace(b,(t=>v(t))):t}var A=r(470);const w=A.posix||A,x=\"/\";var P;!function(t){t.joinPath=function(t,...e){return t.with({path:w.join(t.path,...e)})},t.resolvePath=function(t,...e){let r=t.path,n=!1;r[0]!==x&&(r=x+r,n=!0);let i=w.resolve(r,...e);return n&&i[0]===x&&!t.authority&&(i=i.substring(1)),t.with({path:i})},t.dirname=function(t){if(0===t.path.length||t.path===x)return t;let e=w.dirname(t.path);return 1===e.length&&46===e.charCodeAt(0)&&(e=\"\"),t.with({path:e})},t.basename=function(t){return w.basename(t.path)},t.extname=function(t){return w.extname(t.path)}}(P||(P={}))})(),LIB=n})();export const{URI,Utils}=LIB;\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { URI, Utils } from 'vscode-uri';\nexport { URI };\nexport var UriUtils;\n(function (UriUtils) {\n    UriUtils.basename = Utils.basename;\n    UriUtils.dirname = Utils.dirname;\n    UriUtils.extname = Utils.extname;\n    UriUtils.joinPath = Utils.joinPath;\n    UriUtils.resolvePath = Utils.resolvePath;\n    function equals(a, b) {\n        return (a === null || a === void 0 ? void 0 : a.toString()) === (b === null || b === void 0 ? void 0 : b.toString());\n    }\n    UriUtils.equals = equals;\n    function relative(from, to) {\n        const fromPath = typeof from === 'string' ? from : from.path;\n        const toPath = typeof to === 'string' ? to : to.path;\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\n        const toParts = toPath.split('/').filter(e => e.length > 0);\n        let i = 0;\n        for (; i < fromParts.length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n                break;\n            }\n        }\n        const backPart = '../'.repeat(fromParts.length - i);\n        const toPart = toParts.slice(i).join('/');\n        return backPart + toPart;\n    }\n    UriUtils.relative = relative;\n    function normalize(uri) {\n        return URI.parse(uri.toString()).toString();\n    }\n    UriUtils.normalize = normalize;\n})(UriUtils || (UriUtils = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n/**\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\n *  the overhead is very small, just a few kilobytes.\n * Everything else of that package (at the time contributing) is also defined\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\n */\nexport { TextDocument } from 'vscode-languageserver-textdocument';\nimport { TextDocument } from './documents.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { stream } from '../utils/stream.js';\nimport { URI } from '../utils/uri-utils.js';\n/**\n * A document is subject to several phases that are run in predefined order. Any state value implies that\n * smaller state values are finished as well.\n */\nexport var DocumentState;\n(function (DocumentState) {\n    /**\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\n     * document instance is no longer valid.\n     */\n    DocumentState[DocumentState[\"Changed\"] = 0] = \"Changed\";\n    /**\n     * An AST has been created from the text content. The document structure can be traversed,\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\n     * at this stage as a preprocessing step.\n     */\n    DocumentState[DocumentState[\"Parsed\"] = 1] = \"Parsed\";\n    /**\n     * The `IndexManager` service has processed AST nodes of this document. This means the\n     * exported symbols are available in the global scope and can be resolved from other documents.\n     */\n    DocumentState[DocumentState[\"IndexedContent\"] = 2] = \"IndexedContent\";\n    /**\n     * The `ScopeComputation` service has processed this document. This means the local symbols\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\n     * Once a document has reached this state, you may follow every reference - it will lazily\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\n     * the target is not in scope.\n     */\n    DocumentState[DocumentState[\"ComputedScopes\"] = 3] = \"ComputedScopes\";\n    /**\n     * The `Linker` service has processed this document. All outgoing references have been\n     * resolved or marked as erroneous.\n     */\n    DocumentState[DocumentState[\"Linked\"] = 4] = \"Linked\";\n    /**\n     * The `IndexManager` service has processed AST node references of this document. This is\n     * necessary to determine which documents are affected by a change in one of the workspace\n     * documents.\n     */\n    DocumentState[DocumentState[\"IndexedReferences\"] = 5] = \"IndexedReferences\";\n    /**\n     * The `DocumentValidator` service has processed this document. The language server listens\n     * to the results of this phase and sends diagnostics to the client.\n     */\n    DocumentState[DocumentState[\"Validated\"] = 6] = \"Validated\";\n})(DocumentState || (DocumentState = {}));\nexport class DefaultLangiumDocumentFactory {\n    constructor(services) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n    }\n    async fromUri(uri, cancellationToken = CancellationToken.None) {\n        const content = await this.fileSystemProvider.readFile(uri);\n        return this.createAsync(uri, content, cancellationToken);\n    }\n    fromTextDocument(textDocument, uri, token) {\n        uri = uri !== null && uri !== void 0 ? uri : URI.parse(textDocument.uri);\n        if (CancellationToken.is(token)) {\n            return this.createAsync(uri, textDocument, token);\n        }\n        else {\n            return this.create(uri, textDocument, token);\n        }\n    }\n    fromString(text, uri, token) {\n        if (CancellationToken.is(token)) {\n            return this.createAsync(uri, text, token);\n        }\n        else {\n            return this.create(uri, text, token);\n        }\n    }\n    fromModel(model, uri) {\n        return this.create(uri, { $model: model });\n    }\n    create(uri, content, options) {\n        if (typeof content === 'string') {\n            const parseResult = this.parse(uri, content, options);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        }\n        else if ('$model' in content) {\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\n            return this.createLangiumDocument(parseResult, uri);\n        }\n        else {\n            const parseResult = this.parse(uri, content.getText(), options);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    async createAsync(uri, content, cancelToken) {\n        if (typeof content === 'string') {\n            const parseResult = await this.parseAsync(uri, content, cancelToken);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        }\n        else {\n            const parseResult = await this.parseAsync(uri, content.getText(), cancelToken);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    /**\n     * Create a LangiumDocument from a given parse result.\n     *\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\n     * should not be necessary because the main purpose of the TextDocument is to convert between\n     * text ranges and offsets, which is done solely in LSP request handling.\n     *\n     * With the introduction of {@link update} below this method is supposed to be mainly called\n     * during workspace initialization and on addition/recognition of new files, while changes in\n     * existing documents are processed via {@link update}.\n     */\n    createLangiumDocument(parseResult, uri, textDocument, text) {\n        let document;\n        if (textDocument) {\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                textDocument\n            };\n        }\n        else {\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                get textDocument() {\n                    return textDocumentGetter();\n                }\n            };\n        }\n        parseResult.value.$document = document;\n        return document;\n    }\n    async update(document, cancellationToken) {\n        var _a, _b;\n        // The CST full text property contains the original text that was used to create the AST.\n        const oldText = (_a = document.parseResult.value.$cstNode) === null || _a === void 0 ? void 0 : _a.root.fullText;\n        const textDocument = (_b = this.textDocuments) === null || _b === void 0 ? void 0 : _b.get(document.uri.toString());\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\n        if (textDocument) {\n            Object.defineProperty(document, 'textDocument', {\n                value: textDocument\n            });\n        }\n        else {\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\n            Object.defineProperty(document, 'textDocument', {\n                get: textDocumentGetter\n            });\n        }\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\n        // Therefore, we only parse if the text has actually changed.\n        if (oldText !== text) {\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\n            document.parseResult.value.$document = document;\n        }\n        document.state = DocumentState.Parsed;\n        return document;\n    }\n    parse(uri, text, options) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.LangiumParser.parse(text, options);\n    }\n    parseAsync(uri, text, cancellationToken) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.AsyncParser.parse(text, cancellationToken);\n    }\n    createTextDocumentGetter(uri, text) {\n        const serviceRegistry = this.serviceRegistry;\n        let textDoc = undefined;\n        return () => {\n            return textDoc !== null && textDoc !== void 0 ? textDoc : (textDoc = TextDocument.create(uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text !== null && text !== void 0 ? text : ''));\n        };\n    }\n}\nexport class DefaultLangiumDocuments {\n    constructor(services) {\n        this.documentMap = new Map();\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get all() {\n        return stream(this.documentMap.values());\n    }\n    addDocument(document) {\n        const uriString = document.uri.toString();\n        if (this.documentMap.has(uriString)) {\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\n        }\n        this.documentMap.set(uriString, document);\n    }\n    getDocument(uri) {\n        const uriString = uri.toString();\n        return this.documentMap.get(uriString);\n    }\n    async getOrCreateDocument(uri, cancellationToken) {\n        let document = this.getDocument(uri);\n        if (document) {\n            return document;\n        }\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n        this.addDocument(document);\n        return document;\n    }\n    createDocument(uri, text, cancellationToken) {\n        if (cancellationToken) {\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\n                this.addDocument(document);\n                return document;\n            });\n        }\n        else {\n            const document = this.langiumDocumentFactory.fromString(text, uri);\n            this.addDocument(document);\n            return document;\n        }\n    }\n    hasDocument(uri) {\n        return this.documentMap.has(uri.toString());\n    }\n    invalidateDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\n            linker.unlink(langiumDoc);\n            langiumDoc.state = DocumentState.Changed;\n            langiumDoc.precomputedScopes = undefined;\n            langiumDoc.diagnostics = undefined;\n        }\n        return langiumDoc;\n    }\n    deleteDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            this.documentMap.delete(uriString);\n        }\n        return langiumDoc;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\nimport { findRootNode, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { DocumentState } from '../workspace/documents.js';\nconst ref_resolving = Symbol('ref_resolving');\nexport class DefaultLinker {\n    constructor(services) {\n        this.reflection = services.shared.AstReflection;\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\n        this.scopeProvider = services.references.ScopeProvider;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n    }\n    async link(document, cancelToken = CancellationToken.None) {\n        for (const node of streamAst(document.parseResult.value)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\n        }\n    }\n    doLink(refInfo, document) {\n        var _a;\n        const ref = refInfo.reference;\n        // The reference may already have been resolved lazily by accessing its `ref` property.\n        if (ref._ref === undefined) {\n            ref._ref = ref_resolving;\n            try {\n                const description = this.getCandidate(refInfo);\n                if (isLinkingError(description)) {\n                    ref._ref = description;\n                }\n                else {\n                    ref._nodeDescription = description;\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\n                        // The target document is already loaded\n                        const linkedNode = this.loadAstNode(description);\n                        ref._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : this.createLinkingError(refInfo, description);\n                    }\n                    else {\n                        // Try to load the target AST node later using the already provided description\n                        ref._ref = undefined;\n                    }\n                }\n            }\n            catch (err) {\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\n                const errorMessage = (_a = err.message) !== null && _a !== void 0 ? _a : String(err);\n                ref._ref = Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}` });\n            }\n            // Add the reference to the document's array of references\n            // Only add if the reference has been not been resolved earlier\n            // Otherwise we end up with duplicates\n            // See also implementation of `buildReference`\n            document.references.push(ref);\n        }\n    }\n    unlink(document) {\n        for (const ref of document.references) {\n            delete ref._ref;\n            delete ref._nodeDescription;\n        }\n        document.references = [];\n    }\n    getCandidate(refInfo) {\n        const scope = this.scopeProvider.getScope(refInfo);\n        const description = scope.getElement(refInfo.reference.$refText);\n        return description !== null && description !== void 0 ? description : this.createLinkingError(refInfo);\n    }\n    buildReference(node, property, refNode, refText) {\n        // See behavior description in doc of Linker, update that on changes in here.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const linker = this;\n        const reference = {\n            $refNode: refNode,\n            $refText: refText,\n            get ref() {\n                var _a;\n                if (isAstNode(this._ref)) {\n                    // Most frequent case: the target is already resolved.\n                    return this._ref;\n                }\n                else if (isAstNodeDescription(this._nodeDescription)) {\n                    // A candidate has been found before, but it is not loaded yet.\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\n                    this._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\n                }\n                else if (this._ref === undefined) {\n                    // The reference has not been linked yet, so do that now.\n                    this._ref = ref_resolving;\n                    const document = findRootNode(node).$document;\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\n                    if (refData.error && document && document.state < DocumentState.ComputedScopes) {\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\n                        return this._ref = undefined;\n                    }\n                    this._ref = (_a = refData.node) !== null && _a !== void 0 ? _a : refData.error;\n                    this._nodeDescription = refData.descr;\n                    document === null || document === void 0 ? void 0 : document.references.push(this);\n                }\n                else if (this._ref === ref_resolving) {\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\n                }\n                return isAstNode(this._ref) ? this._ref : undefined;\n            },\n            get $nodeDescription() {\n                return this._nodeDescription;\n            },\n            get error() {\n                return isLinkingError(this._ref) ? this._ref : undefined;\n            }\n        };\n        return reference;\n    }\n    getLinkedNode(refInfo) {\n        var _a;\n        try {\n            const description = this.getCandidate(refInfo);\n            if (isLinkingError(description)) {\n                return { error: description };\n            }\n            const linkedNode = this.loadAstNode(description);\n            if (linkedNode) {\n                return { node: linkedNode, descr: description };\n            }\n            else {\n                return {\n                    descr: description,\n                    error: this.createLinkingError(refInfo, description)\n                };\n            }\n        }\n        catch (err) {\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\n            const errorMessage = (_a = err.message) !== null && _a !== void 0 ? _a : String(err);\n            return {\n                error: Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}` })\n            };\n        }\n    }\n    loadAstNode(nodeDescription) {\n        if (nodeDescription.node) {\n            return nodeDescription.node;\n        }\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\n        if (!doc) {\n            return undefined;\n        }\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\n    }\n    createLinkingError(refInfo, targetDescription) {\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\n        // in the language implementation.\n        const document = findRootNode(refInfo.container).$document;\n        if (document && document.state < DocumentState.ComputedScopes) {\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\n        }\n        const referenceType = this.reflection.getReferenceType(refInfo);\n        return Object.assign(Object.assign({}, refInfo), { message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`, targetDescription });\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\nexport function isNamed(node) {\n    return typeof node.name === 'string';\n}\nexport class DefaultNameProvider {\n    getName(node) {\n        if (isNamed(node)) {\n            return node.name;\n        }\n        return undefined;\n    }\n    getNameNode(node) {\n        return findNodeForProperty(node.$cstNode, 'name');\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { findAssignment } from '../utils/grammar-utils.js';\nimport { isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nexport class DefaultReferences {\n    constructor(services) {\n        this.nameProvider = services.references.NameProvider;\n        this.index = services.shared.workspace.IndexManager;\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    findDeclaration(sourceCstNode) {\n        if (sourceCstNode) {\n            const assignment = findAssignment(sourceCstNode);\n            const nodeElem = sourceCstNode.astNode;\n            if (assignment && nodeElem) {\n                const reference = nodeElem[assignment.feature];\n                if (isReference(reference)) {\n                    return reference.ref;\n                }\n                else if (Array.isArray(reference)) {\n                    for (const ref of reference) {\n                        if (isReference(ref) && ref.$refNode\n                            && ref.$refNode.offset <= sourceCstNode.offset\n                            && ref.$refNode.end >= sourceCstNode.end) {\n                            return ref.ref;\n                        }\n                    }\n                }\n            }\n            if (nodeElem) {\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\n                    return nodeElem;\n                }\n            }\n        }\n        return undefined;\n    }\n    findDeclarationNode(sourceCstNode) {\n        const astNode = this.findDeclaration(sourceCstNode);\n        if (astNode === null || astNode === void 0 ? void 0 : astNode.$cstNode) {\n            const targetNode = this.nameProvider.getNameNode(astNode);\n            return targetNode !== null && targetNode !== void 0 ? targetNode : astNode.$cstNode;\n        }\n        return undefined;\n    }\n    findReferences(targetNode, options) {\n        const refs = [];\n        if (options.includeDeclaration) {\n            const ref = this.getReferenceToSelf(targetNode);\n            if (ref) {\n                refs.push(ref);\n            }\n        }\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\n        if (options.documentUri) {\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\n        }\n        refs.push(...indexReferences);\n        return stream(refs);\n    }\n    getReferenceToSelf(targetNode) {\n        const nameNode = this.nameProvider.getNameNode(targetNode);\n        if (nameNode) {\n            const doc = getDocument(targetNode);\n            const path = this.nodeLocator.getAstNodePath(targetNode);\n            return {\n                sourceUri: doc.uri,\n                sourcePath: path,\n                targetUri: doc.uri,\n                targetPath: path,\n                segment: toDocumentSegment(nameNode),\n                local: true\n            };\n        }\n        return undefined;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Reduction, stream } from './stream.js';\n/**\n * A multimap is a variation of a Map that has potentially multiple values for every key.\n */\nexport class MultiMap {\n    constructor(elements) {\n        this.map = new Map();\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.add(key, value);\n            }\n        }\n    }\n    /**\n     * The total number of values in the multimap.\n     */\n    get size() {\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\n    }\n    /**\n     * Clear all entries in the multimap.\n     */\n    clear() {\n        this.map.clear();\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\n     *  * Without a value, all values associated with the given key are deleted.\n     *\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\n     *     key / value does not exist.\n     */\n    delete(key, value) {\n        if (value === undefined) {\n            return this.map.delete(key);\n        }\n        else {\n            const values = this.map.get(key);\n            if (values) {\n                const index = values.indexOf(value);\n                if (index >= 0) {\n                    if (values.length === 1) {\n                        this.map.delete(key);\n                    }\n                    else {\n                        values.splice(index, 1);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Returns an array of all values associated with the given key. If no value exists,\n     * an empty array is returned.\n     *\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\n     * value and `delete` to remove a value from the multimap.\n     */\n    get(key) {\n        var _a;\n        return (_a = this.map.get(key)) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\n     */\n    has(key, value) {\n        if (value === undefined) {\n            return this.map.has(key);\n        }\n        else {\n            const values = this.map.get(key);\n            if (values) {\n                return values.indexOf(value) >= 0;\n            }\n            return false;\n        }\n    }\n    /**\n     * Add the given key / value pair to the multimap.\n     */\n    add(key, value) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(value);\n        }\n        else {\n            this.map.set(key, [value]);\n        }\n        return this;\n    }\n    /**\n     * Add the given set of key / value pairs to the multimap.\n     */\n    addAll(key, values) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(...values);\n        }\n        else {\n            this.map.set(key, Array.from(values));\n        }\n        return this;\n    }\n    /**\n     * Invokes the given callback function for every key / value pair in the multimap.\n     */\n    forEach(callbackfn) {\n        this.map.forEach((array, key) => array.forEach(value => callbackfn(value, key, this)));\n    }\n    /**\n     * Returns an iterator of key, value pairs for every entry in the map.\n     */\n    [Symbol.iterator]() {\n        return this.entries().iterator();\n    }\n    /**\n     * Returns a stream of key, value pairs for every entry in the map.\n     */\n    entries() {\n        return stream(this.map.entries())\n            .flatMap(([key, array]) => array.map(value => [key, value]));\n    }\n    /**\n     * Returns a stream of keys in the map.\n     */\n    keys() {\n        return stream(this.map.keys());\n    }\n    /**\n     * Returns a stream of values in the map.\n     */\n    values() {\n        return stream(this.map.values()).flat();\n    }\n    /**\n     * Returns a stream of key, value set pairs for every key in the map.\n     */\n    entriesGroupedByKey() {\n        return stream(this.map.entries());\n    }\n}\nexport class BiMap {\n    get size() {\n        return this.map.size;\n    }\n    constructor(elements) {\n        this.map = new Map();\n        this.inverse = new Map();\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.set(key, value);\n            }\n        }\n    }\n    clear() {\n        this.map.clear();\n        this.inverse.clear();\n    }\n    set(key, value) {\n        this.map.set(key, value);\n        this.inverse.set(value, key);\n        return this;\n    }\n    get(key) {\n        return this.map.get(key);\n    }\n    getKey(value) {\n        return this.inverse.get(value);\n    }\n    delete(key) {\n        const value = this.map.get(key);\n        if (value !== undefined) {\n            this.map.delete(key);\n            this.inverse.delete(value);\n            return true;\n        }\n        return false;\n    }\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\n/**\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\n * contained child nodes.\n *\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\n * are _invisible_ by default, but that can be changed by customizing this service.\n */\nexport class DefaultScopeComputation {\n    constructor(services) {\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n    }\n    async computeExports(document, cancelToken = CancellationToken.None) {\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\n    }\n    /**\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\n     * The list of children to be considered is determined by the function parameter {@link children}.\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\n     *\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\n     * @param document The document containing the AST node to be exported.\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCancelled` if a user action occurs during execution.\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\n     */\n    async computeExportsForNode(parentNode, document, children = streamContents, cancelToken = CancellationToken.None) {\n        const exports = [];\n        this.exportNode(parentNode, exports, document);\n        for (const node of children(parentNode)) {\n            await interruptAndCheck(cancelToken);\n            this.exportNode(node, exports, document);\n        }\n        return exports;\n    }\n    /**\n     * Add a single node to the list of exports if it has a name. Override this method to change how\n     * symbols are exported, e.g. by modifying their exported name.\n     */\n    exportNode(node, exports, document) {\n        const name = this.nameProvider.getName(node);\n        if (name) {\n            exports.push(this.descriptions.createDescription(node, name, document));\n        }\n    }\n    async computeLocalScopes(document, cancelToken = CancellationToken.None) {\n        const rootNode = document.parseResult.value;\n        const scopes = new MultiMap();\n        // Here we navigate the full AST - local scopes shall be available in the whole document\n        for (const node of streamAllContents(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            this.processNode(node, document, scopes);\n        }\n        return scopes;\n    }\n    /**\n     * Process a single node during scopes computation. The default implementation makes the node visible\n     * in the subtree of its container (if the node has a name). Override this method to change this,\n     * e.g. by increasing the visibility to a higher level in the AST.\n     */\n    processNode(node, document, scopes) {\n        const container = node.$container;\n        if (container) {\n            const name = this.nameProvider.getName(node);\n            if (name) {\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\n/**\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\n * the next level of elements, which are queried when a target element is not found in the stream provided\n * to this scope.\n */\nexport class StreamScope {\n    constructor(elements, outerScope, options) {\n        var _a;\n        this.elements = elements;\n        this.outerScope = outerScope;\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n    }\n    getAllElements() {\n        if (this.outerScope) {\n            return this.elements.concat(this.outerScope.getAllElements());\n        }\n        else {\n            return this.elements;\n        }\n    }\n    getElement(name) {\n        const local = this.caseInsensitive\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\n            : this.elements.find(e => e.name === name);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n}\nexport class MapScope {\n    constructor(elements, outerScope, options) {\n        var _a;\n        this.elements = new Map();\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n        for (const element of elements) {\n            const name = this.caseInsensitive\n                ? element.name.toLowerCase()\n                : element.name;\n            this.elements.set(name, element);\n        }\n        this.outerScope = outerScope;\n    }\n    getElement(name) {\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\n        const local = this.elements.get(localName);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n    getAllElements() {\n        let elementStream = stream(this.elements.values());\n        if (this.outerScope) {\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\n        }\n        return elementStream;\n    }\n}\nexport const EMPTY_SCOPE = {\n    getElement() {\n        return undefined;\n    },\n    getAllElements() {\n        return EMPTY_STREAM;\n    }\n};\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport class DisposableCache {\n    constructor() {\n        this.toDispose = [];\n        this.isDisposed = false;\n    }\n    onDispose(disposable) {\n        this.toDispose.push(disposable);\n    }\n    dispose() {\n        this.throwIfDisposed();\n        this.clear();\n        this.isDisposed = true;\n        this.toDispose.forEach(disposable => disposable.dispose());\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('This cache has already been disposed');\n        }\n    }\n}\nexport class SimpleCache extends DisposableCache {\n    constructor() {\n        super(...arguments);\n        this.cache = new Map();\n    }\n    has(key) {\n        this.throwIfDisposed();\n        return this.cache.has(key);\n    }\n    set(key, value) {\n        this.throwIfDisposed();\n        this.cache.set(key, value);\n    }\n    get(key, provider) {\n        this.throwIfDisposed();\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        else if (provider) {\n            const value = provider();\n            this.cache.set(key, value);\n            return value;\n        }\n        else {\n            return undefined;\n        }\n    }\n    delete(key) {\n        this.throwIfDisposed();\n        return this.cache.delete(key);\n    }\n    clear() {\n        this.throwIfDisposed();\n        this.cache.clear();\n    }\n}\nexport class ContextCache extends DisposableCache {\n    constructor(converter) {\n        super();\n        this.cache = new Map();\n        this.converter = converter !== null && converter !== void 0 ? converter : (value => value);\n    }\n    has(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).has(key);\n    }\n    set(contextKey, key, value) {\n        this.throwIfDisposed();\n        this.cacheForContext(contextKey).set(key, value);\n    }\n    get(contextKey, key, provider) {\n        this.throwIfDisposed();\n        const contextCache = this.cacheForContext(contextKey);\n        if (contextCache.has(key)) {\n            return contextCache.get(key);\n        }\n        else if (provider) {\n            const value = provider();\n            contextCache.set(key, value);\n            return value;\n        }\n        else {\n            return undefined;\n        }\n    }\n    delete(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).delete(key);\n    }\n    clear(contextKey) {\n        this.throwIfDisposed();\n        if (contextKey) {\n            const mapKey = this.converter(contextKey);\n            this.cache.delete(mapKey);\n        }\n        else {\n            this.cache.clear();\n        }\n    }\n    cacheForContext(contextKey) {\n        const mapKey = this.converter(contextKey);\n        let documentCache = this.cache.get(mapKey);\n        if (!documentCache) {\n            documentCache = new Map();\n            this.cache.set(mapKey, documentCache);\n        }\n        return documentCache;\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to a document.\n * If this document is changed or deleted, all associated key/value pairs are deleted.\n */\nexport class DocumentCache extends ContextCache {\n    /**\n     * Creates a new document cache.\n     *\n     * @param sharedServices Service container instance to hook into document lifecycle events.\n     * @param state Optional document state on which the cache should evict.\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\n     * *Deleted* documents are considered in both cases.\n     *\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\n     * which triggers on all documents that have been affected by this change, assuming that the\n     * state is `DocumentState.Linked` or a later state.\n     */\n    constructor(sharedServices, state) {\n        super(uri => uri.toString());\n        if (state) {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\n                this.clear(document.uri.toString());\n            }));\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\n                for (const uri of deleted) { // react only on deleted documents\n                    this.clear(uri);\n                }\n            }));\n        }\n        else {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\n                for (const uri of allUris) {\n                    this.clear(uri);\n                }\n            }));\n        }\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to the whole workspace.\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\n */\nexport class WorkspaceCache extends SimpleCache {\n    /**\n     * Creates a new workspace cache.\n     *\n     * @param sharedServices Service container instance to hook into document lifecycle events.\n     * @param state Optional document state on which the cache should evict.\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\n     * *Deleted* documents are considered in both cases.\n     */\n    constructor(sharedServices, state) {\n        super();\n        if (state) {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\n                this.clear();\n            }));\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\n                if (deleted.length > 0) { // react only on deleted documents\n                    this.clear();\n                }\n            }));\n        }\n        else {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => {\n                this.clear();\n            }));\n        }\n    }\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { MapScope, StreamScope } from './scope.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { WorkspaceCache } from '../utils/caching.js';\nexport class DefaultScopeProvider {\n    constructor(services) {\n        this.reflection = services.shared.AstReflection;\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.globalScopeCache = new WorkspaceCache(services.shared);\n    }\n    getScope(context) {\n        const scopes = [];\n        const referenceType = this.reflection.getReferenceType(context);\n        const precomputed = getDocument(context.container).precomputedScopes;\n        if (precomputed) {\n            let currentNode = context.container;\n            do {\n                const allDescriptions = precomputed.get(currentNode);\n                if (allDescriptions.length > 0) {\n                    scopes.push(stream(allDescriptions).filter(desc => this.reflection.isSubtype(desc.type, referenceType)));\n                }\n                currentNode = currentNode.$container;\n            } while (currentNode);\n        }\n        let result = this.getGlobalScope(referenceType, context);\n        for (let i = scopes.length - 1; i >= 0; i--) {\n            result = this.createScope(scopes[i], result);\n        }\n        return result;\n    }\n    /**\n     * Create a scope for the given collection of AST node descriptions.\n     */\n    createScope(elements, outerScope, options) {\n        return new StreamScope(stream(elements), outerScope, options);\n    }\n    /**\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\n     */\n    createScopeForNodes(elements, outerScope, options) {\n        const s = stream(elements).map(e => {\n            const name = this.nameProvider.getName(e);\n            if (name) {\n                return this.descriptions.createDescription(e, name);\n            }\n            return undefined;\n        }).nonNullable();\n        return new StreamScope(s, outerScope, options);\n    }\n    /**\n     * Create a global scope filtered for the given reference type.\n     */\n    getGlobalScope(referenceType, _context) {\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { URI } from 'vscode-uri';\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\nexport function isAstNodeWithComment(node) {\n    return typeof node.$comment === 'string';\n}\nfunction isIntermediateReference(obj) {\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\n}\nexport class DefaultJsonSerializer {\n    constructor(services) {\n        /** The set of AstNode properties to be ignored by the serializer. */\n        this.ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    serialize(node, options) {\n        const serializeOptions = options !== null && options !== void 0 ? options : {};\n        const specificReplacer = options === null || options === void 0 ? void 0 : options.replacer;\n        const defaultReplacer = (key, value) => this.replacer(key, value, serializeOptions);\n        const replacer = specificReplacer ? (key, value) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\n        try {\n            this.currentDocument = getDocument(node);\n            return JSON.stringify(node, replacer, options === null || options === void 0 ? void 0 : options.space);\n        }\n        finally {\n            this.currentDocument = undefined;\n        }\n    }\n    deserialize(content, options) {\n        const deserializeOptions = options !== null && options !== void 0 ? options : {};\n        const root = JSON.parse(content);\n        this.linkNode(root, root, deserializeOptions);\n        return root;\n    }\n    replacer(key, value, { refText, sourceText, textRegions, comments, uriConverter }) {\n        var _a, _b, _c, _d;\n        if (this.ignoreProperties.has(key)) {\n            return undefined;\n        }\n        else if (isReference(value)) {\n            const refValue = value.ref;\n            const $refText = refText ? value.$refText : undefined;\n            if (refValue) {\n                const targetDocument = getDocument(refValue);\n                let targetUri = '';\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\n                    if (uriConverter) {\n                        targetUri = uriConverter(targetDocument.uri, value);\n                    }\n                    else {\n                        targetUri = targetDocument.uri.toString();\n                    }\n                }\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\n                return {\n                    $ref: `${targetUri}#${targetPath}`,\n                    $refText\n                };\n            }\n            else {\n                return {\n                    $error: (_b = (_a = value.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : 'Could not resolve reference',\n                    $refText\n                };\n            }\n        }\n        else if (isAstNode(value)) {\n            let astNode = undefined;\n            if (textRegions) {\n                astNode = this.addAstNodeRegionWithAssignmentsTo(Object.assign({}, value));\n                if ((!key || value.$document) && (astNode === null || astNode === void 0 ? void 0 : astNode.$textRegion)) {\n                    // The document URI is added to the root node of the resulting JSON tree\n                    astNode.$textRegion.documentURI = (_c = this.currentDocument) === null || _c === void 0 ? void 0 : _c.uri.toString();\n                }\n            }\n            if (sourceText && !key) {\n                astNode !== null && astNode !== void 0 ? astNode : (astNode = Object.assign({}, value));\n                astNode.$sourceText = (_d = value.$cstNode) === null || _d === void 0 ? void 0 : _d.text;\n            }\n            if (comments) {\n                astNode !== null && astNode !== void 0 ? astNode : (astNode = Object.assign({}, value));\n                const comment = this.commentProvider.getComment(value);\n                if (comment) {\n                    astNode.$comment = comment.replace(/\\r/g, '');\n                }\n            }\n            return astNode !== null && astNode !== void 0 ? astNode : value;\n        }\n        else {\n            return value;\n        }\n    }\n    addAstNodeRegionWithAssignmentsTo(node) {\n        const createDocumentSegment = cstNode => ({\n            offset: cstNode.offset,\n            end: cstNode.end,\n            length: cstNode.length,\n            range: cstNode.range,\n        });\n        if (node.$cstNode) {\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\n            const assignments = textRegion.assignments = {};\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\n                if (propertyAssignments.length !== 0) {\n                    assignments[key] = propertyAssignments;\n                }\n            });\n            return node;\n        }\n        return undefined;\n    }\n    linkNode(node, root, options, container, containerProperty, containerIndex) {\n        for (const [propertyName, item] of Object.entries(node)) {\n            if (Array.isArray(item)) {\n                for (let index = 0; index < item.length; index++) {\n                    const element = item[index];\n                    if (isIntermediateReference(element)) {\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\n                    }\n                    else if (isAstNode(element)) {\n                        this.linkNode(element, root, options, node, propertyName, index);\n                    }\n                }\n            }\n            else if (isIntermediateReference(item)) {\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\n            }\n            else if (isAstNode(item)) {\n                this.linkNode(item, root, options, node, propertyName);\n            }\n        }\n        const mutable = node;\n        mutable.$container = container;\n        mutable.$containerProperty = containerProperty;\n        mutable.$containerIndex = containerIndex;\n    }\n    reviveReference(container, property, root, reference, options) {\n        let refText = reference.$refText;\n        let error = reference.$error;\n        if (reference.$ref) {\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\n            if (isAstNode(ref)) {\n                if (!refText) {\n                    refText = this.nameProvider.getName(ref);\n                }\n                return {\n                    $refText: refText !== null && refText !== void 0 ? refText : '',\n                    ref\n                };\n            }\n            else {\n                error = ref;\n            }\n        }\n        if (error) {\n            const ref = {\n                $refText: refText !== null && refText !== void 0 ? refText : ''\n            };\n            ref.error = {\n                container,\n                property,\n                message: error,\n                reference: ref\n            };\n            return ref;\n        }\n        else {\n            return undefined;\n        }\n    }\n    getRefNode(root, uri, uriConverter) {\n        try {\n            const fragmentIndex = uri.indexOf('#');\n            if (fragmentIndex === 0) {\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\n                if (!node) {\n                    return 'Could not resolve path: ' + uri;\n                }\n                return node;\n            }\n            if (fragmentIndex < 0) {\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\n                const document = this.langiumDocuments.getDocument(documentUri);\n                if (!document) {\n                    return 'Could not find document for URI: ' + uri;\n                }\n                return document.parseResult.value;\n            }\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\n            const document = this.langiumDocuments.getDocument(documentUri);\n            if (!document) {\n                return 'Could not find document for URI: ' + uri;\n            }\n            if (fragmentIndex === uri.length - 1) {\n                return document.parseResult.value;\n            }\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\n            if (!node) {\n                return 'Could not resolve URI: ' + uri;\n            }\n            return node;\n        }\n        catch (err) {\n            return String(err);\n        }\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { UriUtils } from './utils/uri-utils.js';\n/**\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\n */\nexport class DefaultServiceRegistry {\n    /**\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\n     */\n    get map() {\n        return this.fileExtensionMap;\n    }\n    constructor(services) {\n        this.languageIdMap = new Map();\n        this.fileExtensionMap = new Map();\n        this.textDocuments = services === null || services === void 0 ? void 0 : services.workspace.TextDocuments;\n    }\n    register(language) {\n        const data = language.LanguageMetaData;\n        for (const ext of data.fileExtensions) {\n            if (this.fileExtensionMap.has(ext)) {\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\n            }\n            this.fileExtensionMap.set(ext, language);\n        }\n        this.languageIdMap.set(data.languageId, language);\n        if (this.languageIdMap.size === 1) {\n            this.singleton = language;\n        }\n        else {\n            this.singleton = undefined;\n        }\n    }\n    getServices(uri) {\n        var _a, _b;\n        if (this.singleton !== undefined) {\n            return this.singleton;\n        }\n        if (this.languageIdMap.size === 0) {\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\n        }\n        const languageId = (_b = (_a = this.textDocuments) === null || _a === void 0 ? void 0 : _a.get(uri)) === null || _b === void 0 ? void 0 : _b.languageId;\n        if (languageId !== undefined) {\n            const services = this.languageIdMap.get(languageId);\n            if (services) {\n                return services;\n            }\n        }\n        const ext = UriUtils.extname(uri);\n        const services = this.fileExtensionMap.get(ext);\n        if (!services) {\n            if (languageId) {\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\n            }\n            else {\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\n            }\n        }\n        return services;\n    }\n    hasServices(uri) {\n        try {\n            this.getServices(uri);\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    get all() {\n        return Array.from(this.languageIdMap.values());\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { assertUnreachable } from '../index.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { isOperationCancelled } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\n/**\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\n */\nexport function diagnosticData(code) {\n    return { code };\n}\nexport var ValidationCategory;\n(function (ValidationCategory) {\n    ValidationCategory.all = ['fast', 'slow', 'built-in'];\n})(ValidationCategory || (ValidationCategory = {}));\n/**\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\n */\nexport class ValidationRegistry {\n    constructor(services) {\n        this.entries = new MultiMap();\n        this.entriesBefore = [];\n        this.entriesAfter = [];\n        this.reflection = services.shared.AstReflection;\n    }\n    /**\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\n     * or an array of validation checks.\n     *\n     * @param checksRecord Set of validation checks to register.\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    register(checksRecord, thisObj = this, category = 'fast') {\n        if (category === 'built-in') {\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\n        }\n        for (const [type, ch] of Object.entries(checksRecord)) {\n            const callbacks = ch;\n            if (Array.isArray(callbacks)) {\n                for (const check of callbacks) {\n                    const entry = {\n                        check: this.wrapValidationException(check, thisObj),\n                        category\n                    };\n                    this.addEntry(type, entry);\n                }\n            }\n            else if (typeof callbacks === 'function') {\n                const entry = {\n                    check: this.wrapValidationException(callbacks, thisObj),\n                    category\n                };\n                this.addEntry(type, entry);\n            }\n            else {\n                assertUnreachable(callbacks);\n            }\n        }\n    }\n    wrapValidationException(check, thisObj) {\n        return async (node, accept, cancelToken) => {\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\n        };\n    }\n    async handleException(functionality, messageContext, accept, node) {\n        try {\n            await functionality();\n        }\n        catch (err) {\n            if (isOperationCancelled(err)) {\n                throw err;\n            }\n            console.error(`${messageContext}:`, err);\n            if (err instanceof Error && err.stack) {\n                console.error(err.stack);\n            }\n            const messageDetails = err instanceof Error ? err.message : String(err);\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\n        }\n    }\n    addEntry(type, entry) {\n        if (type === 'AstNode') {\n            this.entries.add('AstNode', entry);\n            return;\n        }\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\n            this.entries.add(subtype, entry);\n        }\n    }\n    getChecks(type, categories) {\n        let checks = stream(this.entries.get(type))\n            .concat(this.entries.get('AstNode'));\n        if (categories) {\n            checks = checks.filter(entry => categories.includes(entry.category));\n        }\n        return checks.map(entry => entry.check);\n    }\n    /**\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\n     *\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\n     * here the map for mapping names to nodes could be established.\n     * During the usual checks on the nodes, they are put into this map with their name.\n     *\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\n     * Therefore it is recommended to clear stored information\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\n     * AND _after_ validating the AST to free memory by information which are no longer used.\n     *\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    registerBeforeDocument(checkBefore, thisObj = this) {\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\n    }\n    /**\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\n     *\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\n     * here the map with all the collected nodes and their names is checked\n     * and validation hints are created for all nodes with the same name.\n     *\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\n     * Therefore it is recommended to clear stored information\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\n     * AND _after_ validating the AST to free memory by information which are no longer used.\n     *\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    registerAfterDocument(checkAfter, thisObj = this) {\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\n    }\n    wrapPreparationException(check, messageContext, thisObj) {\n        return async (rootNode, accept, categories, cancelToken) => {\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\n        };\n    }\n    get checksBefore() {\n        return this.entriesBefore;\n    }\n    get checksAfter() {\n        return this.entriesAfter;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\nimport { diagnosticData } from './validation-registry.js';\nexport class DefaultDocumentValidator {\n    constructor(services) {\n        this.validationRegistry = services.validation.ValidationRegistry;\n        this.metadata = services.LanguageMetaData;\n    }\n    async validateDocument(document, options = {}, cancelToken = CancellationToken.None) {\n        const parseResult = document.parseResult;\n        const diagnostics = [];\n        await interruptAndCheck(cancelToken);\n        if (!options.categories || options.categories.includes('built-in')) {\n            this.processLexingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterLexingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LexingError; })) {\n                return diagnostics;\n            }\n            this.processParsingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterParsingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.ParsingError; })) {\n                return diagnostics;\n            }\n            this.processLinkingErrors(document, diagnostics, options);\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LinkingError; })) {\n                return diagnostics;\n            }\n        }\n        // Process custom validations\n        try {\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\n        }\n        catch (err) {\n            if (isOperationCancelled(err)) {\n                throw err;\n            }\n            console.error('An error occurred during validation:', err);\n        }\n        await interruptAndCheck(cancelToken);\n        return diagnostics;\n    }\n    processLexingErrors(parseResult, diagnostics, _options) {\n        var _a, _b, _c;\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...(_b = (_a = parseResult.lexerReport) === null || _a === void 0 ? void 0 : _a.diagnostics) !== null && _b !== void 0 ? _b : []];\n        for (const lexerDiagnostic of lexerDiagnostics) {\n            const severity = (_c = lexerDiagnostic.severity) !== null && _c !== void 0 ? _c : 'error';\n            const diagnostic = {\n                severity: toDiagnosticSeverity(severity),\n                range: {\n                    start: {\n                        line: lexerDiagnostic.line - 1,\n                        character: lexerDiagnostic.column - 1\n                    },\n                    end: {\n                        line: lexerDiagnostic.line - 1,\n                        character: lexerDiagnostic.column + lexerDiagnostic.length - 1\n                    }\n                },\n                message: lexerDiagnostic.message,\n                data: toDiagnosticData(severity),\n                source: this.getSource()\n            };\n            diagnostics.push(diagnostic);\n        }\n    }\n    processParsingErrors(parseResult, diagnostics, _options) {\n        for (const parserError of parseResult.parserErrors) {\n            let range = undefined;\n            // We can run into the chevrotain error recovery here\n            // The token contained in the parser error might be automatically inserted\n            // In this case every position value will be `NaN`\n            if (isNaN(parserError.token.startOffset)) {\n                // Some special parser error types contain a `previousToken`\n                // We can simply append our diagnostic to that token\n                if ('previousToken' in parserError) {\n                    const token = parserError.previousToken;\n                    if (!isNaN(token.startOffset)) {\n                        const position = { line: token.endLine - 1, character: token.endColumn };\n                        range = { start: position, end: position };\n                    }\n                    else {\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\n                        // Point to document start\n                        const position = { line: 0, character: 0 };\n                        range = { start: position, end: position };\n                    }\n                }\n            }\n            else {\n                range = tokenToRange(parserError.token);\n            }\n            if (range) {\n                const diagnostic = {\n                    severity: toDiagnosticSeverity('error'),\n                    range,\n                    message: parserError.message,\n                    data: diagnosticData(DocumentValidator.ParsingError),\n                    source: this.getSource()\n                };\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n    processLinkingErrors(document, diagnostics, _options) {\n        for (const reference of document.references) {\n            const linkingError = reference.error;\n            if (linkingError) {\n                const info = {\n                    node: linkingError.container,\n                    property: linkingError.property,\n                    index: linkingError.index,\n                    data: {\n                        code: DocumentValidator.LinkingError,\n                        containerType: linkingError.container.$type,\n                        property: linkingError.property,\n                        refText: linkingError.reference.$refText\n                    }\n                };\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\n            }\n        }\n    }\n    async validateAst(rootNode, options, cancelToken = CancellationToken.None) {\n        const validationItems = [];\n        const acceptor = (severity, message, info) => {\n            validationItems.push(this.toDiagnostic(severity, message, info));\n        };\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\n        return validationItems;\n    }\n    async validateAstBefore(rootNode, options, acceptor, cancelToken = CancellationToken.None) {\n        var _a;\n        const checksBefore = this.validationRegistry.checksBefore;\n        for (const checkBefore of checksBefore) {\n            await interruptAndCheck(cancelToken);\n            await checkBefore(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n        }\n    }\n    async validateAstNodes(rootNode, options, acceptor, cancelToken = CancellationToken.None) {\n        await Promise.all(streamAst(rootNode).map(async (node) => {\n            await interruptAndCheck(cancelToken);\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n            for (const check of checks) {\n                await check(node, acceptor, cancelToken);\n            }\n        }));\n    }\n    async validateAstAfter(rootNode, options, acceptor, cancelToken = CancellationToken.None) {\n        var _a;\n        const checksAfter = this.validationRegistry.checksAfter;\n        for (const checkAfter of checksAfter) {\n            await interruptAndCheck(cancelToken);\n            await checkAfter(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n        }\n    }\n    toDiagnostic(severity, message, info) {\n        return {\n            message,\n            range: getDiagnosticRange(info),\n            severity: toDiagnosticSeverity(severity),\n            code: info.code,\n            codeDescription: info.codeDescription,\n            tags: info.tags,\n            relatedInformation: info.relatedInformation,\n            data: info.data,\n            source: this.getSource()\n        };\n    }\n    getSource() {\n        return this.metadata.languageId;\n    }\n}\nexport function getDiagnosticRange(info) {\n    if (info.range) {\n        return info.range;\n    }\n    let cstNode;\n    if (typeof info.property === 'string') {\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\n    }\n    else if (typeof info.keyword === 'string') {\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\n    }\n    cstNode !== null && cstNode !== void 0 ? cstNode : (cstNode = info.node.$cstNode);\n    if (!cstNode) {\n        return {\n            start: { line: 0, character: 0 },\n            end: { line: 0, character: 0 }\n        };\n    }\n    return cstNode.range;\n}\n/**\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\n *\n * @param severity The lexing diagnostic severity\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\n */\nexport function toDiagnosticSeverity(severity) {\n    switch (severity) {\n        case 'error':\n            return 1;\n        case 'warning':\n            return 2;\n        case 'info':\n            return 3;\n        case 'hint':\n            return 4;\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\nexport function toDiagnosticData(severity) {\n    switch (severity) {\n        case 'error':\n            return diagnosticData(DocumentValidator.LexingError);\n        case 'warning':\n            return diagnosticData(DocumentValidator.LexingWarning);\n        case 'info':\n            return diagnosticData(DocumentValidator.LexingInfo);\n        case 'hint':\n            return diagnosticData(DocumentValidator.LexingHint);\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\nexport var DocumentValidator;\n(function (DocumentValidator) {\n    DocumentValidator.LexingError = 'lexing-error';\n    DocumentValidator.LexingWarning = 'lexing-warning';\n    DocumentValidator.LexingInfo = 'lexing-info';\n    DocumentValidator.LexingHint = 'lexing-hint';\n    DocumentValidator.ParsingError = 'parsing-error';\n    DocumentValidator.LinkingError = 'linking-error';\n})(DocumentValidator || (DocumentValidator = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { toDocumentSegment } from '../utils/cst-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nexport class DefaultAstNodeDescriptionProvider {\n    constructor(services) {\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n    }\n    createDescription(node, name, document) {\n        const doc = document !== null && document !== void 0 ? document : getDocument(node);\n        name !== null && name !== void 0 ? name : (name = this.nameProvider.getName(node));\n        const path = this.astNodeLocator.getAstNodePath(node);\n        if (!name) {\n            throw new Error(`Node at path ${path} has no name.`);\n        }\n        let nameNodeSegment;\n        const nameSegmentGetter = () => { var _a; return nameNodeSegment !== null && nameNodeSegment !== void 0 ? nameNodeSegment : (nameNodeSegment = toDocumentSegment((_a = this.nameProvider.getNameNode(node)) !== null && _a !== void 0 ? _a : node.$cstNode)); };\n        return {\n            node,\n            name,\n            get nameSegment() {\n                return nameSegmentGetter();\n            },\n            selectionSegment: toDocumentSegment(node.$cstNode),\n            type: node.$type,\n            documentUri: doc.uri,\n            path\n        };\n    }\n}\nexport class DefaultReferenceDescriptionProvider {\n    constructor(services) {\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    async createDescriptions(document, cancelToken = CancellationToken.None) {\n        const descr = [];\n        const rootNode = document.parseResult.value;\n        for (const astNode of streamAst(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\n                const description = this.createDescription(refInfo);\n                if (description) {\n                    descr.push(description);\n                }\n            });\n        }\n        return descr;\n    }\n    createDescription(refInfo) {\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\n        const refCstNode = refInfo.reference.$refNode;\n        if (!targetNodeDescr || !refCstNode) {\n            return undefined;\n        }\n        const docUri = getDocument(refInfo.container).uri;\n        return {\n            sourceUri: docUri,\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\n            targetUri: targetNodeDescr.documentUri,\n            targetPath: targetNodeDescr.path,\n            segment: toDocumentSegment(refCstNode),\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\n        };\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport class DefaultAstNodeLocator {\n    constructor() {\n        this.segmentSeparator = '/';\n        this.indexSeparator = '@';\n    }\n    getAstNodePath(node) {\n        if (node.$container) {\n            const containerPath = this.getAstNodePath(node.$container);\n            const newSegment = this.getPathSegment(node);\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\n            return nodePath;\n        }\n        return '';\n    }\n    getPathSegment({ $containerProperty, $containerIndex }) {\n        if (!$containerProperty) {\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\n        }\n        if ($containerIndex !== undefined) {\n            return $containerProperty + this.indexSeparator + $containerIndex;\n        }\n        return $containerProperty;\n    }\n    getAstNode(node, path) {\n        const segments = path.split(this.segmentSeparator);\n        return segments.reduce((previousValue, currentValue) => {\n            if (!previousValue || currentValue.length === 0) {\n                return previousValue;\n            }\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\n            if (propertyIndex > 0) {\n                const property = currentValue.substring(0, propertyIndex);\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\n                const array = previousValue[property];\n                return array === null || array === void 0 ? void 0 : array[arrayIndex];\n            }\n            return previousValue[currentValue];\n        }, node);\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport var Disposable;\n(function (Disposable) {\n    function create(callback) {\n        return {\n            dispose: async () => await callback()\n        };\n    }\n    Disposable.create = create;\n})(Disposable || (Disposable = {}));\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Emitter } from '../utils/event.js';\nimport { Deferred } from '../utils/promise-utils.js';\n/**\n * Base configuration provider for building up other configuration providers\n */\nexport class DefaultConfigurationProvider {\n    constructor(services) {\n        this._ready = new Deferred();\n        this.settings = {};\n        this.workspaceConfig = false;\n        this.onConfigurationSectionUpdateEmitter = new Emitter();\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    initialize(params) {\n        var _a, _b;\n        this.workspaceConfig = (_b = (_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.configuration) !== null && _b !== void 0 ? _b : false;\n    }\n    async initialized(params) {\n        if (this.workspaceConfig) {\n            if (params.register) {\n                // params.register(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const languages = this.serviceRegistry.all;\n                params.register({\n                    // Listen to configuration changes for all languages\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\n                });\n            }\n            if (params.fetchConfiguration) {\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const configToUpdate = this.serviceRegistry.all.map(lang => ({\n                    // Fetch the configuration changes for all languages\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\n                }));\n                // get workspace configurations (default scope URI)\n                const configs = await params.fetchConfiguration(configToUpdate);\n                configToUpdate.forEach((conf, idx) => {\n                    this.updateSectionConfiguration(conf.section, configs[idx]);\n                });\n            }\n        }\n        this._ready.resolve();\n    }\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change) {\n        if (!change.settings) {\n            return;\n        }\n        Object.keys(change.settings).forEach(section => {\n            const configuration = change.settings[section];\n            this.updateSectionConfiguration(section, configuration);\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\n        });\n    }\n    updateSectionConfiguration(section, configuration) {\n        this.settings[section] = configuration;\n    }\n    /**\n    * Returns a configuration value stored for the given language.\n    *\n    * @param language The language id\n    * @param configuration Configuration name\n    */\n    async getConfiguration(language, configuration) {\n        await this.ready;\n        const sectionName = this.toSectionName(language);\n        if (this.settings[sectionName]) {\n            return this.settings[sectionName][configuration];\n        }\n    }\n    toSectionName(languageId) {\n        return `${languageId}`;\n    }\n    get onConfigurationSectionUpdate() {\n        return this.onConfigurationSectionUpdateEmitter.event;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Disposable } from '../utils/disposable.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { OperationCancelled, interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { ValidationCategory } from '../validation/validation-registry.js';\nimport { DocumentState } from './documents.js';\nexport class DefaultDocumentBuilder {\n    constructor(services) {\n        this.updateBuildOptions = {\n            // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\n            validation: {\n                categories: ['built-in', 'fast']\n            }\n        };\n        this.updateListeners = [];\n        this.buildPhaseListeners = new MultiMap();\n        this.documentPhaseListeners = new MultiMap();\n        this.buildState = new Map();\n        this.documentBuildWaiters = new Map();\n        this.currentState = DocumentState.Changed;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.indexManager = services.workspace.IndexManager;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    async build(documents, options = {}, cancelToken = CancellationToken.None) {\n        var _a, _b;\n        for (const document of documents) {\n            const key = document.uri.toString();\n            if (document.state === DocumentState.Validated) {\n                if (typeof options.validation === 'boolean' && options.validation) {\n                    // Force re-running all validation checks\n                    document.state = DocumentState.IndexedReferences;\n                    document.diagnostics = undefined;\n                    this.buildState.delete(key);\n                }\n                else if (typeof options.validation === 'object') {\n                    const buildState = this.buildState.get(key);\n                    const previousCategories = (_a = buildState === null || buildState === void 0 ? void 0 : buildState.result) === null || _a === void 0 ? void 0 : _a.validationChecks;\n                    if (previousCategories) {\n                        // Validation with explicit options was requested for a document that has already been partly validated.\n                        // In this case, we need to merge the previous validation categories with the new ones.\n                        const newCategories = (_b = options.validation.categories) !== null && _b !== void 0 ? _b : ValidationCategory.all;\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\n                        if (categories.length > 0) {\n                            this.buildState.set(key, {\n                                completed: false,\n                                options: {\n                                    validation: Object.assign(Object.assign({}, options.validation), { categories })\n                                },\n                                result: buildState.result\n                            });\n                            document.state = DocumentState.IndexedReferences;\n                        }\n                    }\n                }\n            }\n            else {\n                // Default: forget any previous build options\n                this.buildState.delete(key);\n            }\n        }\n        this.currentState = DocumentState.Changed;\n        await this.emitUpdate(documents.map(e => e.uri), []);\n        await this.buildDocuments(documents, options, cancelToken);\n    }\n    async update(changed, deleted, cancelToken = CancellationToken.None) {\n        this.currentState = DocumentState.Changed;\n        // Remove all metadata of documents that are reported as deleted\n        for (const deletedUri of deleted) {\n            this.langiumDocuments.deleteDocument(deletedUri);\n            this.buildState.delete(deletedUri.toString());\n            this.indexManager.remove(deletedUri);\n        }\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\n        for (const changedUri of changed) {\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\n            if (!invalidated) {\n                // We create an unparsed, invalid document.\n                // This will be parsed as soon as we reach the first document builder phase.\n                // This allows to cancel the parsing process later in case we need it.\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\n                newDocument.state = DocumentState.Changed;\n                this.langiumDocuments.addDocument(newDocument);\n            }\n            this.buildState.delete(changedUri.toString());\n        }\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\n        this.langiumDocuments.all\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\n            .forEach(doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            linker.unlink(doc);\n            doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\n            doc.diagnostics = undefined;\n        });\n        // Notify listeners of the update\n        await this.emitUpdate(changed, deleted);\n        // Only allow interrupting the execution after all state changes are done\n        await interruptAndCheck(cancelToken);\n        // Collect and sort all documents that we should rebuild\n        const rebuildDocuments = this.sortDocuments(this.langiumDocuments.all\n            .filter(doc => {\n            var _a;\n            // This includes those that were reported as changed and those that we selected for relinking\n            return doc.state < DocumentState.Linked\n                // This includes those for which a previous build has been cancelled\n                || !((_a = this.buildState.get(doc.uri.toString())) === null || _a === void 0 ? void 0 : _a.completed);\n        })\n            .toArray());\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\n    }\n    async emitUpdate(changed, deleted) {\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\n    }\n    /**\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\n     *\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\n     * in files that are currently not opened in the editor.\n     */\n    sortDocuments(documents) {\n        let left = 0;\n        let right = documents.length - 1;\n        while (left < right) {\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\n                left++;\n            }\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\n                right--;\n            }\n            if (left < right) {\n                [documents[left], documents[right]] = [documents[right], documents[left]];\n            }\n        }\n        return documents;\n    }\n    hasTextDocument(doc) {\n        var _a;\n        return Boolean((_a = this.textDocuments) === null || _a === void 0 ? void 0 : _a.get(doc.uri));\n    }\n    /**\n     * Check whether the given document should be relinked after changes were found in the given URIs.\n     */\n    shouldRelink(document, changedUris) {\n        // Relink documents with linking errors -- maybe those references can be resolved now\n        if (document.references.some(ref => ref.error !== undefined)) {\n            return true;\n        }\n        // Check whether the document is affected by any of the changed URIs\n        return this.indexManager.isAffected(document, changedUris);\n    }\n    onUpdate(callback) {\n        this.updateListeners.push(callback);\n        return Disposable.create(() => {\n            const index = this.updateListeners.indexOf(callback);\n            if (index >= 0) {\n                this.updateListeners.splice(index, 1);\n            }\n        });\n    }\n    /**\n     * Build the given documents by stepping through all build phases. If a document's state indicates\n     * that a certain build phase is already done, the phase is skipped for that document.\n     *\n     * @param documents The documents to build.\n     * @param options the {@link BuildOptions} to use.\n     * @param cancelToken A cancellation token that can be used to cancel the build.\n     * @returns A promise that resolves when the build is done.\n     */\n    async buildDocuments(documents, options, cancelToken) {\n        this.prepareBuild(documents, options);\n        // 0. Parse content\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc => this.langiumDocumentFactory.update(doc, cancelToken));\n        // 1. Index content\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc => this.indexManager.updateContent(doc, cancelToken));\n        // 2. Compute scopes\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async (doc) => {\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\n        });\n        // 3. Linking\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            return linker.link(doc, cancelToken);\n        });\n        // 4. Index references\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc => this.indexManager.updateReferences(doc, cancelToken));\n        // 5. Validation\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc => this.validate(doc, cancelToken));\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\n        for (const doc of documents) {\n            const state = this.buildState.get(doc.uri.toString());\n            if (state) {\n                state.completed = true;\n            }\n        }\n    }\n    /**\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\n     *\n     * @param documents collection of documents to be built\n     * @param options the {@link BuildOptions} to use\n     */\n    prepareBuild(documents, options) {\n        for (const doc of documents) {\n            const key = doc.uri.toString();\n            const state = this.buildState.get(key);\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\n            // and continue where it was cancelled.\n            if (!state || state.completed) {\n                this.buildState.set(key, {\n                    completed: false,\n                    options,\n                    result: state === null || state === void 0 ? void 0 : state.result\n                });\n            }\n        }\n    }\n    /**\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\n     *\n     * @param documents The array of documents to process.\n     * @param targetState The target {@link DocumentState} to bring the documents to.\n     * @param cancelToken A token that can be used to cancel the operation.\n     * @param callback A function to be called for each document.\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\n     */\n    async runCancelable(documents, targetState, cancelToken, callback) {\n        const filtered = documents.filter(doc => doc.state < targetState);\n        for (const document of filtered) {\n            await interruptAndCheck(cancelToken);\n            await callback(document);\n            document.state = targetState;\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\n        }\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\n        // For example, this happens in case the cancellation triggers between the processing of two documents\n        // Or files that were picked up during the workspace initialization\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\n        this.currentState = targetState;\n    }\n    onBuildPhase(targetState, callback) {\n        this.buildPhaseListeners.add(targetState, callback);\n        return Disposable.create(() => {\n            this.buildPhaseListeners.delete(targetState, callback);\n        });\n    }\n    onDocumentPhase(targetState, callback) {\n        this.documentPhaseListeners.add(targetState, callback);\n        return Disposable.create(() => {\n            this.documentPhaseListeners.delete(targetState, callback);\n        });\n    }\n    waitUntil(state, uriOrToken, cancelToken) {\n        let uri = undefined;\n        if (uriOrToken && 'path' in uriOrToken) {\n            uri = uriOrToken;\n        }\n        else {\n            cancelToken = uriOrToken;\n        }\n        cancelToken !== null && cancelToken !== void 0 ? cancelToken : (cancelToken = CancellationToken.None);\n        if (uri) {\n            const document = this.langiumDocuments.getDocument(uri);\n            if (document && document.state > state) {\n                return Promise.resolve(uri);\n            }\n        }\n        if (this.currentState >= state) {\n            return Promise.resolve(undefined);\n        }\n        else if (cancelToken.isCancellationRequested) {\n            return Promise.reject(OperationCancelled);\n        }\n        return new Promise((resolve, reject) => {\n            const buildDisposable = this.onBuildPhase(state, () => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                if (uri) {\n                    const document = this.langiumDocuments.getDocument(uri);\n                    resolve(document === null || document === void 0 ? void 0 : document.uri);\n                }\n                else {\n                    resolve(undefined);\n                }\n            });\n            const cancelDisposable = cancelToken.onCancellationRequested(() => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                reject(OperationCancelled);\n            });\n        });\n    }\n    async notifyDocumentPhase(document, state, cancelToken) {\n        const listeners = this.documentPhaseListeners.get(state);\n        const listenersCopy = listeners.slice();\n        for (const listener of listenersCopy) {\n            try {\n                await listener(document, cancelToken);\n            }\n            catch (err) {\n                // Ignore cancellation errors\n                // We want to finish the listeners before throwing\n                if (!isOperationCancelled(err)) {\n                    throw err;\n                }\n            }\n        }\n    }\n    async notifyBuildPhase(documents, state, cancelToken) {\n        if (documents.length === 0) {\n            // Don't notify when no document has been processed\n            return;\n        }\n        const listeners = this.buildPhaseListeners.get(state);\n        const listenersCopy = listeners.slice();\n        for (const listener of listenersCopy) {\n            await interruptAndCheck(cancelToken);\n            await listener(documents, cancelToken);\n        }\n    }\n    /**\n     * Determine whether the given document should be validated during a build. The default\n     * implementation checks the `validation` property of the build options. If it's set to `true`\n     * or a `ValidationOptions` object, the document is included in the validation phase.\n     */\n    shouldValidate(document) {\n        return Boolean(this.getBuildOptions(document).validation);\n    }\n    /**\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\n     * If the document already contains diagnostics, the new ones are added to the list.\n     */\n    async validate(document, cancelToken) {\n        var _a, _b;\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\n        const validationSetting = this.getBuildOptions(document).validation;\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\n        if (document.diagnostics) {\n            document.diagnostics.push(...diagnostics);\n        }\n        else {\n            document.diagnostics = diagnostics;\n        }\n        // Store information about the executed validation in the build state\n        const state = this.buildState.get(document.uri.toString());\n        if (state) {\n            (_a = state.result) !== null && _a !== void 0 ? _a : (state.result = {});\n            const newCategories = (_b = options === null || options === void 0 ? void 0 : options.categories) !== null && _b !== void 0 ? _b : ValidationCategory.all;\n            if (state.result.validationChecks) {\n                state.result.validationChecks.push(...newCategories);\n            }\n            else {\n                state.result.validationChecks = [...newCategories];\n            }\n        }\n    }\n    getBuildOptions(document) {\n        var _a, _b;\n        return (_b = (_a = this.buildState.get(document.uri.toString())) === null || _a === void 0 ? void 0 : _a.options) !== null && _b !== void 0 ? _b : {};\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { getDocument } from '../utils/ast-utils.js';\nimport { ContextCache } from '../utils/caching.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { stream } from '../utils/stream.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nexport class DefaultIndexManager {\n    constructor(services) {\n        /**\n         * The symbol index stores all `AstNodeDescription` items exported by a document.\n         * The key used in this map is the string representation of the specific document URI.\n         */\n        this.symbolIndex = new Map();\n        /**\n         * This is a cache for the `allElements()` method.\n         * It caches the descriptions from `symbolIndex` grouped by types.\n         */\n        this.symbolByTypeIndex = new ContextCache();\n        /**\n         * This index keeps track of all `ReferenceDescription` items exported by a document.\n         * This is used to compute which elements are affected by a document change\n         * and for finding references to an AST node.\n         */\n        this.referenceIndex = new Map();\n        this.documents = services.workspace.LangiumDocuments;\n        this.serviceRegistry = services.ServiceRegistry;\n        this.astReflection = services.AstReflection;\n    }\n    findAllReferences(targetNode, astNodePath) {\n        const targetDocUri = getDocument(targetNode).uri;\n        const result = [];\n        this.referenceIndex.forEach(docRefs => {\n            docRefs.forEach(refDescr => {\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\n                    result.push(refDescr);\n                }\n            });\n        });\n        return stream(result);\n    }\n    allElements(nodeType, uris) {\n        let documentUris = stream(this.symbolIndex.keys());\n        if (uris) {\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\n        }\n        return documentUris\n            .map(uri => this.getFileDescriptions(uri, nodeType))\n            .flat();\n    }\n    getFileDescriptions(uri, nodeType) {\n        var _a;\n        if (!nodeType) {\n            return (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n        }\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\n            var _a;\n            const allFileDescriptions = (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\n        });\n        return descriptions;\n    }\n    remove(uri) {\n        const uriString = uri.toString();\n        this.symbolIndex.delete(uriString);\n        this.symbolByTypeIndex.clear(uriString);\n        this.referenceIndex.delete(uriString);\n    }\n    async updateContent(document, cancelToken = CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\n        const uri = document.uri.toString();\n        this.symbolIndex.set(uri, exports);\n        this.symbolByTypeIndex.clear(uri);\n    }\n    async updateReferences(document, cancelToken = CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\n        this.referenceIndex.set(document.uri.toString(), indexData);\n    }\n    isAffected(document, changedUris) {\n        const references = this.referenceIndex.get(document.uri.toString());\n        if (!references) {\n            return false;\n        }\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\n    }\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\nimport { URI, UriUtils } from '../utils/uri-utils.js';\nexport class DefaultWorkspaceManager {\n    constructor(services) {\n        this.initialBuildOptions = {};\n        this._ready = new Deferred();\n        this.serviceRegistry = services.ServiceRegistry;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.documentBuilder = services.workspace.DocumentBuilder;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n        this.mutex = services.workspace.WorkspaceLock;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    get workspaceFolders() {\n        return this.folders;\n    }\n    initialize(params) {\n        var _a;\n        this.folders = (_a = params.workspaceFolders) !== null && _a !== void 0 ? _a : undefined;\n    }\n    initialized(_params) {\n        // Initialize the workspace even if there are no workspace folders\n        // We still want to load additional documents (language library or similar) during initialization\n        return this.mutex.write(token => { var _a; return this.initializeWorkspace((_a = this.folders) !== null && _a !== void 0 ? _a : [], token); });\n    }\n    async initializeWorkspace(folders, cancelToken = CancellationToken.None) {\n        const documents = await this.performStartup(folders);\n        // Only after creating all documents do we check whether we need to cancel the initialization\n        // The document builder will later pick up on all unprocessed documents\n        await interruptAndCheck(cancelToken);\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\n    }\n    /**\n     * Performs the uninterruptable startup sequence of the workspace manager.\n     * This methods loads all documents in the workspace and other documents and returns them.\n     */\n    async performStartup(folders) {\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\n        const documents = [];\n        const collector = (document) => {\n            documents.push(document);\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\n                this.langiumDocuments.addDocument(document);\n            }\n        };\n        // Even though we don't await the initialization of the workspace manager,\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\n        await this.loadAdditionalDocuments(folders, collector);\n        await Promise.all(folders.map(wf => [wf, this.getRootFolder(wf)])\n            .map(async (entry) => this.traverseFolder(...entry, fileExtensions, collector)));\n        this._ready.resolve();\n        return documents;\n    }\n    /**\n     * Load all additional documents that shall be visible in the context of the given workspace\n     * folders and add them to the collector. This can be used to include built-in libraries of\n     * your language, which can be either loaded from provided files or constructed in memory.\n     */\n    loadAdditionalDocuments(_folders, _collector) {\n        return Promise.resolve();\n    }\n    /**\n     * Determine the root folder of the source documents in the given workspace folder.\n     * The default implementation returns the URI of the workspace folder, but you can override\n     * this to return a subfolder like `src` instead.\n     */\n    getRootFolder(workspaceFolder) {\n        return URI.parse(workspaceFolder.uri);\n    }\n    /**\n     * Traverse the file system folder identified by the given URI and its subfolders. All\n     * contained files that match the file extensions are added to the collector.\n     */\n    async traverseFolder(workspaceFolder, folderPath, fileExtensions, collector) {\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\n        await Promise.all(content.map(async (entry) => {\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\n                if (entry.isDirectory) {\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\n                }\n                else if (entry.isFile) {\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\n                    collector(document);\n                }\n            }\n        }));\n    }\n    /**\n     * Determine whether the given folder entry shall be included while indexing the workspace.\n     */\n    includeEntry(_workspaceFolder, entry, fileExtensions) {\n        const name = UriUtils.basename(entry.uri);\n        if (name.startsWith('.')) {\n            return false;\n        }\n        if (entry.isDirectory) {\n            return name !== 'node_modules' && name !== 'out';\n        }\n        else if (entry.isFile) {\n            const extname = UriUtils.extname(entry.uri);\n            return fileExtensions.includes(extname);\n        }\n        return false;\n    }\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Lexer as ChevrotainLexer, defaultLexerErrorProvider } from 'chevrotain';\nexport class DefaultLexerErrorMessageProvider {\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n        return defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\n    }\n    buildUnableToPopLexerModeMessage(token) {\n        return defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\n    }\n}\nexport const DEFAULT_TOKENIZE_OPTIONS = { mode: 'full' };\nexport class DefaultLexer {\n    constructor(services) {\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\n        this.tokenBuilder = services.parser.TokenBuilder;\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\n        });\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\n        const production = services.LanguageMetaData.mode === 'production';\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\n            positionTracking: 'full',\n            skipValidations: production,\n            errorMessageProvider: this.errorMessageProvider\n        });\n    }\n    get definition() {\n        return this.tokenTypes;\n    }\n    tokenize(text, _options = DEFAULT_TOKENIZE_OPTIONS) {\n        var _a, _b, _c;\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\n        return {\n            tokens: chevrotainResult.tokens,\n            errors: chevrotainResult.errors,\n            hidden: (_a = chevrotainResult.groups.hidden) !== null && _a !== void 0 ? _a : [],\n            report: (_c = (_b = this.tokenBuilder).flushLexingReport) === null || _c === void 0 ? void 0 : _c.call(_b, text)\n        };\n    }\n    toTokenTypeDictionary(buildTokens) {\n        if (isTokenTypeDictionary(buildTokens))\n            return buildTokens;\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\n        const res = {};\n        tokens.forEach(token => res[token.name] = token);\n        return res;\n    }\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenType array\n */\nexport function isTokenTypeArray(tokenVocabulary) {\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\n}\n/**\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\n */\nexport function isIMultiModeLexerDefinition(tokenVocabulary) {\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\n */\nexport function isTokenTypeDictionary(tokenVocabulary) {\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Position, Range } from 'vscode-languageserver-types';\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\nimport { URI } from '../utils/uri-utils.js';\nexport function parseJSDoc(node, start, options) {\n    let opts;\n    let position;\n    if (typeof node === 'string') {\n        position = start;\n        opts = options;\n    }\n    else {\n        position = node.range.start;\n        opts = start;\n    }\n    if (!position) {\n        position = Position.create(0, 0);\n    }\n    const lines = getLines(node);\n    const normalizedOptions = normalizeOptions(opts);\n    const tokens = tokenize({\n        lines,\n        position,\n        options: normalizedOptions\n    });\n    return parseJSDocComment({\n        index: 0,\n        tokens,\n        position\n    });\n}\nexport function isJSDoc(node, options) {\n    const normalizedOptions = normalizeOptions(options);\n    const lines = getLines(node);\n    if (lines.length === 0) {\n        return false;\n    }\n    const first = lines[0];\n    const last = lines[lines.length - 1];\n    const firstRegex = normalizedOptions.start;\n    const lastRegex = normalizedOptions.end;\n    return Boolean(firstRegex === null || firstRegex === void 0 ? void 0 : firstRegex.exec(first)) && Boolean(lastRegex === null || lastRegex === void 0 ? void 0 : lastRegex.exec(last));\n}\nfunction getLines(node) {\n    let content = '';\n    if (typeof node === 'string') {\n        content = node;\n    }\n    else {\n        content = node.text;\n    }\n    const lines = content.split(NEWLINE_REGEXP);\n    return lines;\n}\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\nfunction tokenize(context) {\n    var _a, _b, _c;\n    const tokens = [];\n    let currentLine = context.position.line;\n    let currentCharacter = context.position.character;\n    for (let i = 0; i < context.lines.length; i++) {\n        const first = i === 0;\n        const last = i === context.lines.length - 1;\n        let line = context.lines[i];\n        let index = 0;\n        if (first && context.options.start) {\n            const match = (_a = context.options.start) === null || _a === void 0 ? void 0 : _a.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        else {\n            const match = (_b = context.options.line) === null || _b === void 0 ? void 0 : _b.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        if (last) {\n            const match = (_c = context.options.end) === null || _c === void 0 ? void 0 : _c.exec(line);\n            if (match) {\n                line = line.substring(0, match.index);\n            }\n        }\n        line = line.substring(0, lastCharacter(line));\n        const whitespaceEnd = skipWhitespace(line, index);\n        if (whitespaceEnd >= line.length) {\n            // Only create a break token when we already have previous tokens\n            if (tokens.length > 0) {\n                const position = Position.create(currentLine, currentCharacter);\n                tokens.push({\n                    type: 'break',\n                    content: '',\n                    range: Range.create(position, position)\n                });\n            }\n        }\n        else {\n            tagRegex.lastIndex = index;\n            const tagMatch = tagRegex.exec(line);\n            if (tagMatch) {\n                const fullMatch = tagMatch[0];\n                const value = tagMatch[1];\n                const start = Position.create(currentLine, currentCharacter + index);\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\n                tokens.push({\n                    type: 'tag',\n                    content: value,\n                    range: Range.create(start, end)\n                });\n                index += fullMatch.length;\n                index = skipWhitespace(line, index);\n            }\n            if (index < line.length) {\n                const rest = line.substring(index);\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\n            }\n        }\n        currentLine++;\n        currentCharacter = 0;\n    }\n    // Remove last break token if there is one\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\n        return tokens.slice(0, -1);\n    }\n    return tokens;\n}\nfunction buildInlineTokens(tags, line, lineIndex, characterIndex) {\n    const tokens = [];\n    if (tags.length === 0) {\n        const start = Position.create(lineIndex, characterIndex);\n        const end = Position.create(lineIndex, characterIndex + line.length);\n        tokens.push({\n            type: 'text',\n            content: line,\n            range: Range.create(start, end)\n        });\n    }\n    else {\n        let lastIndex = 0;\n        for (const match of tags) {\n            const matchIndex = match.index;\n            const startContent = line.substring(lastIndex, matchIndex);\n            if (startContent.length > 0) {\n                tokens.push({\n                    type: 'text',\n                    content: line.substring(lastIndex, matchIndex),\n                    range: Range.create(Position.create(lineIndex, lastIndex + characterIndex), Position.create(lineIndex, matchIndex + characterIndex))\n                });\n            }\n            let offset = startContent.length + 1;\n            const tagName = match[1];\n            tokens.push({\n                type: 'inline-tag',\n                content: tagName,\n                range: Range.create(Position.create(lineIndex, lastIndex + offset + characterIndex), Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex))\n            });\n            offset += tagName.length;\n            if (match.length === 4) {\n                offset += match[2].length;\n                const value = match[3];\n                tokens.push({\n                    type: 'text',\n                    content: value,\n                    range: Range.create(Position.create(lineIndex, lastIndex + offset + characterIndex), Position.create(lineIndex, lastIndex + offset + value.length + characterIndex))\n                });\n            }\n            else {\n                tokens.push({\n                    type: 'text',\n                    content: '',\n                    range: Range.create(Position.create(lineIndex, lastIndex + offset + characterIndex), Position.create(lineIndex, lastIndex + offset + characterIndex))\n                });\n            }\n            lastIndex = matchIndex + match[0].length;\n        }\n        const endContent = line.substring(lastIndex);\n        if (endContent.length > 0) {\n            tokens.push({\n                type: 'text',\n                content: endContent,\n                range: Range.create(Position.create(lineIndex, lastIndex + characterIndex), Position.create(lineIndex, lastIndex + characterIndex + endContent.length))\n            });\n        }\n    }\n    return tokens;\n}\nconst nonWhitespaceRegex = /\\S/;\nconst whitespaceEndRegex = /\\s*$/;\nfunction skipWhitespace(line, index) {\n    const match = line.substring(index).match(nonWhitespaceRegex);\n    if (match) {\n        return index + match.index;\n    }\n    else {\n        return line.length;\n    }\n}\nfunction lastCharacter(line) {\n    const match = line.match(whitespaceEndRegex);\n    if (match && typeof match.index === 'number') {\n        return match.index;\n    }\n    return undefined;\n}\n// Parsing\nfunction parseJSDocComment(context) {\n    var _a, _b, _c, _d;\n    const startPosition = Position.create(context.position.line, context.position.character);\n    if (context.tokens.length === 0) {\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\n    }\n    const elements = [];\n    while (context.index < context.tokens.length) {\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\n        if (element) {\n            elements.push(element);\n        }\n    }\n    const start = (_b = (_a = elements[0]) === null || _a === void 0 ? void 0 : _a.range.start) !== null && _b !== void 0 ? _b : startPosition;\n    const end = (_d = (_c = elements[elements.length - 1]) === null || _c === void 0 ? void 0 : _c.range.end) !== null && _d !== void 0 ? _d : startPosition;\n    return new JSDocCommentImpl(elements, Range.create(start, end));\n}\nfunction parseJSDocElement(context, last) {\n    const next = context.tokens[context.index];\n    if (next.type === 'tag') {\n        return parseJSDocTag(context, false);\n    }\n    else if (next.type === 'text' || next.type === 'inline-tag') {\n        return parseJSDocText(context);\n    }\n    else {\n        appendEmptyLine(next, last);\n        context.index++;\n        return undefined;\n    }\n}\nfunction appendEmptyLine(token, element) {\n    if (element) {\n        const line = new JSDocLineImpl('', token.range);\n        if ('inlines' in element) {\n            element.inlines.push(line);\n        }\n        else {\n            element.content.inlines.push(line);\n        }\n    }\n}\nfunction parseJSDocText(context) {\n    let token = context.tokens[context.index];\n    const firstToken = token;\n    let lastToken = token;\n    const lines = [];\n    while (token && token.type !== 'break' && token.type !== 'tag') {\n        lines.push(parseJSDocInline(context));\n        lastToken = token;\n        token = context.tokens[context.index];\n    }\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\n}\nfunction parseJSDocInline(context) {\n    const token = context.tokens[context.index];\n    if (token.type === 'inline-tag') {\n        return parseJSDocTag(context, true);\n    }\n    else {\n        return parseJSDocLine(context);\n    }\n}\nfunction parseJSDocTag(context, inline) {\n    const tagToken = context.tokens[context.index++];\n    const name = tagToken.content.substring(1);\n    const nextToken = context.tokens[context.index];\n    if ((nextToken === null || nextToken === void 0 ? void 0 : nextToken.type) === 'text') {\n        if (inline) {\n            const docLine = parseJSDocLine(context);\n            return new JSDocTagImpl(name, new JSDocTextImpl([docLine], docLine.range), inline, Range.create(tagToken.range.start, docLine.range.end));\n        }\n        else {\n            const textDoc = parseJSDocText(context);\n            return new JSDocTagImpl(name, textDoc, inline, Range.create(tagToken.range.start, textDoc.range.end));\n        }\n    }\n    else {\n        const range = tagToken.range;\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\n    }\n}\nfunction parseJSDocLine(context) {\n    const token = context.tokens[context.index++];\n    return new JSDocLineImpl(token.content, token.range);\n}\nfunction normalizeOptions(options) {\n    if (!options) {\n        return normalizeOptions({\n            start: '/**',\n            end: '*/',\n            line: '*'\n        });\n    }\n    const { start, end, line } = options;\n    return {\n        start: normalizeOption(start, true),\n        end: normalizeOption(end, false),\n        line: normalizeOption(line, true)\n    };\n}\nfunction normalizeOption(option, start) {\n    if (typeof option === 'string' || typeof option === 'object') {\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\n        if (start) {\n            return new RegExp(`^\\\\s*${escaped}`);\n        }\n        else {\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\n        }\n    }\n    else {\n        return option;\n    }\n}\nclass JSDocCommentImpl {\n    constructor(elements, range) {\n        this.elements = elements;\n        this.range = range;\n    }\n    getTag(name) {\n        return this.getAllTags().find(e => e.name === name);\n    }\n    getTags(name) {\n        return this.getAllTags().filter(e => e.name === name);\n    }\n    getAllTags() {\n        return this.elements.filter((e) => 'name' in e);\n    }\n    toString() {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toString();\n            }\n            else {\n                const text = element.toString();\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n    toMarkdown(options) {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toMarkdown(options);\n            }\n            else {\n                const text = element.toMarkdown(options);\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n}\nclass JSDocTagImpl {\n    constructor(name, content, inline, range) {\n        this.name = name;\n        this.content = content;\n        this.inline = inline;\n        this.range = range;\n    }\n    toString() {\n        let text = `@${this.name}`;\n        const content = this.content.toString();\n        if (this.content.inlines.length === 1) {\n            text = `${text} ${content}`;\n        }\n        else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        }\n        else {\n            return text;\n        }\n    }\n    toMarkdown(options) {\n        var _a, _b;\n        return (_b = (_a = options === null || options === void 0 ? void 0 : options.renderTag) === null || _a === void 0 ? void 0 : _a.call(options, this)) !== null && _b !== void 0 ? _b : this.toMarkdownDefault(options);\n    }\n    toMarkdownDefault(options) {\n        const content = this.content.toMarkdown(options);\n        if (this.inline) {\n            const rendered = renderInlineTag(this.name, content, options !== null && options !== void 0 ? options : {});\n            if (typeof rendered === 'string') {\n                return rendered;\n            }\n        }\n        let marker = '';\n        if ((options === null || options === void 0 ? void 0 : options.tag) === 'italic' || (options === null || options === void 0 ? void 0 : options.tag) === undefined) {\n            marker = '*';\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.tag) === 'bold') {\n            marker = '**';\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.tag) === 'bold-italic') {\n            marker = '***';\n        }\n        let text = `${marker}@${this.name}${marker}`;\n        if (this.content.inlines.length === 1) {\n            text = `${text} — ${content}`;\n        }\n        else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        }\n        else {\n            return text;\n        }\n    }\n}\nfunction renderInlineTag(tag, content, options) {\n    var _a, _b;\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\n        const index = content.indexOf(' ');\n        let display = content;\n        if (index > 0) {\n            const displayStart = skipWhitespace(content, index);\n            display = content.substring(displayStart);\n            content = content.substring(0, index);\n        }\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\n            // Surround the display value in a markdown inline code block\n            display = `\\`${display}\\``;\n        }\n        const renderedLink = (_b = (_a = options.renderLink) === null || _a === void 0 ? void 0 : _a.call(options, content, display)) !== null && _b !== void 0 ? _b : renderLinkDefault(content, display);\n        return renderedLink;\n    }\n    return undefined;\n}\nfunction renderLinkDefault(content, display) {\n    try {\n        URI.parse(content, true);\n        return `[${display}](${content})`;\n    }\n    catch (_a) {\n        return content;\n    }\n}\nclass JSDocTextImpl {\n    constructor(lines, range) {\n        this.inlines = lines;\n        this.range = range;\n    }\n    toString() {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toString();\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n    toMarkdown(options) {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toMarkdown(options);\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n}\nclass JSDocLineImpl {\n    constructor(text, range) {\n        this.text = text;\n        this.range = range;\n    }\n    toString() {\n        return this.text;\n    }\n    toMarkdown() {\n        return this.text;\n    }\n}\nfunction fillNewlines(text) {\n    if (text.endsWith('\\n')) {\n        return '\\n';\n    }\n    else {\n        return '\\n\\n';\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\nexport class JSDocDocumentationProvider {\n    constructor(services) {\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    getDocumentation(node) {\n        const comment = this.commentProvider.getComment(node);\n        if (comment && isJSDoc(comment)) {\n            const parsedJSDoc = parseJSDoc(comment);\n            return parsedJSDoc.toMarkdown({\n                renderLink: (link, display) => {\n                    return this.documentationLinkRenderer(node, link, display);\n                },\n                renderTag: (tag) => {\n                    return this.documentationTagRenderer(node, tag);\n                }\n            });\n        }\n        return undefined;\n    }\n    documentationLinkRenderer(node, name, display) {\n        var _a;\n        const description = (_a = this.findNameInPrecomputedScopes(node, name)) !== null && _a !== void 0 ? _a : this.findNameInGlobalScope(node, name);\n        if (description && description.nameSegment) {\n            const line = description.nameSegment.range.start.line + 1;\n            const character = description.nameSegment.range.start.character + 1;\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\n            return `[${display}](${uri.toString()})`;\n        }\n        else {\n            return undefined;\n        }\n    }\n    documentationTagRenderer(_node, _tag) {\n        // Fall back to the default tag rendering\n        return undefined;\n    }\n    findNameInPrecomputedScopes(node, name) {\n        const document = getDocument(node);\n        const precomputed = document.precomputedScopes;\n        if (!precomputed) {\n            return undefined;\n        }\n        let currentNode = node;\n        do {\n            const allDescriptions = precomputed.get(currentNode);\n            const description = allDescriptions.find(e => e.name === name);\n            if (description) {\n                return description;\n            }\n            currentNode = currentNode.$container;\n        } while (currentNode);\n        return undefined;\n    }\n    findNameInGlobalScope(node, name) {\n        const description = this.indexManager.allElements().find(e => e.name === name);\n        return description;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\nimport { findCommentNode } from '../utils/cst-utils.js';\nexport class DefaultCommentProvider {\n    constructor(services) {\n        this.grammarConfig = () => services.parser.GrammarConfig;\n    }\n    getComment(node) {\n        var _a;\n        if (isAstNodeWithComment(node)) {\n            return node.$comment;\n        }\n        return (_a = findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)) === null || _a === void 0 ? void 0 : _a.text;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\nimport { Emitter } from '../utils/event.js';\n/**\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\n *\n * @remarks\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nexport class DefaultAsyncParser {\n    constructor(services) {\n        this.syncParser = services.parser.LangiumParser;\n    }\n    parse(text, _cancelToken) {\n        return Promise.resolve(this.syncParser.parse(text));\n    }\n}\nexport class AbstractThreadedAsyncParser {\n    constructor(services) {\n        /**\n         * The thread count determines how many threads are used to parse files in parallel.\n         * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\n         */\n        this.threadCount = 8;\n        /**\n         * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\n         * The default value is 200(ms).\n         */\n        this.terminationDelay = 200;\n        this.workerPool = [];\n        this.queue = [];\n        this.hydrator = services.serializer.Hydrator;\n    }\n    initializeWorkers() {\n        while (this.workerPool.length < this.threadCount) {\n            const worker = this.createWorker();\n            worker.onReady(() => {\n                if (this.queue.length > 0) {\n                    const deferred = this.queue.shift();\n                    if (deferred) {\n                        worker.lock();\n                        deferred.resolve(worker);\n                    }\n                }\n            });\n            this.workerPool.push(worker);\n        }\n    }\n    async parse(text, cancelToken) {\n        const worker = await this.acquireParserWorker(cancelToken);\n        const deferred = new Deferred();\n        let timeout;\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\n        const cancellation = cancelToken.onCancellationRequested(() => {\n            timeout = setTimeout(() => {\n                this.terminateWorker(worker);\n            }, this.terminationDelay);\n        });\n        worker.parse(text).then(result => {\n            const hydrated = this.hydrator.hydrate(result);\n            deferred.resolve(hydrated);\n        }).catch(err => {\n            deferred.reject(err);\n        }).finally(() => {\n            cancellation.dispose();\n            clearTimeout(timeout);\n        });\n        return deferred.promise;\n    }\n    terminateWorker(worker) {\n        worker.terminate();\n        const index = this.workerPool.indexOf(worker);\n        if (index >= 0) {\n            this.workerPool.splice(index, 1);\n        }\n    }\n    async acquireParserWorker(cancelToken) {\n        this.initializeWorkers();\n        for (const worker of this.workerPool) {\n            if (worker.ready) {\n                worker.lock();\n                return worker;\n            }\n        }\n        const deferred = new Deferred();\n        cancelToken.onCancellationRequested(() => {\n            const index = this.queue.indexOf(deferred);\n            if (index >= 0) {\n                this.queue.splice(index, 1);\n            }\n            deferred.reject(OperationCancelled);\n        });\n        this.queue.push(deferred);\n        return deferred.promise;\n    }\n}\nexport class ParserWorker {\n    get ready() {\n        return this._ready;\n    }\n    get onReady() {\n        return this.onReadyEmitter.event;\n    }\n    constructor(sendMessage, onMessage, onError, terminate) {\n        this.onReadyEmitter = new Emitter();\n        this.deferred = new Deferred();\n        this._ready = true;\n        this._parsing = false;\n        this.sendMessage = sendMessage;\n        this._terminate = terminate;\n        onMessage(result => {\n            const parseResult = result;\n            this.deferred.resolve(parseResult);\n            this.unlock();\n        });\n        onError(error => {\n            this.deferred.reject(error);\n            this.unlock();\n        });\n    }\n    terminate() {\n        this.deferred.reject(OperationCancelled);\n        this._terminate();\n    }\n    lock() {\n        this._ready = false;\n    }\n    unlock() {\n        this._parsing = false;\n        this._ready = true;\n        this.onReadyEmitter.fire();\n    }\n    parse(text) {\n        if (this._parsing) {\n            throw new Error('Parser worker is busy');\n        }\n        this._parsing = true;\n        this.deferred = new Deferred();\n        this.sendMessage(text);\n        return this.deferred.promise;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\nimport { Deferred, isOperationCancelled, startCancelableOperation } from '../utils/promise-utils.js';\nexport class DefaultWorkspaceLock {\n    constructor() {\n        this.previousTokenSource = new CancellationTokenSource();\n        this.writeQueue = [];\n        this.readQueue = [];\n        this.done = true;\n    }\n    write(action) {\n        this.cancelWrite();\n        const tokenSource = startCancelableOperation();\n        this.previousTokenSource = tokenSource;\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\n    }\n    read(action) {\n        return this.enqueue(this.readQueue, action);\n    }\n    enqueue(queue, action, cancellationToken = CancellationToken.None) {\n        const deferred = new Deferred();\n        const entry = {\n            action,\n            deferred,\n            cancellationToken\n        };\n        queue.push(entry);\n        this.performNextOperation();\n        return deferred.promise;\n    }\n    async performNextOperation() {\n        if (!this.done) {\n            return;\n        }\n        const entries = [];\n        if (this.writeQueue.length > 0) {\n            // Just perform the next write action\n            entries.push(this.writeQueue.shift());\n        }\n        else if (this.readQueue.length > 0) {\n            // Empty the read queue and perform all actions in parallel\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\n        }\n        else {\n            return;\n        }\n        this.done = false;\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\n            try {\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\n                const result = await Promise.resolve().then(() => action(cancellationToken));\n                deferred.resolve(result);\n            }\n            catch (err) {\n                if (isOperationCancelled(err)) {\n                    // If the operation was cancelled, we don't want to reject the promise\n                    deferred.resolve(undefined);\n                }\n                else {\n                    deferred.reject(err);\n                }\n            }\n        }));\n        this.done = true;\n        this.performNextOperation();\n    }\n    cancelWrite() {\n        this.previousTokenSource.cancel();\n    }\n}\n","/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\nimport { isAbstractElement } from '../languages/generated/ast.js';\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { BiMap } from '../utils/collections.js';\nimport { streamCst } from '../utils/cst-utils.js';\nexport class DefaultHydrator {\n    constructor(services) {\n        this.grammarElementIdMap = new BiMap();\n        this.tokenTypeIdMap = new BiMap();\n        this.grammar = services.Grammar;\n        this.lexer = services.parser.Lexer;\n        this.linker = services.references.Linker;\n    }\n    dehydrate(result) {\n        return {\n            lexerErrors: result.lexerErrors,\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\n            // We need to create shallow copies of the errors\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\n            parserErrors: result.parserErrors.map(e => (Object.assign(Object.assign({}, e), { message: e.message }))),\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\n        };\n    }\n    dehydrateLexerReport(lexerReport) {\n        // By default, lexer reports are serializable\n        return lexerReport;\n    }\n    createDehyrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {});\n        }\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                cstNodes.set(cstNode, {});\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    dehydrateAstNode(node, context) {\n        const obj = context.astNodes.get(node);\n        obj.$type = node.$type;\n        obj.$containerIndex = node.$containerIndex;\n        obj.$containerProperty = node.$containerProperty;\n        if (node.$cstNode !== undefined) {\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                obj[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.dehydrateAstNode(item, context));\n                    }\n                    else if (isReference(item)) {\n                        arr.push(this.dehydrateReference(item, context));\n                    }\n                    else {\n                        arr.push(item);\n                    }\n                }\n            }\n            else if (isAstNode(value)) {\n                obj[name] = this.dehydrateAstNode(value, context);\n            }\n            else if (isReference(value)) {\n                obj[name] = this.dehydrateReference(value, context);\n            }\n            else if (value !== undefined) {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n    dehydrateReference(reference, context) {\n        const obj = {};\n        obj.$refText = reference.$refText;\n        if (reference.$refNode) {\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\n        }\n        return obj;\n    }\n    dehydrateCstNode(node, context) {\n        const cstNode = context.cstNodes.get(node);\n        if (isRootCstNode(node)) {\n            cstNode.fullText = node.fullText;\n        }\n        else {\n            // Note: This returns undefined for hidden nodes (i.e. comments)\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\n        }\n        cstNode.hidden = node.hidden;\n        cstNode.astNode = context.astNodes.get(node.astNode);\n        if (isCompositeCstNode(node)) {\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\n        }\n        else if (isLeafCstNode(node)) {\n            cstNode.tokenType = node.tokenType.name;\n            cstNode.offset = node.offset;\n            cstNode.length = node.length;\n            cstNode.startLine = node.range.start.line;\n            cstNode.startColumn = node.range.start.character;\n            cstNode.endLine = node.range.end.line;\n            cstNode.endColumn = node.range.end.character;\n        }\n        return cstNode;\n    }\n    hydrate(result) {\n        const node = result.value;\n        const context = this.createHydrationContext(node);\n        if ('$cstNode' in node) {\n            this.hydrateCstNode(node.$cstNode, context);\n        }\n        return {\n            lexerErrors: result.lexerErrors,\n            lexerReport: result.lexerReport,\n            parserErrors: result.parserErrors,\n            value: this.hydrateAstNode(node, context)\n        };\n    }\n    createHydrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {});\n        }\n        let root;\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                let cst;\n                if ('fullText' in cstNode) {\n                    cst = new RootCstNodeImpl(cstNode.fullText);\n                    root = cst;\n                }\n                else if ('content' in cstNode) {\n                    cst = new CompositeCstNodeImpl();\n                }\n                else if ('tokenType' in cstNode) {\n                    cst = this.hydrateCstLeafNode(cstNode);\n                }\n                if (cst) {\n                    cstNodes.set(cstNode, cst);\n                    cst.root = root;\n                }\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    hydrateAstNode(node, context) {\n        const astNode = context.astNodes.get(node);\n        astNode.$type = node.$type;\n        astNode.$containerIndex = node.$containerIndex;\n        astNode.$containerProperty = node.$containerProperty;\n        if (node.$cstNode) {\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                astNode[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\n                    }\n                    else if (isReference(item)) {\n                        arr.push(this.hydrateReference(item, astNode, name, context));\n                    }\n                    else {\n                        arr.push(item);\n                    }\n                }\n            }\n            else if (isAstNode(value)) {\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\n            }\n            else if (isReference(value)) {\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\n            }\n            else if (value !== undefined) {\n                astNode[name] = value;\n            }\n        }\n        return astNode;\n    }\n    setParent(node, parent) {\n        node.$container = parent;\n        return node;\n    }\n    hydrateReference(reference, node, name, context) {\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode), reference.$refText);\n    }\n    hydrateCstNode(cstNode, context, num = 0) {\n        const cstNodeObj = context.cstNodes.get(cstNode);\n        if (typeof cstNode.grammarSource === 'number') {\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\n        }\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode);\n        if (isCompositeCstNode(cstNodeObj)) {\n            for (const child of cstNode.content) {\n                const hydrated = this.hydrateCstNode(child, context, num++);\n                cstNodeObj.content.push(hydrated);\n            }\n        }\n        return cstNodeObj;\n    }\n    hydrateCstLeafNode(cstNode) {\n        const tokenType = this.getTokenType(cstNode.tokenType);\n        const offset = cstNode.offset;\n        const length = cstNode.length;\n        const startLine = cstNode.startLine;\n        const startColumn = cstNode.startColumn;\n        const endLine = cstNode.endLine;\n        const endColumn = cstNode.endColumn;\n        const hidden = cstNode.hidden;\n        const node = new LeafCstNodeImpl(offset, length, {\n            start: {\n                line: startLine,\n                character: startColumn\n            },\n            end: {\n                line: endLine,\n                character: endColumn\n            }\n        }, tokenType, hidden);\n        return node;\n    }\n    getTokenType(name) {\n        return this.lexer.definition[name];\n    }\n    getGrammarElementId(node) {\n        if (!node) {\n            return undefined;\n        }\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        return this.grammarElementIdMap.get(node);\n    }\n    getGrammarElement(id) {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        const element = this.grammarElementIdMap.getKey(id);\n        return element;\n    }\n    createGrammarElementIdMap() {\n        let id = 0;\n        for (const element of streamAst(this.grammar)) {\n            if (isAbstractElement(element)) {\n                this.grammarElementIdMap.set(element, id++);\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/\nimport { createGrammarConfig } from './languages/grammar-config.js';\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\nimport { DefaultValueConverter } from './parser/value-converter.js';\nimport { DefaultLinker } from './references/linker.js';\nimport { DefaultNameProvider } from './references/name-provider.js';\nimport { DefaultReferences } from './references/references.js';\nimport { DefaultScopeComputation } from './references/scope-computation.js';\nimport { DefaultScopeProvider } from './references/scope-provider.js';\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\nimport { DefaultServiceRegistry } from './service-registry.js';\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\nimport { ValidationRegistry } from './validation/validation-registry.js';\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\nimport { DefaultIndexManager } from './workspace/index-manager.js';\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\nimport { DefaultAsyncParser } from './parser/async-parser.js';\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\nimport { DefaultHydrator } from './serializer/hydrator.js';\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */\nexport function createDefaultCoreModule(context) {\n    return {\n        documentation: {\n            CommentProvider: (services) => new DefaultCommentProvider(services),\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\n        },\n        parser: {\n            AsyncParser: (services) => new DefaultAsyncParser(services),\n            GrammarConfig: (services) => createGrammarConfig(services),\n            LangiumParser: (services) => createLangiumParser(services),\n            CompletionParser: (services) => createCompletionParser(services),\n            ValueConverter: () => new DefaultValueConverter(),\n            TokenBuilder: () => new DefaultTokenBuilder(),\n            Lexer: (services) => new DefaultLexer(services),\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\n            LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\n        },\n        workspace: {\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\n        },\n        references: {\n            Linker: (services) => new DefaultLinker(services),\n            NameProvider: () => new DefaultNameProvider(),\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\n            References: (services) => new DefaultReferences(services)\n        },\n        serializer: {\n            Hydrator: (services) => new DefaultHydrator(services),\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\n        },\n        validation: {\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\n            ValidationRegistry: (services) => new ValidationRegistry(services)\n        },\n        shared: () => context.shared\n    };\n}\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */\nexport function createDefaultSharedCoreModule(context) {\n    return {\n        ServiceRegistry: (services) => new DefaultServiceRegistry(services),\n        workspace: {\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\n            IndexManager: (services) => new DefaultIndexManager(services),\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\n        }\n    };\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\nimport { isMultilineComment } from '../utils/regexp-utils.js';\nimport { isTerminalRule } from './generated/ast.js';\n/**\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\n * language-specific module.\n */\nexport function createGrammarConfig(services) {\n    const rules = [];\n    const grammar = services.Grammar;\n    for (const rule of grammar.rules) {\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\n            rules.push(rule.name);\n        }\n    }\n    return {\n        multilineCommentRules: rules,\n        nameRegexp: DefaultNameRegexp\n    };\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { LangiumParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\n/**\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\n * available at `services.Grammar`.\n */\nexport function createLangiumParser(services) {\n    const parser = prepareLangiumParser(services);\n    parser.finalize();\n    return parser;\n}\n/**\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\n * information when the parser is initially validated.\n */\nexport function prepareLangiumParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumParser(services);\n    return createParser(grammar, parser, lexer.definition);\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { LangiumCompletionParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\nexport function createCompletionParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumCompletionParser(services);\n    createParser(grammar, parser, lexer.definition);\n    parser.finalize();\n    return parser;\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport var Module;\n(function (Module) {\n    Module.merge = (m1, m2) => _merge(_merge({}, m1), m2);\n})(Module || (Module = {}));\n/**\n * Given a set of modules, the inject function returns a lazily evaluated injector\n * that injects dependencies into the requested service when it is requested the\n * first time. Subsequent requests will return the same service.\n *\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\n * by injecting a provider `() => T` instead of a `T`.\n *\n * Please note that the arguments may be objects or arrays. However, the result will\n * be an object. Using it with for..of will have no effect.\n *\n * @param module1 first Module\n * @param module2 (optional) second Module\n * @param module3 (optional) third Module\n * @param module4 (optional) fourth Module\n * @param module5 (optional) fifth Module\n * @param module6 (optional) sixth Module\n * @param module7 (optional) seventh Module\n * @param module8 (optional) eighth Module\n * @param module9 (optional) ninth Module\n * @returns a new object of type I\n */\nexport function inject(module1, module2, module3, module4, module5, module6, module7, module8, module9) {\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {});\n    return _inject(module);\n}\nconst isProxy = Symbol('isProxy');\n/**\n * Eagerly load all services in the given dependency injection container. This is sometimes\n * necessary because services can register event listeners in their constructors.\n */\nexport function eagerLoad(item) {\n    if (item && item[isProxy]) {\n        for (const value of Object.values(item)) {\n            eagerLoad(value);\n        }\n    }\n    return item;\n}\n/**\n * Helper function that returns an injector by creating a proxy.\n * Invariant: injector is of type I. If injector is undefined, then T = I.\n */\nfunction _inject(module, injector) {\n    const proxy = new Proxy({}, {\n        deleteProperty: () => false,\n        set: () => {\n            throw new Error('Cannot set property on injected service container');\n        },\n        get: (obj, prop) => {\n            if (prop === isProxy) {\n                return true;\n            }\n            else {\n                return _resolve(obj, prop, module, injector || proxy);\n            }\n        },\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\n        has: (_, prop) => prop in module, // used by ..in..\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\n    });\n    return proxy;\n}\n/**\n * Internally used to tag a requested dependency, directly before calling the factory.\n * This allows us to find cycles during instance creation.\n */\nconst __requested__ = Symbol();\n/**\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\n * the module description. The result of service factories is cached. Groups are\n * recursively proxied.\n *\n * @param obj an object holding all group proxies and services\n * @param prop the key of a value within obj\n * @param module an object containing groups and service factories\n * @param injector the first level proxy that provides access to all values\n * @returns the requested value `obj[prop]`\n * @throws Error if a dependency cycle is detected\n */\nfunction _resolve(obj, prop, module, injector) {\n    if (prop in obj) {\n        if (obj[prop] instanceof Error) {\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', { cause: obj[prop] });\n        }\n        if (obj[prop] === __requested__) {\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\n        }\n        return obj[prop];\n    }\n    else if (prop in module) {\n        const value = module[prop];\n        obj[prop] = __requested__;\n        try {\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\n        }\n        catch (error) {\n            obj[prop] = error instanceof Error ? error : undefined;\n            throw error;\n        }\n        return obj[prop];\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * Performs a deep-merge of two modules by writing source entries into the target module.\n *\n * @param target the module which is written\n * @param source the module which is read\n * @returns the target module\n */\nfunction _merge(target, source) {\n    if (source) {\n        for (const [key, value2] of Object.entries(source)) {\n            if (value2 !== undefined) {\n                const value1 = target[key];\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\n                    target[key] = _merge(value1, value2);\n                }\n                else {\n                    target[key] = value2;\n                }\n            }\n        }\n    }\n    return target;\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport class EmptyFileSystemProvider {\n    readFile() {\n        throw new Error('No file system is available.');\n    }\n    async readDirectory() {\n        return [];\n    }\n}\nexport const EmptyFileSystem = {\n    fileSystemProvider: () => new EmptyFileSystemProvider()\n};\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\nimport { inject } from '../dependency-injection.js';\nimport * as ast from '../languages/generated/ast.js';\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\nimport { URI } from './uri-utils.js';\nconst minimalGrammarModule = {\n    Grammar: () => undefined,\n    LanguageMetaData: () => ({\n        caseInsensitive: false,\n        fileExtensions: ['.langium'],\n        languageId: 'langium'\n    })\n};\nconst minimalSharedGrammarModule = {\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\n};\nfunction createMinimalGrammarServices() {\n    const shared = inject(createDefaultSharedCoreModule(EmptyFileSystem), minimalSharedGrammarModule);\n    const grammar = inject(createDefaultCoreModule({ shared }), minimalGrammarModule);\n    shared.ServiceRegistry.register(grammar);\n    return grammar;\n}\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */\nexport function loadGrammarFromJson(json) {\n    var _a;\n    const services = createMinimalGrammarServices();\n    const astNode = services.serializer.JsonSerializer.deserialize(json);\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${(_a = astNode.name) !== null && _a !== void 0 ? _a : 'grammar'}.langium`));\n    return astNode;\n}\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Axis = \"Axis\";\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar ClassDefStatement = \"ClassDefStatement\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Curve = \"Curve\";\nvar Edge = \"Edge\";\nvar Entry = \"Entry\";\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Group = \"Group\";\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Item = \"Item\";\nvar Junction = \"Junction\";\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Option = \"Option\";\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Radar = \"Radar\";\nvar Service = \"Service\";\nvar Treemap = \"Treemap\";\nfunction isTreemap(item) {\n  return reflection.isInstance(item, Treemap);\n}\n__name(isTreemap, \"isTreemap\");\nvar TreemapRow = \"TreemapRow\";\nvar Direction = \"Direction\";\nvar Leaf = \"Leaf\";\nvar Section = \"Section\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [Architecture, Axis, Branch, Checkout, CherryPicking, ClassDefStatement, Commit, Curve, Direction, Edge, Entry, GitGraph, Group, Info, Item, Junction, Leaf, Merge, Option, Packet, PacketBlock, Pie, PieSection, Radar, Section, Service, Statement, Treemap, TreemapRow];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      case Leaf:\n      case Section: {\n        return this.isSubtype(Item, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      case \"Entry:axis\": {\n        return Axis;\n      }\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case Architecture: {\n        return {\n          name: Architecture,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Axis: {\n        return {\n          name: Axis,\n          properties: [\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Branch: {\n        return {\n          name: Branch,\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case Checkout: {\n        return {\n          name: Checkout,\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case CherryPicking: {\n        return {\n          name: CherryPicking,\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case ClassDefStatement: {\n        return {\n          name: ClassDefStatement,\n          properties: [\n            { name: \"className\" },\n            { name: \"styleText\" }\n          ]\n        };\n      }\n      case Commit: {\n        return {\n          name: Commit,\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Curve: {\n        return {\n          name: Curve,\n          properties: [\n            { name: \"entries\", defaultValue: [] },\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Edge: {\n        return {\n          name: Edge,\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Entry: {\n        return {\n          name: Entry,\n          properties: [\n            { name: \"axis\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case GitGraph: {\n        return {\n          name: GitGraph,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Group: {\n        return {\n          name: Group,\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Info: {\n        return {\n          name: Info,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Item: {\n        return {\n          name: Item,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Junction: {\n        return {\n          name: Junction,\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case Merge: {\n        return {\n          name: Merge,\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Option: {\n        return {\n          name: Option,\n          properties: [\n            { name: \"name\" },\n            { name: \"value\", defaultValue: false }\n          ]\n        };\n      }\n      case Packet: {\n        return {\n          name: Packet,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PacketBlock: {\n        return {\n          name: PacketBlock,\n          properties: [\n            { name: \"bits\" },\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case Pie: {\n        return {\n          name: Pie,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PieSection: {\n        return {\n          name: PieSection,\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Radar: {\n        return {\n          name: Radar,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"axes\", defaultValue: [] },\n            { name: \"curves\", defaultValue: [] },\n            { name: \"options\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Service: {\n        return {\n          name: Service,\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Treemap: {\n        return {\n          name: Treemap,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" },\n            { name: \"TreemapRows\", defaultValue: [] }\n          ]\n        };\n      }\n      case TreemapRow: {\n        return {\n          name: TreemapRow,\n          properties: [\n            { name: \"indent\" },\n            { name: \"item\" }\n          ]\n        };\n      }\n      case Direction: {\n        return {\n          name: Direction,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Leaf: {\n        return {\n          name: Leaf,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Section: {\n        return {\n          name: Section,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Info\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Packet\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"packet\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"bits\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]}]},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Pie\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT_PIE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/-?[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT_PIE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/-?(0|[1-9][0-9]*)(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER_PIE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Architecture\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"LeftPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"RightPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Arrow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"GitGraph\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"REFERENCE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\nvar loadedRadarGrammar;\nvar RadarGrammar = /* @__PURE__ */ __name(() => loadedRadarGrammar ?? (loadedRadarGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Radar\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Radar\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\"radar-beta:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"axis\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"curve\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Label\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"[\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"]\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Axis\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Curve\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\"{\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\"}\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Entries\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"DetailedEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"axis\",\"operator\":\"=\",\"terminal\":{\"$type\":\"CrossReference\",\"type\":{\"$ref\":\"#/rules@2\"},\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"deprecatedSyntax\":false}},{\"$type\":\"Keyword\",\"value\":\":\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"NumberEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Option\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showLegend\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"ticks\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"max\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"min\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"graticule\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"GRATICULE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"circle\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"polygon\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Entry\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"axis\",\"isOptional\":true,\"type\":{\"$type\":\"ReferenceType\",\"referenceType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@2\"}}}},{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"types\":[],\"usedGrammars\":[]}`)), \"RadarGrammar\");\nvar loadedTreemapGrammar;\nvar TreemapGrammar = /* @__PURE__ */ __name(() => loadedTreemapGrammar ?? (loadedTreemapGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Treemap\",\"rules\":[{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Treemap\",\"returnType\":{\"$ref\":\"#/interfaces@4\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"TreemapRows\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"TREEMAP_KEYWORD\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap-beta\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"CLASS_DEF\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/classDef\\\\\\\\s+([a-zA-Z_][a-zA-Z0-9_]+)(?:\\\\\\\\s+([^;\\\\\\\\r\\\\\\\\n]*))?(?:;)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STYLE_SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":::\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"COMMA\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\",\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WS\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"ML_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\%\\\\\\\\%[^\\\\\\\\n]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"NL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"TreemapRow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"indent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"item\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"ClassDef\",\"dataType\":\"string\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Item\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Section\",\"returnType\":{\"$ref\":\"#/interfaces@1\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Leaf\",\"returnType\":{\"$ref\":\"#/interfaces@2\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INDENTATION\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]{1,}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[a-zA-Z_][a-zA-Z0-9_]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9_\\\\\\\\.\\\\\\\\,]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"MyNumber\",\"dataType\":\"number\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Item\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"name\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"classSelector\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Section\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[]},{\"$type\":\"Interface\",\"name\":\"Leaf\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}]},{\"$type\":\"Interface\",\"name\":\"ClassDefStatement\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"className\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"styleText\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Treemap\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"TreemapRows\",\"type\":{\"$type\":\"ArrayType\",\"elementType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@14\"}}},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[],\"$comment\":\"/**\\\\n * Treemap grammar for Langium\\\\n * Converted from mindmap grammar\\\\n *\\\\n * The ML_COMMENT and NL hidden terminals handle whitespace, comments, and newlines\\\\n * before the treemap keyword, allowing for empty lines and comments before the\\\\n * treemap declaration.\\\\n */\"}`)), \"TreemapGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar RadarLanguageMetaData = {\n  languageId: \"radar\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar TreemapLanguageMetaData = {\n  languageId: \"treemap\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar RadarGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => RadarGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => RadarLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar TreemapGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => TreemapGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => TreemapLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  Radar,\n  Treemap,\n  isTreemap,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  RadarGeneratedModule,\n  TreemapGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108]}