"use strict";(self.webpackChunkgloomhavensecretariat=self.webpackChunkgloomhavensecretariat||[]).push([[617],{8617:(Ue,q,v)=>{v.r(q),v.d(q,{diagram:()=>Ye});var z=v(9204),Z=v(525),J=v(7040),D=v(2052),u=v(2155),c=v(2303),V=v(2233),X=v(3172),x={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},Q=u.UI.gitGraph,M=(0,c.K2)(()=>(0,D.$t)({...Q,...(0,u.zj)().gitGraph}),"getConfig"),i=new J.m(()=>{const r=M(),e=r.mainBranchName,s=r.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:s}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function K(){return(0,D.yT)({length:7})}function H(r,e){const s=Object.create(null);return r.reduce((o,t)=>{const a=e(t);return s[a]||(s[a]=!0,o.push(t)),o},[])}(0,c.K2)(K,"getID"),(0,c.K2)(H,"uniqBy");var ee=(0,c.K2)(function(r){i.records.direction=r},"setDirection"),te=(0,c.K2)(function(r){c.Rm.debug("options str",r),r=r?.trim(),r=r||"{}";try{i.records.options=JSON.parse(r)}catch(e){c.Rm.error("error while parsing gitGraph options",e.message)}},"setOptions"),re=(0,c.K2)(function(){return i.records.options},"getOptions"),ae=(0,c.K2)(function(r){let e=r.msg,s=r.id;const o=r.type;let t=r.tags;c.Rm.info("commit",e,s,o,t),c.Rm.debug("Entering commit:",e,s,o,t);const a=M();s=u.Y2.sanitizeText(s,a),e=u.Y2.sanitizeText(e,a),t=t?.map(n=>u.Y2.sanitizeText(n,a));const d={id:s||i.records.seq+"-"+K(),message:e,seq:i.records.seq++,type:o??x.NORMAL,tags:t??[],parents:null==i.records.head?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=d,c.Rm.info("main branch",a.mainBranchName),i.records.commits.has(d.id)&&c.Rm.warn(`Commit ID ${d.id} already exists`),i.records.commits.set(d.id,d),i.records.branches.set(i.records.currBranch,d.id),c.Rm.debug("in pushCommit "+d.id)},"commit"),se=(0,c.K2)(function(r){let e=r.name;const s=r.order;if(e=u.Y2.sanitizeText(e,M()),i.records.branches.has(e))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);i.records.branches.set(e,null!=i.records.head?i.records.head.id:null),i.records.branchConfig.set(e,{name:e,order:s}),N(e),c.Rm.debug("in createBranch")},"branch"),oe=(0,c.K2)(r=>{let e=r.branch,s=r.id;const o=r.type,t=r.tags,a=M();e=u.Y2.sanitizeText(e,a),s&&(s=u.Y2.sanitizeText(s,a));const d=i.records.branches.get(i.records.currBranch),n=i.records.branches.get(e),p=d?i.records.commits.get(d):void 0,m=n?i.records.commits.get(n):void 0;if(p&&m&&p.branch===e)throw new Error(`Cannot merge branch '${e}' into itself.`);if(i.records.currBranch===e){const h=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw h.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},h}if(void 0===p||!p){const h=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw h.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},h}if(!i.records.branches.has(e)){const h=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw h.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},h}if(void 0===m||!m){const h=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw h.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},h}if(p===m){const h=new Error('Incorrect usage of "merge". Both branches have same head');throw h.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},h}if(s&&i.records.commits.has(s)){const h=new Error('Incorrect usage of "merge". Commit with id:'+s+" already exists, use different custom id");throw h.hash={text:`merge ${e} ${s} ${o} ${t?.join(" ")}`,token:`merge ${e} ${s} ${o} ${t?.join(" ")}`,expected:[`merge ${e} ${s}_UNIQUE ${o} ${t?.join(" ")}`]},h}const l=n||"",g={id:s||`${i.records.seq}-${K()}`,message:`merged branch ${e} into ${i.records.currBranch}`,seq:i.records.seq++,parents:null==i.records.head?[]:[i.records.head.id,l],branch:i.records.currBranch,type:x.MERGE,customType:o,customId:!!s,tags:t??[]};i.records.head=g,i.records.commits.set(g.id,g),i.records.branches.set(i.records.currBranch,g.id),c.Rm.debug(i.records.branches),c.Rm.debug("in mergeBranch")},"merge"),ne=(0,c.K2)(function(r){let e=r.id,s=r.targetId,o=r.tags,t=r.parent;c.Rm.debug("Entering cherryPick:",e,s,o);const a=M();if(e=u.Y2.sanitizeText(e,a),s=u.Y2.sanitizeText(s,a),o=o?.map(p=>u.Y2.sanitizeText(p,a)),t=u.Y2.sanitizeText(t,a),!e||!i.records.commits.has(e)){const p=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw p.hash={text:`cherryPick ${e} ${s}`,token:`cherryPick ${e} ${s}`,expected:["cherry-pick abc"]},p}const d=i.records.commits.get(e);if(void 0===d||!d)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(t&&(!Array.isArray(d.parents)||!d.parents.includes(t)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const n=d.branch;if(d.type===x.MERGE&&!t)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!s||!i.records.commits.has(s)){if(n===i.records.currBranch){const g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:`cherryPick ${e} ${s}`,token:`cherryPick ${e} ${s}`,expected:["cherry-pick abc"]},g}const p=i.records.branches.get(i.records.currBranch);if(void 0===p||!p){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${e} ${s}`,token:`cherryPick ${e} ${s}`,expected:["cherry-pick abc"]},g}const m=i.records.commits.get(p);if(void 0===m||!m){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${e} ${s}`,token:`cherryPick ${e} ${s}`,expected:["cherry-pick abc"]},g}const l={id:i.records.seq+"-"+K(),message:`cherry-picked ${d?.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:null==i.records.head?[]:[i.records.head.id,d.id],branch:i.records.currBranch,type:x.CHERRY_PICK,tags:o?o.filter(Boolean):[`cherry-pick:${d.id}${d.type===x.MERGE?`|parent:${t}`:""}`]};i.records.head=l,i.records.commits.set(l.id,l),i.records.branches.set(i.records.currBranch,l.id),c.Rm.debug(i.records.branches),c.Rm.debug("in cherryPick")}},"cherryPick"),N=(0,c.K2)(function(r){if(r=u.Y2.sanitizeText(r,M()),!i.records.branches.has(r)){const e=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${r}")`);throw e.hash={text:`checkout ${r}`,token:`checkout ${r}`,expected:[`branch ${r}`]},e}{i.records.currBranch=r;const e=i.records.branches.get(i.records.currBranch);i.records.head=void 0!==e&&e?i.records.commits.get(e)??null:null}},"checkout");function A(r,e,s){const o=r.indexOf(e);-1===o?r.push(s):r.splice(o,1,s)}function G(r){const e=r.reduce((t,a)=>t.seq>a.seq?t:a,r[0]);let s="";r.forEach(function(t){s+=t===e?"\t*":"\t|"});const o=[s,e.id,e.seq];for(const t in i.records.branches)i.records.branches.get(t)===e.id&&o.push(t);if(c.Rm.debug(o.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){const t=i.records.commits.get(e.parents[0]);A(r,e,t),e.parents[1]&&r.push(i.records.commits.get(e.parents[1]))}else{if(0==e.parents.length)return;if(e.parents[0]){const t=i.records.commits.get(e.parents[0]);A(r,e,t)}}G(r=H(r,t=>t.id))}(0,c.K2)(A,"upsert"),(0,c.K2)(G,"prettyPrintCommitHistory");var ce=(0,c.K2)(function(){c.Rm.debug(i.records.commits),G([j()[0]])},"prettyPrint"),ie=(0,c.K2)(function(){i.reset(),(0,u.IU)()},"clear"),de=(0,c.K2)(function(){return[...i.records.branchConfig.values()].map((e,s)=>null!=e.order?e:{...e,order:parseFloat(`0.${s}`)}).sort((e,s)=>(e.order??0)-(s.order??0)).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),he=(0,c.K2)(function(){return i.records.branches},"getBranches"),me=(0,c.K2)(function(){return i.records.commits},"getCommits"),j=(0,c.K2)(function(){const r=[...i.records.commits.values()];return r.forEach(function(e){c.Rm.debug(e.id)}),r.sort((e,s)=>e.seq-s.seq),r},"getCommitsArray"),F={commitType:x,getConfig:M,setDirection:ee,setOptions:te,getOptions:re,commit:ae,branch:se,merge:oe,cherryPick:ne,checkout:N,prettyPrint:ce,clear:ie,getBranchesAsObjArray:de,getBranches:he,getCommits:me,getCommitsArray:j,getCurrentBranch:(0,c.K2)(function(){return i.records.currBranch},"getCurrentBranch"),getDirection:(0,c.K2)(function(){return i.records.direction},"getDirection"),getHead:(0,c.K2)(function(){return i.records.head},"getHead"),setAccTitle:u.SV,getAccTitle:u.iN,getAccDescription:u.m7,setAccDescription:u.EI,setDiagramTitle:u.ke,getDiagramTitle:u.ab},fe=(0,c.K2)((r,e)=>{(0,Z.S)(r,e),r.dir&&e.setDirection(r.dir);for(const s of r.statements)ye(s,e)},"populate"),ye=(0,c.K2)((r,e)=>{const o={Commit:(0,c.K2)(t=>e.commit($e(t)),"Commit"),Branch:(0,c.K2)(t=>e.branch(xe(t)),"Branch"),Merge:(0,c.K2)(t=>e.merge(ue(t)),"Merge"),Checkout:(0,c.K2)(t=>e.checkout(be(t)),"Checkout"),CherryPicking:(0,c.K2)(t=>e.cherryPick(Ce(t)),"CherryPicking")}[r.$type];o?o(r):c.Rm.error(`Unknown statement type: ${r.$type}`)},"parseStatement"),$e=(0,c.K2)(r=>({id:r.id,msg:r.message??"",type:void 0!==r.type?x[r.type]:x.NORMAL,tags:r.tags??void 0}),"parseCommit"),xe=(0,c.K2)(r=>({name:r.name,order:r.order??0}),"parseBranch"),ue=(0,c.K2)(r=>({branch:r.branch,id:r.id??"",type:void 0!==r.type?x[r.type]:void 0,tags:r.tags??void 0}),"parseMerge"),be=(0,c.K2)(r=>r.branch,"parseCheckout"),Ce=(0,c.K2)(r=>({id:r.id,targetId:"",tags:0===r.tags?.length?void 0:r.tags,parent:r.parent}),"parseCherryPicking"),Be={parse:(0,c.K2)(function(){var r=(0,z.A)(function*(e){const s=yield(0,V.qg)("gitGraph",e);c.Rm.debug(s),fe(s,F)});return function(e){return r.apply(this,arguments)}}(),"parse")},ve=(0,u.D7)(),B=ve?.gitGraph,T=10,k=40,b=new Map,C=new Map,R=new Map,I=[],L=0,y="LR",we=(0,c.K2)(()=>{b.clear(),C.clear(),R.clear(),L=0,I=[],y="LR"},"clear"),S=(0,c.K2)(r=>{const e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof r?r.split(/\\n|\n|<br\s*\/?>/gi):r).forEach(o=>{const t=document.createElementNS("http://www.w3.org/2000/svg","tspan");t.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),t.setAttribute("dy","1em"),t.setAttribute("x","0"),t.setAttribute("class","row"),t.textContent=o.trim(),e.appendChild(t)}),e},"drawText"),Y=(0,c.K2)(r=>{let e,s,o;return"BT"===y?(s=(0,c.K2)((t,a)=>t<=a,"comparisonFunc"),o=1/0):(s=(0,c.K2)((t,a)=>t>=a,"comparisonFunc"),o=0),r.forEach(t=>{const a="TB"===y||"BT"==y?C.get(t)?.y:C.get(t)?.x;void 0!==a&&s(a,o)&&(e=t,o=a)}),e},"findClosestParent"),Ee=(0,c.K2)(r=>{let e="",s=1/0;return r.forEach(o=>{const t=C.get(o).y;t<=s&&(e=o,s=t)}),e||void 0},"findClosestParentBT"),Te=(0,c.K2)((r,e,s)=>{let o=s,t=s;const a=[];r.forEach(d=>{const n=e.get(d);if(!n)throw new Error(`Commit not found for key ${d}`);n.parents.length?(o=Le(n),t=Math.max(o,t)):a.push(n),Me(n,o)}),o=t,a.forEach(d=>{Pe(d,o,s)}),r.forEach(d=>{const n=e.get(d);if(n?.parents.length){const p=Ee(n.parents);o=C.get(p).y-k,o<=t&&(t=o);const m=b.get(n.branch).pos;C.set(n.id,{x:m,y:o-T})}})},"setParallelBTPos"),ke=(0,c.K2)(r=>{const e=Y(r.parents.filter(o=>null!==o));if(!e)throw new Error(`Closest parent not found for commit ${r.id}`);const s=C.get(e)?.y;if(void 0===s)throw new Error(`Closest parent position not found for commit ${r.id}`);return s},"findClosestParentPos"),Le=(0,c.K2)(r=>ke(r)+k,"calculateCommitPosition"),Me=(0,c.K2)((r,e)=>{const s=b.get(r.branch);if(!s)throw new Error(`Branch not found for commit ${r.id}`);const o=s.pos,t=e+T;return C.set(r.id,{x:o,y:t}),{x:o,y:t}},"setCommitPosition"),Pe=(0,c.K2)((r,e,s)=>{const o=b.get(r.branch);if(!o)throw new Error(`Branch not found for commit ${r.id}`);C.set(r.id,{x:o.pos,y:e+s})},"setRootPosition"),Re=(0,c.K2)((r,e,s,o,t,a)=>{if(a===x.HIGHLIGHT)r.append("rect").attr("x",s.x-10).attr("y",s.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${t%8} ${o}-outer`),r.append("rect").attr("x",s.x-6).attr("y",s.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${t%8} ${o}-inner`);else if(a===x.CHERRY_PICK)r.append("circle").attr("cx",s.x).attr("cy",s.y).attr("r",10).attr("class",`commit ${e.id} ${o}`),r.append("circle").attr("cx",s.x-3).attr("cy",s.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${o}`),r.append("circle").attr("cx",s.x+3).attr("cy",s.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${o}`),r.append("line").attr("x1",s.x+3).attr("y1",s.y+1).attr("x2",s.x).attr("y2",s.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${o}`),r.append("line").attr("x1",s.x-3).attr("y1",s.y+1).attr("x2",s.x).attr("y2",s.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${o}`);else{const d=r.append("circle");if(d.attr("cx",s.x),d.attr("cy",s.y),d.attr("r",e.type===x.MERGE?9:10),d.attr("class",`commit ${e.id} commit${t%8}`),a===x.MERGE){const n=r.append("circle");n.attr("cx",s.x),n.attr("cy",s.y),n.attr("r",6),n.attr("class",`commit ${o} ${e.id} commit${t%8}`)}a===x.REVERSE&&r.append("path").attr("d",`M ${s.x-5},${s.y-5}L${s.x+5},${s.y+5}M${s.x-5},${s.y+5}L${s.x+5},${s.y-5}`).attr("class",`commit ${o} ${e.id} commit${t%8}`)}},"drawCommitBullet"),_e=(0,c.K2)((r,e,s,o)=>{if(e.type!==x.CHERRY_PICK&&(e.customId&&e.type===x.MERGE||e.type!==x.MERGE)&&B?.showCommitLabel){const t=r.append("g"),a=t.insert("rect").attr("class","commit-label-bkg"),d=t.append("text").attr("x",o).attr("y",s.y+25).attr("class","commit-label").text(e.id),n=d.node()?.getBBox();n&&(a.attr("x",s.posWithOffset-n.width/2-2).attr("y",s.y+13.5).attr("width",n.width+4).attr("height",n.height+4),"TB"===y||"BT"===y?(a.attr("x",s.x-(n.width+16+5)).attr("y",s.y-12),d.attr("x",s.x-(n.width+16)).attr("y",s.y+n.height-12)):d.attr("x",s.posWithOffset-n.width/2),B.rotateCommitLabel)&&("TB"===y||"BT"===y?(d.attr("transform","rotate(-45, "+s.x+", "+s.y+")"),a.attr("transform","rotate(-45, "+s.x+", "+s.y+")")):t.attr("transform","translate("+(-7.5-(n.width+10)/25*9.5)+", "+(10+n.width/25*8.5)+") rotate(-45, "+o+", "+s.y+")"))}},"drawCommitLabel"),Ke=(0,c.K2)((r,e,s,o)=>{if(e.tags.length>0){let t=0,a=0,d=0;const n=[];for(const p of e.tags.reverse()){const m=r.insert("polygon"),l=r.append("circle"),g=r.append("text").attr("y",s.y-16-t).attr("class","tag-label").text(p),h=g.node()?.getBBox();if(!h)throw new Error("Tag bbox not found");a=Math.max(a,h.width),d=Math.max(d,h.height),g.attr("x",s.posWithOffset-h.width/2),n.push({tag:g,hole:l,rect:m,yOffset:t}),t+=20}for(const{tag:p,hole:m,rect:l,yOffset:g}of n){const h=d/2,f=s.y-19.2-g;if(l.attr("class","tag-label-bkg").attr("points",`\n      ${o-a/2-2},${f+2}  \n      ${o-a/2-2},${f-2}\n      ${s.posWithOffset-a/2-4},${f-h-2}\n      ${s.posWithOffset+a/2+4},${f-h-2}\n      ${s.posWithOffset+a/2+4},${f+h+2}\n      ${s.posWithOffset-a/2-4},${f+h+2}`),m.attr("cy",f).attr("cx",o-a/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===y||"BT"===y){const $=o+g;l.attr("class","tag-label-bkg").attr("points",`\n        ${s.x},${$+2}\n        ${s.x},${$-2}\n        ${s.x+T},${$-h-2}\n        ${s.x+T+a+4},${$-h-2}\n        ${s.x+T+a+4},${$+h+2}\n        ${s.x+T},${$+h+2}`).attr("transform","translate(12,12) rotate(45, "+s.x+","+o+")"),m.attr("cx",s.x+2).attr("cy",$).attr("transform","translate(12,12) rotate(45, "+s.x+","+o+")"),p.attr("x",s.x+5).attr("y",$+3).attr("transform","translate(14,14) rotate(45, "+s.x+","+o+")")}}}},"drawCommitTags"),Oe=(0,c.K2)(r=>{switch(r.customType??r.type){case x.NORMAL:return"commit-normal";case x.REVERSE:return"commit-reverse";case x.HIGHLIGHT:return"commit-highlight";case x.MERGE:return"commit-merge";case x.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Ie=(0,c.K2)((r,e,s,o)=>{const t={x:0,y:0};if(!(r.parents.length>0))return"TB"===e?30:"BT"===e?(o.get(r.id)??t).y-k:0;{const a=Y(r.parents);if(a){const d=o.get(a)??t;return"TB"===e?d.y+k:"BT"===e?(o.get(r.id)??t).y-k:d.x+k}}return 0},"calculatePosition"),De=(0,c.K2)((r,e,s)=>{const o="BT"===y&&s?e:e+T,t="TB"===y||"BT"===y?o:b.get(r.branch)?.pos,a="TB"===y||"BT"===y?b.get(r.branch)?.pos:o;if(void 0===a||void 0===t)throw new Error(`Position were undefined for commit ${r.id}`);return{x:a,y:t,posWithOffset:o}},"getCommitPosition"),U=(0,c.K2)((r,e,s)=>{if(!B)throw new Error("GitGraph config not found");const o=r.append("g").attr("class","commit-bullets"),t=r.append("g").attr("class","commit-labels");let a="TB"===y||"BT"===y?30:0;const d=[...e.keys()],n=B?.parallelCommits??!1;let m=d.sort((0,c.K2)((l,g)=>{const h=e.get(l)?.seq,f=e.get(g)?.seq;return void 0!==h&&void 0!==f?h-f:0},"sortKeys"));"BT"===y&&(n&&Te(m,e,a),m=m.reverse()),m.forEach(l=>{const g=e.get(l);if(!g)throw new Error(`Commit not found for key ${l}`);n&&(a=Ie(g,y,a,C));const h=De(g,a,n);if(s){const f=Oe(g),$=g.customType??g.type,W=b.get(g.branch)?.index??0;Re(o,g,h,f,W,$),_e(t,g,h,a),Ke(t,g,h,a)}C.set(g.id,"TB"===y||"BT"===y?{x:h.x,y:h.posWithOffset}:{x:h.posWithOffset,y:h.y}),a="BT"===y&&n?a+k:a+k+T,a>L&&(L=a)})},"drawCommits"),Ae=(0,c.K2)((r,e,s,o,t)=>{const d=("TB"===y||"BT"===y?s.x<o.x:s.y<o.y)?e.branch:r.branch,n=(0,c.K2)(m=>m.branch===d,"isOnBranchToGetCurve"),p=(0,c.K2)(m=>m.seq>r.seq&&m.seq<e.seq,"isBetweenCommits");return[...t.values()].some(m=>p(m)&&n(m))},"shouldRerouteArrow"),_=(0,c.K2)((r,e,s=0)=>{const o=r+Math.abs(r-e)/2;if(s>5)return o;if(I.every(d=>Math.abs(d-o)>=10))return I.push(o),o;const a=Math.abs(r-e);return _(r,e-a/5,s+1)},"findLane"),Ge=(0,c.K2)((r,e,s,o)=>{const t=C.get(e.id),a=C.get(s.id);if(void 0===t||void 0===a)throw new Error(`Commit positions not found for commits ${e.id} and ${s.id}`);const d=Ae(e,s,t,a,o);let h,n="",p="",m=0,l=0,g=b.get(s.branch)?.index;if(s.type===x.MERGE&&e.id!==s.parents[0]&&(g=b.get(e.branch)?.index),d){n="A 10 10, 0, 0, 0,",p="A 10 10, 0, 0, 1,",m=10,l=10;const f=t.y<a.y?_(t.y,a.y):_(a.y,t.y),$=t.x<a.x?_(t.x,a.x):_(a.x,t.x);"TB"===y?t.x<a.x?h=`M ${t.x} ${t.y} L ${$-m} ${t.y} ${p} ${$} ${t.y+l} L ${$} ${a.y-m} ${n} ${$+l} ${a.y} L ${a.x} ${a.y}`:(g=b.get(e.branch)?.index,h=`M ${t.x} ${t.y} L ${$+m} ${t.y} ${n} ${$} ${t.y+l} L ${$} ${a.y-m} ${p} ${$-l} ${a.y} L ${a.x} ${a.y}`):"BT"===y?t.x<a.x?h=`M ${t.x} ${t.y} L ${$-m} ${t.y} ${n} ${$} ${t.y-l} L ${$} ${a.y+m} ${p} ${$+l} ${a.y} L ${a.x} ${a.y}`:(g=b.get(e.branch)?.index,h=`M ${t.x} ${t.y} L ${$+m} ${t.y} ${p} ${$} ${t.y-l} L ${$} ${a.y+m} ${n} ${$-l} ${a.y} L ${a.x} ${a.y}`):t.y<a.y?h=`M ${t.x} ${t.y} L ${t.x} ${f-m} ${n} ${t.x+l} ${f} L ${a.x-m} ${f} ${p} ${a.x} ${f+l} L ${a.x} ${a.y}`:(g=b.get(e.branch)?.index,h=`M ${t.x} ${t.y} L ${t.x} ${f+m} ${p} ${t.x+l} ${f} L ${a.x-m} ${f} ${n} ${a.x} ${f-l} L ${a.x} ${a.y}`)}else n="A 20 20, 0, 0, 0,",p="A 20 20, 0, 0, 1,",m=20,l=20,"TB"===y?(t.x<a.x&&(h=s.type===x.MERGE&&e.id!==s.parents[0]?`M ${t.x} ${t.y} L ${t.x} ${a.y-m} ${n} ${t.x+l} ${a.y} L ${a.x} ${a.y}`:`M ${t.x} ${t.y} L ${a.x-m} ${t.y} ${p} ${a.x} ${t.y+l} L ${a.x} ${a.y}`),t.x>a.x&&(n="A 20 20, 0, 0, 0,",p="A 20 20, 0, 0, 1,",m=20,l=20,h=s.type===x.MERGE&&e.id!==s.parents[0]?`M ${t.x} ${t.y} L ${t.x} ${a.y-m} ${p} ${t.x-l} ${a.y} L ${a.x} ${a.y}`:`M ${t.x} ${t.y} L ${a.x+m} ${t.y} ${n} ${a.x} ${t.y+l} L ${a.x} ${a.y}`),t.x===a.x&&(h=`M ${t.x} ${t.y} L ${a.x} ${a.y}`)):"BT"===y?(t.x<a.x&&(h=s.type===x.MERGE&&e.id!==s.parents[0]?`M ${t.x} ${t.y} L ${t.x} ${a.y+m} ${p} ${t.x+l} ${a.y} L ${a.x} ${a.y}`:`M ${t.x} ${t.y} L ${a.x-m} ${t.y} ${n} ${a.x} ${t.y-l} L ${a.x} ${a.y}`),t.x>a.x&&(n="A 20 20, 0, 0, 0,",p="A 20 20, 0, 0, 1,",m=20,l=20,h=s.type===x.MERGE&&e.id!==s.parents[0]?`M ${t.x} ${t.y} L ${t.x} ${a.y+m} ${n} ${t.x-l} ${a.y} L ${a.x} ${a.y}`:`M ${t.x} ${t.y} L ${a.x-m} ${t.y} ${n} ${a.x} ${t.y-l} L ${a.x} ${a.y}`),t.x===a.x&&(h=`M ${t.x} ${t.y} L ${a.x} ${a.y}`)):(t.y<a.y&&(h=s.type===x.MERGE&&e.id!==s.parents[0]?`M ${t.x} ${t.y} L ${a.x-m} ${t.y} ${p} ${a.x} ${t.y+l} L ${a.x} ${a.y}`:`M ${t.x} ${t.y} L ${t.x} ${a.y-m} ${n} ${t.x+l} ${a.y} L ${a.x} ${a.y}`),t.y>a.y&&(h=s.type===x.MERGE&&e.id!==s.parents[0]?`M ${t.x} ${t.y} L ${a.x-m} ${t.y} ${n} ${a.x} ${t.y-l} L ${a.x} ${a.y}`:`M ${t.x} ${t.y} L ${t.x} ${a.y+m} ${p} ${t.x+l} ${a.y} L ${a.x} ${a.y}`),t.y===a.y&&(h=`M ${t.x} ${t.y} L ${a.x} ${a.y}`));if(void 0===h)throw new Error("Line definition not found");r.append("path").attr("d",h).attr("class","arrow arrow"+g%8)},"drawArrow"),We=(0,c.K2)((r,e)=>{const s=r.append("g").attr("class","commit-arrows");[...e.keys()].forEach(o=>{const t=e.get(o);t.parents&&t.parents.length>0&&t.parents.forEach(a=>{Ge(s,e.get(a),t,e)})})},"drawArrows"),qe=(0,c.K2)((r,e)=>{const s=r.append("g");e.forEach((o,t)=>{const a=t%8,d=b.get(o.name)?.pos;if(void 0===d)throw new Error(`Position not found for branch ${o.name}`);const n=s.append("line");n.attr("x1",0),n.attr("y1",d),n.attr("x2",L),n.attr("y2",d),n.attr("class","branch branch"+a),"TB"===y?(n.attr("y1",30),n.attr("x1",d),n.attr("y2",L),n.attr("x2",d)):"BT"===y&&(n.attr("y1",L),n.attr("x1",d),n.attr("y2",30),n.attr("x2",d)),I.push(d);const m=S(o.name),l=s.insert("rect"),h=s.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);h.node().appendChild(m);const f=m.getBBox();l.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-f.width-4-(!0===B?.rotateCommitLabel?30:0)).attr("y",-f.height/2+8).attr("width",f.width+18).attr("height",f.height+4),h.attr("transform","translate("+(-f.width-14-(!0===B?.rotateCommitLabel?30:0))+", "+(d-f.height/2-1)+")"),"TB"===y?(l.attr("x",d-f.width/2-10).attr("y",0),h.attr("transform","translate("+(d-f.width/2-5)+", 0)")):"BT"===y?(l.attr("x",d-f.width/2-10).attr("y",L),h.attr("transform","translate("+(d-f.width/2-5)+", "+L+")")):l.attr("transform","translate(-19, "+(d-f.height/2)+")")})},"drawBranches"),He=(0,c.K2)(function(r,e,s,o,t){return b.set(r,{pos:e,index:s}),e+(50+(t?40:0)+("TB"===y||"BT"===y?o.width/2:0))},"setBranchPosition"),Ye={parser:Be,db:F,renderer:{draw:(0,c.K2)(function(r,e,s,o){if(we(),c.Rm.debug("in gitgraph renderer",r+"\n","id:",e,s),!B)throw new Error("GitGraph config not found");const t=B.rotateCommitLabel??!1,a=o.db;R=a.getCommits();const d=a.getBranchesAsObjArray();y=a.getDirection();const n=(0,X.Ltv)(`[id="${e}"]`);let p=0;d.forEach((m,l)=>{const g=S(m.name),h=n.append("g"),f=h.insert("g").attr("class","branchLabel"),$=f.insert("g").attr("class","label branch-label");$.node()?.appendChild(g);const W=g.getBBox();p=He(m.name,p,l,W,t),$.remove(),f.remove(),h.remove()}),U(n,R,!1),B.showBranches&&qe(n,d),We(n,R),U(n,R,!0),D._K.insertTitle(n,"gitTitleText",B.titleTopMargin??0,a.getDiagramTitle()),(0,u.mj)(void 0,n,B.diagramPadding,B.useMaxWidth)},"draw")},styles:(0,c.K2)(r=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map(e=>`\n        .branch-label${e} { fill: ${r["gitBranchLabel"+e]}; }\n        .commit${e} { stroke: ${r["git"+e]}; fill: ${r["git"+e]}; }\n        .commit-highlight${e} { stroke: ${r["gitInv"+e]}; fill: ${r["gitInv"+e]}; }\n        .label${e}  { fill: ${r["git"+e]}; }\n        .arrow${e} { stroke: ${r["git"+e]}; }\n        `).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${r.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelColor};}\n  .commit-label-bkg { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${r.tagLabelFontSize}; fill: ${r.tagLabelColor};}\n  .tag-label-bkg { fill: ${r.tagLabelBackground}; stroke: ${r.tagLabelBorder}; }\n  .tag-hole { fill: ${r.textColor}; }\n\n  .commit-merge {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${r.textColor};\n  }\n`,"getStyles")}}}]);
//# sourceMappingURL=617.c245e12b3556b4ae.js.map