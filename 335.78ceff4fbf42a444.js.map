{"version":3,"file":"335.78ceff4fbf42a444.js","mappings":"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","names":["GRAPH_NODE","Graph","constructor","opts","this","_isDirected","Object","prototype","hasOwnProperty","call","directed","_isMultigraph","multigraph","_isCompound","compound","_label","undefined","_defaultNodeLabelFn","_","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","isDirected","isMultigraph","isCompound","setGraph","label","graph","setDefaultNodeLabel","newDefault","nodeCount","_nodeCount","nodes","sources","self","v","sinks","setNodes","vs","value","args","arguments","length","setNode","node","hasNode","removeNode","removeEdge","e","_removeFromParentsChildList","children","child","setParent","parent","Error","ancestor","predecessors","predsV","successors","sucsV","neighbors","preds","isLeaf","filterNodes","filter","copy","w","setEdge","edge","parents","findParent","setDefaultEdgeLabel","edgeCount","_edgeCount","edges","setPath","name","valueSpecified","arg0","edgeArgsToId","edgeObj","edgeArgsToObj","v_","w_","tmp","freeze","incrementOrInitEntry","edgeObjToId","hasEdge","decrementOrRemoveEntry","inEdges","u","inV","outEdges","outV","nodeEdges","concat","map","k","List","sentinel","_next","_prev","_sentinel","dequeue","entry","unlink","enqueue","toString","strs","curr","push","JSON","stringify","filterOutLinks","join","DEFAULT_WEIGHT_FN","g","buckets","zeroIdx","collectPredecessors","results","weight","uEntry","out","assignBucket","wEntry","in","run","fas","acyclicer","greedyFAS","weightFn","state","buildState","fasGraph","maxIn","maxOut","prevWeight","Math","max","doGreedyFAS","i","dfsFAS","stack","visited","dfs","forwardName","reversed","addDummyNode","type","attrs","dummy","asNonCompoundGraph","simplified","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","abs","buildLayerMatrix","layering","maxRank","rank","order","addBorderNode","prefix","time","fn","start","console","log","notime","prop","sg","sgNode","prev","util","borderType","swapWidthHeight","swapWidthHeightOne","reverseYOne","swapXYOne","longestPath","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","size","tightTree","findMinSlackEdge","shiftRanks","edgeV","navigation","bind","acc","doDfs","postorder","networkSimplex","simplify","simpleLabel","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg","slice","assignCutValue","childLab","cutvalue","calcCutValue","childIsTail","graphEdge","cutValue","isOutEdge","other","pointsToHead","otherWeight","isTreeEdge","tree","otherCutValue","root","dfsAssignLowLim","nextLim","low","lim","vLabel","wLabel","tailLabel","flip","candidates","isDescendant","f","updateRanks","preorder","flipped","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","treeDepths","depth","nodeSep","nestingRoot","sumWeights","nodeRankFactor","top","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","pos","firstIndex","treeSize","Array","forEach","index","weightSum","consumeUnsortable","unsortable","last","pop","sortSubgraph","cg","biasRight","movable","bl","borderLeft","br","borderRight","subgraphs","barycenters","barycenter","result","nodeU","sum","subgraphResult","mergeBarycenters","target","entries","resolveConflicts","mappedEntries","indegree","entryV","entryW","doResolveConflicts","sourceSet","handleIn","vEntry","merged","mergeEntries","source","min","handleOut","reverse","expandSubgraphs","sort","parts","partition","collection","lhs","rhs","sortable","vsIndex","compareWithBias","bias","blPred","brPred","buildLayerGraphs","ranks","relationship","buildLayerGraph","createRootNode","minRank","sweepLayerGraphs","layerGraphs","lg","sorted","addSubgraphConstraints","rootPrev","prevChild","assignOrder","layer","addConflict","conflicts","defineProperty","enumerable","configurable","writable","hasConflict","positionX","adjustedLayering","findType1Conflicts","visitLayer","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","findType2Conflicts","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","xss","vert","horiz","inner","neighborFn","align","verticalAlignment","prevIdx","ws","mp","floor","il","ceil","xs","horizontalCompaction","reverseSep","blockG","buildBlockGraph","blockGraph","graphLabel","sepFn","sep","edgeSep","labelpos","toLowerCase","nodesep","edgesep","vRoot","uRoot","prevMax","iterate","setXsFunc","nextNodesFunc","elem","pass1","reduce","pass2","smallestWidth","findSmallestWidthAlignment","NEGATIVE_INFINITY","halfWidth","alignCoordinates","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","balance","ul","ignore","layout","debugTiming","layoutGraph","buildLayoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","runLayout","makeSpaceForEdgeLabels","ranksep","rankdir","labeloffset","removeSelfEdges","selfEdges","acyclic","nestingGraph","injectEdgeLabelProxies","removeEmptyRanks","offset","layers","cleanup","normalizeRanks","assignRankMinMax","removeEdgeLabelProxies","labelRank","dummyChains","normalizeEdge","vRank","wRank","edgeLabel","points","normalize","parentDummyChains","postorderNums","pathData","findPath","lca","vPath","wPath","path","pathIdx","pathV","ascending","addBorderSegments","downLayerGraphs","upLayerGraphs","initOrder","simpleNodes","orderedVs","best","bestCC","lastBest","insertSelfEdges","orderShift","selfEdge","adjust","rankDir","coordinateSystem","position","positionY","rankSep","prevY","maxHeight","positionSelfEdges","selfNode","removeBorderNodes","b","l","r","undo","origLabel","fixupEdgeLabelCoords","reverseY","swapXY","translateGraph","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","assignNodeIntersects","p1","p2","nodeV","nodeW","unshift","reversePointsForReversedEdges","updateInputGraph","inputLabel","layoutLabel","obj","newAttrs"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/dagre-d3-es/src/graphlib/graph.js","./node_modules/dagre-d3-es/src/dagre/data/list.js","./node_modules/dagre-d3-es/src/dagre/greedy-fas.js","./node_modules/dagre-d3-es/src/dagre/acyclic.js","./node_modules/dagre-d3-es/src/dagre/util.js","./node_modules/dagre-d3-es/src/dagre/add-border-segments.js","./node_modules/dagre-d3-es/src/dagre/coordinate-system.js","./node_modules/dagre-d3-es/src/dagre/rank/util.js","./node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","./node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","./node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","./node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","./node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","./node_modules/dagre-d3-es/src/dagre/rank/index.js","./node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","./node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","./node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","./node_modules/dagre-d3-es/src/dagre/nesting-graph.js","./node_modules/dagre-d3-es/src/dagre/order/cross-count.js","./node_modules/dagre-d3-es/src/dagre/order/sort.js","./node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","./node_modules/dagre-d3-es/src/dagre/order/barycenter.js","./node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","./node_modules/dagre-d3-es/src/dagre/order/index.js","./node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","./node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","./node_modules/dagre-d3-es/src/dagre/position/bk.js","./node_modules/dagre-d3-es/src/dagre/layout.js","./node_modules/dagre-d3-es/src/dagre/normalize.js","./node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","./node_modules/dagre-d3-es/src/dagre/order/init-order.js","./node_modules/dagre-d3-es/src/dagre/position/index.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = Object.prototype.hasOwnProperty.call(opts, 'directed')\n      ? opts.directed\n      : true;\n    this._isMultigraph = Object.prototype.hasOwnProperty.call(opts, 'multigraph')\n      ? opts.multigraph\n      : false;\n    this._isCompound = Object.prototype.hasOwnProperty.call(opts, 'compound')\n      ? opts.compound\n      : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (Object.prototype.hasOwnProperty.call(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return Object.prototype.hasOwnProperty.call(this._nodes, v);\n  }\n  removeNode(v) {\n    if (Object.prototype.hasOwnProperty.call(this._nodes, v)) {\n      var removeEdge = (e) => this.removeEdge(this._edgeObjs[e]);\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), (child) => {\n          this.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (Object.prototype.hasOwnProperty.call(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return Object.prototype.hasOwnProperty.call(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    }),\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (Object.prototype.hasOwnProperty.call(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (Object.prototype.hasOwnProperty.call(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    }),\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    }),\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    }),\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (Object.prototype.hasOwnProperty.call(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (Object.prototype.hasOwnProperty.call(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      }),\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!Object.prototype.hasOwnProperty.call(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!Object.prototype.hasOwnProperty.call(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      },\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight,\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      },\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (Object.prototype.hasOwnProperty.call(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0,\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    }),\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos',\n      );\n    }),\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      while (index > 0) {\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    }),\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return Object.prototype.hasOwnProperty.call(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (Object.prototype.hasOwnProperty.call(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!Object.prototype.hasOwnProperty.call(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      }),\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 },\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    },\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (Object.prototype.hasOwnProperty.call(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  /** @type {{[nodeId: string | number]: {[nodeId: string | number]: true}}} */\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  /** @type {{[nodeId: string | number]: {[nodeId: string | number]: true}}} */\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\n/**\n * Sets `conflicts[v][w] = true`, creating objects if needed.\n *\n * @param {{[nodeId: string | number]: {[nodeId: string | number]: true}}} conflicts - Object to set.\n * @param {string | number} v - First Node ID\n * @param {string | number} w - Second Node ID\n */\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(conflicts, v)) {\n    // can't use conflicts[v] = {} since it's unsafe if v = `__proto__`\n    Object.defineProperty(conflicts, v, {\n      enumerable: true,\n      configurable: true,\n      value: {},\n      writable: true,\n    });\n  }\n  var conflictsV = conflicts[v];\n  Object.defineProperty(conflictsV, w, {\n    enumerable: true,\n    configurable: true,\n    value: true,\n    writable: true,\n  });\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return !!conflicts[v] && Object.prototype.hasOwnProperty.call(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (Object.prototype.hasOwnProperty.call(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (Object.prototype.hasOwnProperty.call(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', () => {\n    var layoutGraph = time('  buildLayoutGraph', () => buildLayoutGraph(g));\n    time('  runLayout', () => runLayout(layoutGraph, time));\n    time('  updateInputGraph', () => updateInputGraph(g, layoutGraph));\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', () => makeSpaceForEdgeLabels(g));\n  time('    removeSelfEdges', () => removeSelfEdges(g));\n  time('    acyclic', () => acyclic.run(g));\n  time('    nestingGraph.run', () => nestingGraph.run(g));\n  time('    rank', () => rank(util.asNonCompoundGraph(g)));\n  time('    injectEdgeLabelProxies', () => injectEdgeLabelProxies(g));\n  time('    removeEmptyRanks', () => util.removeEmptyRanks(g));\n  time('    nestingGraph.cleanup', () => nestingGraph.cleanup(g));\n  time('    normalizeRanks', () => util.normalizeRanks(g));\n  time('    assignRankMinMax', () => assignRankMinMax(g));\n  time('    removeEdgeLabelProxies', () => removeEdgeLabelProxies(g));\n  time('    normalize.run', () => normalize.run(g));\n  time('    parentDummyChains', () => parentDummyChains(g));\n  time('    addBorderSegments', () => addBorderSegments(g));\n  time('    order', () => order(g));\n  time('    insertSelfEdges', () => insertSelfEdges(g));\n  time('    adjustCoordinateSystem', () => coordinateSystem.adjust(g));\n  time('    position', () => position(g));\n  time('    positionSelfEdges', () => positionSelfEdges(g));\n  time('    removeBorderNodes', () => removeBorderNodes(g));\n  time('    normalize.undo', () => normalize.undo(g));\n  time('    fixupEdgeLabelCoords', () => fixupEdgeLabelCoords(g));\n  time('    undoCoordinateSystem', () => coordinateSystem.undo(g));\n  time('    translateGraph', () => translateGraph(g));\n  time('    assignNodeIntersects', () => assignNodeIntersects(g));\n  time('    reversePoints', () => reversePointsForReversedEdges(g));\n  time('    acyclic.undo', () => acyclic.undo(g));\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (Object.prototype.hasOwnProperty.call(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs)),\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs)),\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (Object.prototype.hasOwnProperty.call(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se',\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","/**\n * TypeScript type imports:\n *\n * @import { Graph } from '../graphlib/graph.js';\n */\nimport * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\n/**\n * @param {Graph} g\n */\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  /**\n   * @typedef {Object} Attrs\n   * @property {number} width\n   * @property {number} height\n   * @property {ReturnType<Graph[\"node\"]>} edgeLabel\n   * @property {any} edgeObj\n   * @property {ReturnType<Graph[\"node\"]>[\"rank\"]} rank\n   * @property {string} [dummy]\n   * @property {ReturnType<Graph[\"node\"]>[\"labelpos\"]} [labelpos]\n   */\n\n  /** @type {Attrs | undefined} */\n  var attrs = undefined;\n  var dummy, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = 'edge-label';\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nexport function initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    }),\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      }),\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]}