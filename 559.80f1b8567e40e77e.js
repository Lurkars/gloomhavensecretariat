"use strict";(self.webpackChunkgloomhavensecretariat=self.webpackChunkgloomhavensecretariat||[]).push([[559],{5559:(se,z,u)=>{u.r(z),u.d(z,{diagram:()=>me});var I,X=u(9204),D=u(5027),Y=u(9664),Z=u(8086),b=u(9753),S=u(525),y=u(2052),h=u(2155),p=u(2303),T=u(2233),m=u(3172),K=(class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=h.SV,this.getAccTitle=h.iN,this.setDiagramTitle=h.ke,this.getDiagramTitle=h.ab,this.getAccDescription=h.m7,this.setAccDescription=h.EI}getNodes(){return this.nodes}getConfig(){const s=h.UI,l=(0,h.zj)();return(0,y.$t)({...s.treemap,...l.treemap??{}})}addNode(s,l){this.nodes.push(s),this.levels.set(s,l),0===l&&(this.outerNodes.push(s),this.root??=s)}getRoot(){return{name:"",children:this.outerNodes}}addClass(s,l){const o=this.classes.get(s)??{id:s,styles:[],textStyles:[]},c=l.replace(/\\,/g,"\xa7\xa7\xa7").replace(/,/g,";").replace(/\xa7\xa7\xa7/g,",").split(";");c&&c.forEach(i=>{(0,b.KX)(i)&&(o?.textStyles?o.textStyles.push(i):o.textStyles=[i]),o?.styles?o.styles.push(i):o.styles=[i]}),this.classes.set(s,o)}getClasses(){return this.classes}getStylesForClass(s){return this.classes.get(s)?.styles??[]}clear(){(0,h.IU)(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}static#e=I=()=>((0,D.A)(this,"TreeMapDB"),(0,p.K2)(this,"TreeMapDB"),this)},I());function R(s){if(!s.length)return[];const l=[],o=[];return s.forEach(c=>{const i={name:c.name,children:"Leaf"===c.type?void 0:[]};for(i.classSelector=c?.classSelector,c?.cssCompiledStyles&&(i.cssCompiledStyles=[c.cssCompiledStyles]),"Leaf"===c.type&&void 0!==c.value&&(i.value=c.value);o.length>0&&o[o.length-1].level>=c.level;)o.pop();if(0===o.length)l.push(i);else{const r=o[o.length-1].node;r.children?r.children.push(i):r.children=[i]}"Leaf"!==c.type&&o.push({node:i,level:c.level})}),l}(0,p.K2)(R,"buildHierarchy");var ne=(0,p.K2)((s,l)=>{(0,S.S)(s,l);const o=[];for(const r of s.TreemapRows??[])"ClassDefStatement"===r.$type&&l.addClass(r.className??"",r.styleText??"");for(const r of s.TreemapRows??[]){const f=r.item;if(!f)continue;const x=r.indent?parseInt(r.indent):0,G=re(f),a=f.classSelector?l.getStylesForClass(f.classSelector):[],k=a.length>0?a.join(";"):void 0;o.push({level:x,name:G,type:f.$type,value:f.value,classSelector:f.classSelector,cssCompiledStyles:k})}const c=R(o),i=(0,p.K2)((r,f)=>{for(const x of r)l.addNode(x,f),x.children&&x.children.length>0&&i(x.children,f+1)},"addNodesRecursively");i(c,0)},"populate"),re=(0,p.K2)(s=>s.name?String(s.name):"","getItemName"),Q={parser:{yy:void 0},parse:(0,p.K2)(function(){var s=(0,X.A)(function*(l){try{const o=T.qg,c=yield o("treemap",l);p.Rm.debug("Treemap AST:",c);const i=Q.parser?.yy;if(!(i instanceof K))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");ne(c,i)}catch(o){throw p.Rm.error("Error parsing treemap:",o),o}});return function(l){return s.apply(this,arguments)}}(),"parse")},de={draw:(0,p.K2)((s,l,o,c)=>{const i=c.db,r=i.getConfig(),f=r.padding??10,x=i.getDiagramTitle(),G=i.getRoot(),{themeVariables:a}=(0,h.zj)();if(!G)return;const k=x?30:0,w=(0,Y.D)(l),q=r.nodeWidth?10*r.nodeWidth:960,ee=r.nodeHeight?10*r.nodeHeight:500,J=q,te=ee+k;let M;w.attr("viewBox",`0 0 ${J} ${te}`),(0,h.a$)(w,te,J,r.useMaxWidth);try{const e=r.valueFormat||",";if("$0,0"===e)M=(0,p.K2)(t=>"$"+(0,m.GPZ)(",")(t),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){const t=/\.\d+/.exec(e),n=t?t[0]:"";M=(0,p.K2)(g=>"$"+(0,m.GPZ)(","+n)(g),"valueFormat")}else if(e.startsWith("$")){const t=e.substring(1);M=(0,p.K2)(n=>"$"+(0,m.GPZ)(t||"")(n),"valueFormat")}else M=(0,m.GPZ)(e)}catch(e){p.Rm.error("Error creating format function:",e),M=(0,m.GPZ)(",")}const N=(0,m.UMr)().range(["transparent",a.cScale0,a.cScale1,a.cScale2,a.cScale3,a.cScale4,a.cScale5,a.cScale6,a.cScale7,a.cScale8,a.cScale9,a.cScale10,a.cScale11]),fe=(0,m.UMr)().range(["transparent",a.cScalePeer0,a.cScalePeer1,a.cScalePeer2,a.cScalePeer3,a.cScalePeer4,a.cScalePeer5,a.cScalePeer6,a.cScalePeer7,a.cScalePeer8,a.cScalePeer9,a.cScalePeer10,a.cScalePeer11]),U=(0,m.UMr)().range([a.cScaleLabel0,a.cScaleLabel1,a.cScaleLabel2,a.cScaleLabel3,a.cScaleLabel4,a.cScaleLabel5,a.cScaleLabel6,a.cScaleLabel7,a.cScaleLabel8,a.cScaleLabel9,a.cScaleLabel10,a.cScaleLabel11]);x&&w.append("text").attr("x",J/2).attr("y",k/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(x);const ae=w.append("g").attr("transform",`translate(0, ${k})`).attr("class","treemapContainer"),ye=(0,m.Sk5)(G).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),le=(0,m.hkb)().size([q,ee]).paddingTop(e=>e.children&&e.children.length>0?35:0).paddingInner(f).paddingLeft(e=>e.children&&e.children.length>0?10:0).paddingRight(e=>e.children&&e.children.length>0?10:0).paddingBottom(e=>e.children&&e.children.length>0?10:0).round(!0)(ye),ge=le.descendants().filter(e=>e.children&&e.children.length>0),O=ae.selectAll(".treemapSection").data(ge).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);O.append("rect").attr("width",e=>e.x1-e.x0).attr("height",25).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>0===e.depth?"display: none;":""),O.append("clipPath").attr("id",(e,t)=>`clip-section-${l}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",25),O.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>N(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>fe(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(0===e.depth)return"display: none;";const t=(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),O.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",12.5).attr("dominant-baseline","middle").text(e=>0===e.depth?"":e.data.name).attr("font-weight","bold").attr("style",e=>0===e.depth?"display: none;":"dominant-baseline: middle; font-size: 12px; fill:"+U(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).each(function(e){if(0===e.depth)return;const t=(0,m.Ltv)(this),n=e.data.name;t.text(n);const g=e.x1-e.x0;let L;L=!1!==r.showValues&&e.value?g-10-30-10-6:g-6-6;const _=Math.max(15,L),d=t.node();if(d.getComputedTextLength()>_){let v=n;for(;v.length>0;){if(v=n.substring(0,v.length-1),0===v.length){t.text("..."),d.getComputedTextLength()>_&&t.text("");break}if(t.text(v+"..."),d.getComputedTextLength()<=_)break}}}),!1!==r.showValues&&O.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",12.5).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?M(e.value):"").attr("font-style","italic").attr("style",e=>0===e.depth?"display: none;":"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+U(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:"));const Se=le.leaves(),H=ae.selectAll(".treemapLeafGroup").data(Se).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);H.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>N(e.parent?e.parent.data.name:e.data.name)).attr("style",e=>(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>N(e.parent?e.parent.data.name:e.data.name)).attr("stroke-width",3),H.append("clipPath").attr("id",(e,t)=>`clip-${l}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),H.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+U(e.data.name)+";"+(0,b.GX)({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(e,t)=>`url(#clip-${l}-${t})`).text(e=>e.data.name).each(function(e){const t=(0,m.Ltv)(this),n=e.x1-e.x0,g=e.y1-e.y0,C=t.node(),B=n-8,_=g-8;if(B<10||_<10)return void t.style("display","none");let d=parseInt(t.style("font-size"),10);for(;C.getComputedTextLength()>B&&d>8;)d--,t.style("font-size",`${d}px`);let F=Math.max(6,Math.min(28,Math.round(.6*d))),j=d+2+F;for(;j>_&&d>8&&(d--,F=Math.max(6,Math.min(28,Math.round(.6*d))),!(F<6&&8===d));)t.style("font-size",`${d}px`),j=d+2+F;t.style("font-size",`${d}px`),(C.getComputedTextLength()>B||d<8||_<d)&&t.style("display","none")}),!1!==r.showValues&&H.append("text").attr("class","treemapValue").attr("x",t=>(t.x1-t.x0)/2).attr("y",function(t){return(t.y1-t.y0)/2}).attr("style",t=>"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+U(t.data.name)+";"+(0,b.GX)({cssCompiledStyles:t.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(t,n)=>`url(#clip-${l}-${n})`).text(t=>t.value?M(t.value):"").each(function(t){const n=(0,m.Ltv)(this),g=this.parentNode;if(!g)return void n.style("display","none");const C=(0,m.Ltv)(g).select(".treemapLabel");if(C.empty()||"none"===C.style("display"))return void n.style("display","none");const L=parseFloat(C.style("font-size")),P=Math.max(6,Math.min(28,Math.round(.6*L)));n.style("font-size",`${P}px`);const E=(t.y1-t.y0)/2+L/2+2;n.attr("y",E);const _e=t.y1-t.y0-4,ve=t.x1-t.x0-8;n.node().getComputedTextLength()>ve||E+P>_e||P<6?n.style("display","none"):n.style("display",null)}),(0,Z.P)(w,r.diagramPadding??8,"flowchart",r?.useMaxWidth||!1)},"draw"),getClasses:(0,p.K2)(function(s,l){return l.db.getClasses()},"getClasses")},he={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},ue=(0,p.K2)(({treemap:s}={})=>{const l=(0,y.$t)(he,s);return`\n  .treemapNode.section {\n    stroke: ${l.sectionStrokeColor};\n    stroke-width: ${l.sectionStrokeWidth};\n    fill: ${l.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${l.leafStrokeColor};\n    stroke-width: ${l.leafStrokeWidth};\n    fill: ${l.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${l.labelColor};\n    font-size: ${l.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${l.valueColor};\n    font-size: ${l.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${l.titleColor};\n    font-size: ${l.titleFontSize};\n  }\n  `},"getStyles"),me={parser:Q,get db(){return new K},renderer:de,styles:ue}},8086:(se,z,u)=>{u.d(z,{P:()=>Y});var X=u(2155),D=u(2303),Y=(0,D.K2)((S,y,h,p)=>{S.attr("class",h);const{width:T,height:m,x:I,y:K}=Z(S,y);(0,X.a$)(S,m,T,p);const R=b(I,K,T,m,y);S.attr("viewBox",R),D.Rm.debug(`viewBox configured: ${R} with padding: ${y}`)},"setupViewPortForSVG"),Z=(0,D.K2)((S,y)=>{const h=S.node()?.getBBox()||{width:0,height:0,x:0,y:0};return{width:h.width+2*y,height:h.height+2*y,x:h.x,y:h.y}},"calculateDimensionsWithPadding"),b=(0,D.K2)((S,y,h,p,T)=>`${S-T} ${y-T} ${h} ${p}`,"createViewBox")}}]);
//# sourceMappingURL=559.80f1b8567e40e77e.js.map