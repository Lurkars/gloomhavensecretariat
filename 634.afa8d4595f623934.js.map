{"version":3,"file":"634.afa8d4595f623934.js","mappings":"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","names":["DEFAULT_PIE_CONFIG","defaultConfig_default","pie","DEFAULT_PIE_DB","sections","Map","showData","config","structuredClone","db","getConfig","__name","clear","setDiagramTitle","_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_4__","ke","getDiagramTitle","ab","setAccTitle","SV","getAccTitle","iN","setAccDescription","EI","getAccDescription","m7","addSection","label","value","Error","has","set","log","debug","getSections","setShowData","toggle","getShowData","populateDb","ast","db2","populateCommonDb","map","parser","parse","_ref","_asyncToGenerator","input","_x","apply","this","arguments","pieStyles_default","options","pieStrokeColor","pieStrokeWidth","pieOpacity","pieOuterStrokeColor","pieOuterStrokeWidth","pieTitleTextSize","pieTitleTextColor","fontFamily","pieSectionTextColor","pieSectionTextSize","pieLegendTextColor","pieLegendTextSize","createPieArcs","sections2","sum","values","reduce","acc","val","pieData","entries","filter","d","sort","a","b","d3pie","diagram","renderer","draw","text","id","_version","diagObj","globalConfig","pieConfig","cleanAndMerge","svg","selectSvgElement","group","append","attr","themeVariables","outerStrokeWidth","parseFontSize","textPosition","radius","Math","min","arcGenerator","arc","innerRadius","outerRadius","labelArcGenerator","arcs","myGeneratedColors","pie1","pie2","pie3","pie4","pie5","pie6","pie7","pie8","pie9","pie10","pie11","pie12","forEach","section","filteredArcs","datum","data","toFixed","color","scaleOrdinal","selectAll","enter","centroid","style","allSectionData","legend","_datum","index","LEGEND_RECT_SIZE","length","totalWidth","pieWidth","max","nodes","node","getBoundingClientRect","width","configureSvgSize","useMaxWidth","styles"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/mermaid/dist/chunks/mermaid.core/pieDiagram-ADFJNKIX.mjs"],"sourcesContent":["import {\n  selectSvgElement\n} from \"./chunk-EXTU4WIE.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-4BX2VUAB.mjs\";\nimport {\n  cleanAndMerge,\n  parseFontSize\n} from \"./chunk-S3R3BYOJ.mjs\";\nimport {\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig2 as getConfig,\n  getDiagramTitle,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-ABZYJK2D.mjs\";\nimport {\n  __name,\n  log\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/diagrams/pie/pieParser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/pie/pieDb.ts\nvar DEFAULT_PIE_CONFIG = defaultConfig_default.pie;\nvar DEFAULT_PIE_DB = {\n  sections: /* @__PURE__ */ new Map(),\n  showData: false,\n  config: DEFAULT_PIE_CONFIG\n};\nvar sections = DEFAULT_PIE_DB.sections;\nvar showData = DEFAULT_PIE_DB.showData;\nvar config = structuredClone(DEFAULT_PIE_CONFIG);\nvar getConfig2 = /* @__PURE__ */ __name(() => structuredClone(config), \"getConfig\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  sections = /* @__PURE__ */ new Map();\n  showData = DEFAULT_PIE_DB.showData;\n  clear();\n}, \"clear\");\nvar addSection = /* @__PURE__ */ __name(({ label, value }) => {\n  if (value < 0) {\n    throw new Error(\n      `\"${label}\" has invalid value: ${value}. Negative values are not allowed in pie charts. All slice values must be >= 0.`\n    );\n  }\n  if (!sections.has(label)) {\n    sections.set(label, value);\n    log.debug(`added new section: ${label}, with value: ${value}`);\n  }\n}, \"addSection\");\nvar getSections = /* @__PURE__ */ __name(() => sections, \"getSections\");\nvar setShowData = /* @__PURE__ */ __name((toggle) => {\n  showData = toggle;\n}, \"setShowData\");\nvar getShowData = /* @__PURE__ */ __name(() => showData, \"getShowData\");\nvar db = {\n  getConfig: getConfig2,\n  clear: clear2,\n  setDiagramTitle,\n  getDiagramTitle,\n  setAccTitle,\n  getAccTitle,\n  setAccDescription,\n  getAccDescription,\n  addSection,\n  getSections,\n  setShowData,\n  getShowData\n};\n\n// src/diagrams/pie/pieParser.ts\nvar populateDb = /* @__PURE__ */ __name((ast, db2) => {\n  populateCommonDb(ast, db2);\n  db2.setShowData(ast.showData);\n  ast.sections.map(db2.addSection);\n}, \"populateDb\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"pie\", input);\n    log.debug(ast);\n    populateDb(ast, db);\n  }, \"parse\")\n};\n\n// src/diagrams/pie/pieStyles.ts\nvar getStyles = /* @__PURE__ */ __name((options) => `\n  .pieCircle{\n    stroke: ${options.pieStrokeColor};\n    stroke-width : ${options.pieStrokeWidth};\n    opacity : ${options.pieOpacity};\n  }\n  .pieOuterCircle{\n    stroke: ${options.pieOuterStrokeColor};\n    stroke-width: ${options.pieOuterStrokeWidth};\n    fill: none;\n  }\n  .pieTitleText {\n    text-anchor: middle;\n    font-size: ${options.pieTitleTextSize};\n    fill: ${options.pieTitleTextColor};\n    font-family: ${options.fontFamily};\n  }\n  .slice {\n    font-family: ${options.fontFamily};\n    fill: ${options.pieSectionTextColor};\n    font-size:${options.pieSectionTextSize};\n    // fill: white;\n  }\n  .legend text {\n    fill: ${options.pieLegendTextColor};\n    font-family: ${options.fontFamily};\n    font-size: ${options.pieLegendTextSize};\n  }\n`, \"getStyles\");\nvar pieStyles_default = getStyles;\n\n// src/diagrams/pie/pieRenderer.ts\nimport { arc, pie as d3pie, scaleOrdinal } from \"d3\";\nvar createPieArcs = /* @__PURE__ */ __name((sections2) => {\n  const sum = [...sections2.values()].reduce((acc, val) => acc + val, 0);\n  const pieData = [...sections2.entries()].map(([label, value]) => ({ label, value })).filter((d) => d.value / sum * 100 >= 1).sort((a, b) => b.value - a.value);\n  const pie = d3pie().value((d) => d.value);\n  return pie(pieData);\n}, \"createPieArcs\");\nvar draw = /* @__PURE__ */ __name((text, id, _version, diagObj) => {\n  log.debug(\"rendering pie chart\\n\" + text);\n  const db2 = diagObj.db;\n  const globalConfig = getConfig();\n  const pieConfig = cleanAndMerge(db2.getConfig(), globalConfig.pie);\n  const MARGIN = 40;\n  const LEGEND_RECT_SIZE = 18;\n  const LEGEND_SPACING = 4;\n  const height = 450;\n  const pieWidth = height;\n  const svg = selectSvgElement(id);\n  const group = svg.append(\"g\");\n  group.attr(\"transform\", \"translate(\" + pieWidth / 2 + \",\" + height / 2 + \")\");\n  const { themeVariables } = globalConfig;\n  let [outerStrokeWidth] = parseFontSize(themeVariables.pieOuterStrokeWidth);\n  outerStrokeWidth ??= 2;\n  const textPosition = pieConfig.textPosition;\n  const radius = Math.min(pieWidth, height) / 2 - MARGIN;\n  const arcGenerator = arc().innerRadius(0).outerRadius(radius);\n  const labelArcGenerator = arc().innerRadius(radius * textPosition).outerRadius(radius * textPosition);\n  group.append(\"circle\").attr(\"cx\", 0).attr(\"cy\", 0).attr(\"r\", radius + outerStrokeWidth / 2).attr(\"class\", \"pieOuterCircle\");\n  const sections2 = db2.getSections();\n  const arcs = createPieArcs(sections2);\n  const myGeneratedColors = [\n    themeVariables.pie1,\n    themeVariables.pie2,\n    themeVariables.pie3,\n    themeVariables.pie4,\n    themeVariables.pie5,\n    themeVariables.pie6,\n    themeVariables.pie7,\n    themeVariables.pie8,\n    themeVariables.pie9,\n    themeVariables.pie10,\n    themeVariables.pie11,\n    themeVariables.pie12\n  ];\n  let sum = 0;\n  sections2.forEach((section) => {\n    sum += section;\n  });\n  const filteredArcs = arcs.filter((datum) => (datum.data.value / sum * 100).toFixed(0) !== \"0\");\n  const color = scaleOrdinal(myGeneratedColors);\n  group.selectAll(\"mySlices\").data(filteredArcs).enter().append(\"path\").attr(\"d\", arcGenerator).attr(\"fill\", (datum) => {\n    return color(datum.data.label);\n  }).attr(\"class\", \"pieCircle\");\n  group.selectAll(\"mySlices\").data(filteredArcs).enter().append(\"text\").text((datum) => {\n    return (datum.data.value / sum * 100).toFixed(0) + \"%\";\n  }).attr(\"transform\", (datum) => {\n    return \"translate(\" + labelArcGenerator.centroid(datum) + \")\";\n  }).style(\"text-anchor\", \"middle\").attr(\"class\", \"slice\");\n  group.append(\"text\").text(db2.getDiagramTitle()).attr(\"x\", 0).attr(\"y\", -(height - 50) / 2).attr(\"class\", \"pieTitleText\");\n  const allSectionData = [...sections2.entries()].map(([label, value]) => ({\n    label,\n    value\n  }));\n  const legend = group.selectAll(\".legend\").data(allSectionData).enter().append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", (_datum, index) => {\n    const height2 = LEGEND_RECT_SIZE + LEGEND_SPACING;\n    const offset = height2 * allSectionData.length / 2;\n    const horizontal = 12 * LEGEND_RECT_SIZE;\n    const vertical = index * height2 - offset;\n    return \"translate(\" + horizontal + \",\" + vertical + \")\";\n  });\n  legend.append(\"rect\").attr(\"width\", LEGEND_RECT_SIZE).attr(\"height\", LEGEND_RECT_SIZE).style(\"fill\", (d) => color(d.label)).style(\"stroke\", (d) => color(d.label));\n  legend.append(\"text\").attr(\"x\", LEGEND_RECT_SIZE + LEGEND_SPACING).attr(\"y\", LEGEND_RECT_SIZE - LEGEND_SPACING).text((d) => {\n    if (db2.getShowData()) {\n      return `${d.label} [${d.value}]`;\n    }\n    return d.label;\n  });\n  const longestTextWidth = Math.max(\n    ...legend.selectAll(\"text\").nodes().map((node) => node?.getBoundingClientRect().width ?? 0)\n  );\n  const totalWidth = pieWidth + MARGIN + LEGEND_RECT_SIZE + LEGEND_SPACING + longestTextWidth;\n  svg.attr(\"viewBox\", `0 0 ${totalWidth} ${height}`);\n  configureSvgSize(svg, height, totalWidth, pieConfig.useMaxWidth);\n}, \"draw\");\nvar renderer = { draw };\n\n// src/diagrams/pie/pieDiagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles: pieStyles_default\n};\nexport {\n  diagram\n};\n"],"x_google_ignoreList":[0]}