{"version":3,"file":"398.c5508f864ae15697.js","mappings":"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","names":["__WEBPACK_DEFAULT_EXPORT__","flatten","array","length","baseFlatten","List","constructor","sentinel","_next","_prev","this","_sentinel","dequeue","entry","unlink","enqueue","toString","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_","removeNode","g","buckets","zeroIdx","collectPredecessors","results","undefined","inEdges","edge","weight","uEntry","node","w","out","assignBucket","outEdges","wEntry","in","run","fas","graph","acyclicer","greedyFAS","weightFn","nodeCount","state","buildState","fasGraph","Graph","maxIn","maxOut","nodes","setNode","edges","e","prevWeight","setEdge","Math","max","map","doGreedyFAS","sources","sinks","i","concat","dfsFAS","stack","visited","dfs","label","removeEdge","forwardName","name","reversed","_baseExtremum","baseExtremum","iteratee","comparator","index","value","current","computed","isSymbol","result","_baseGt","baseGt","other","lodash_es_max","identity","lodash_es_last","last","lodash_es_mapValues","mapValues","object","baseIteratee","baseForOwn","key","baseAssignValue","_baseLt","baseLt","lodash_es_min","min","lodash_es_now","root","Date","now","addDummyNode","type","attrs","hasNode","dummy","asNonCompoundGraph","simplified","multigraph","isMultigraph","setGraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","order","addBorderNode","prefix","arguments","time","fn","start","console","log","notime","prop","sg","sgNode","prev","util","borderType","setParent","swapWidthHeight","swapWidthHeightOne","reverseYOne","swapXYOne","lodash_es_minBy","minBy","longestPath","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","nativeMax","lodash_es_find","createFind","findIndexFunc","collection","predicate","fromIndex","iterable","Object","isArrayLike","keys","findIndex","toInteger","toFinite","remainder","baseFindIndex","asciiSize","baseProperty","RegExp","rsAstralRange","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsModifier","rsOptVar","rsSeq","rsSymbol","vs","navigation","isDirected","successors","neighbors","bind","acc","doDfs","postorder","networkSimplex","simplify","simpleLabel","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg","slice","assignCutValue","child","childLab","parent","cutvalue","calcCutValue","childIsTail","graphEdge","cutValue","isOutEdge","pointsToHead","otherWeight","isTreeEdge","tree","u","hasEdge","otherCutValue","dfsAssignLowLim","nextLim","low","lim","vLabel","wLabel","tailLabel","flip","candidates","isDescendant","f","updateRanks","preorder","flipped","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","treeDepths","depth","nodeSep","nestingRoot","sumWeights","nodeRankFactor","top","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","lodash_es_cloneDeep","cloneDeep","baseClone","CLONE_DEEP_FLAG","lodash_es_zipObject","zipObject","props","values","baseZipObject","assignFunc","valsLength","assignValue","_compareAscending","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","_baseOrderBy","baseOrderBy","iteratees","orders","arrayMap","isArray","baseGet","baseUnary","baseSortBy","comparer","sort","baseMap","criteria","compareMultiple","objCriteria","othCriteria","ordersLength","lodash_es_sortBy","sortBy","baseRest","isIterateeCall","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","pos","firstIndex","treeSize","Array","forEach","weightSum","consumeUnsortable","unsortable","pop","sortSubgraph","cg","biasRight","movable","bl","borderLeft","br","borderRight","subgraphs","barycenters","barycenter","inV","nodeU","sum","subgraphResult","mergeBarycenters","target","entries","resolveConflicts","mappedEntries","tmp","indegree","entryV","entryW","doResolveConflicts","sourceSet","handleIn","vEntry","merged","mergeEntries","source","handleOut","reverse","expandSubgraphs","parts","partition","lhs","rhs","sortable","vsIndex","compareWithBias","bias","predecessors","blPred","brPred","buildLayerGraphs","ranks","relationship","buildLayerGraph","createRootNode","compound","setDefaultNodeLabel","minRank","sweepLayerGraphs","layerGraphs","lg","sorted","addSubgraphConstraints","rootPrev","prevChild","assignOrder","layer","lodash_es_forOwn","forOwn","castFunction","lodash_es_forIn","forIn","baseFor","keysIn","addConflict","conflicts","conflictsV","hasConflict","positionX","adjustedLayering","findType1Conflicts","visitLayer","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","findType2Conflicts","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","xss","vert","horiz","inner","neighborFn","align","verticalAlignment","prevIdx","ws","mp","floor","il","ceil","xs","horizontalCompaction","reverseSep","blockG","buildBlockGraph","blockGraph","graphLabel","sepFn","sep","edgeSep","labelpos","toLowerCase","nodesep","edgesep","vRoot","uRoot","prevMax","iterate","setXsFunc","nextNodesFunc","elem","pass1","reduce","pass2","smallestWidth","findSmallestWidthAlignment","NEGATIVE_INFINITY","halfWidth","alignCoordinates","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","balance","ul","ignore","layout","opts","debugTiming","layoutGraph","buildLayoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","runLayout","makeSpaceForEdgeLabels","ranksep","rankdir","labeloffset","removeSelfEdges","selfEdges","acyclic","nestingGraph","injectEdgeLabelProxies","removeEmptyRanks","offset","layers","cleanup","normalizeRanks","assignRankMinMax","removeEdgeLabelProxies","labelRank","dummyChains","normalizeEdge","vRank","wRank","edgeLabel","points","edgeObj","normalize","parentDummyChains","postorderNums","pathData","findPath","lca","vPath","wPath","path","pathIdx","pathV","ascending","addBorderSegments","downLayerGraphs","upLayerGraphs","initOrder","simpleNodes","orderedVs","best","bestCC","lastBest","insertSelfEdges","orderShift","selfEdge","adjust","rankDir","coordinateSystem","position","positionY","rankSep","prevY","maxHeight","positionSelfEdges","selfNode","removeBorderNodes","b","l","r","undo","origLabel","fixupEdgeLabelCoords","reverseY","swapXY","translateGraph","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","assignNodeIntersects","p1","p2","nodeV","nodeW","unshift","reversePointsForReversedEdges","updateInputGraph","inputLabel","layoutLabel","obj","newAttrs","objectProto","prototype","hasOwnProperty","defaults","guard","propsIndex","propsLength","eq","call","nativeCeil","lodash_es_range","createRange","fromRight","end","step","baseRange","reWhitespace","reTrimStart","_baseTrim","baseTrim","string","trimmedEndIndex","test","charAt","replace","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","INFINITY","lodash_es_toFinite","toNumber","NaN","isObject","valueOf","isBinary","_baseSet","baseSet","customizer","castPath","lastIndex","nested","toKey","newValue","objValue","isIndex","_basePick","basePick","paths","basePickBy","hasIn","lodash_es_pick","flatRest","func","setToString","overRest","baseEach"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/lodash-es/flatten.js","./node_modules/dagre-d3-es/src/dagre/data/list.js","./node_modules/dagre-d3-es/src/dagre/greedy-fas.js","./node_modules/dagre-d3-es/src/dagre/acyclic.js","./node_modules/lodash-es/_baseExtremum.js","./node_modules/lodash-es/_baseGt.js","./node_modules/lodash-es/max.js","./node_modules/lodash-es/last.js","./node_modules/lodash-es/mapValues.js","./node_modules/lodash-es/_baseLt.js","./node_modules/lodash-es/min.js","./node_modules/lodash-es/now.js","./node_modules/dagre-d3-es/src/dagre/util.js","./node_modules/dagre-d3-es/src/dagre/add-border-segments.js","./node_modules/dagre-d3-es/src/dagre/coordinate-system.js","./node_modules/lodash-es/minBy.js","./node_modules/dagre-d3-es/src/dagre/rank/util.js","./node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","./node_modules/lodash-es/findIndex.js","./node_modules/lodash-es/find.js","./node_modules/lodash-es/_createFind.js","./node_modules/lodash-es/toInteger.js","./node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","./node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","./node_modules/lodash-es/_asciiSize.js","./node_modules/lodash-es/_hasUnicode.js","./node_modules/lodash-es/_unicodeSize.js","./node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","./node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","./node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","./node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","./node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","./node_modules/dagre-d3-es/src/dagre/rank/index.js","./node_modules/dagre-d3-es/src/dagre/nesting-graph.js","./node_modules/lodash-es/cloneDeep.js","./node_modules/lodash-es/_baseZipObject.js","./node_modules/lodash-es/zipObject.js","./node_modules/lodash-es/_compareAscending.js","./node_modules/lodash-es/_baseOrderBy.js","./node_modules/lodash-es/_baseSortBy.js","./node_modules/lodash-es/_compareMultiple.js","./node_modules/lodash-es/sortBy.js","./node_modules/dagre-d3-es/src/dagre/order/cross-count.js","./node_modules/dagre-d3-es/src/dagre/order/sort.js","./node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","./node_modules/dagre-d3-es/src/dagre/order/barycenter.js","./node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","./node_modules/dagre-d3-es/src/dagre/order/index.js","./node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","./node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","./node_modules/lodash-es/forOwn.js","./node_modules/lodash-es/forIn.js","./node_modules/dagre-d3-es/src/dagre/position/bk.js","./node_modules/dagre-d3-es/src/dagre/layout.js","./node_modules/dagre-d3-es/src/dagre/normalize.js","./node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","./node_modules/dagre-d3-es/src/dagre/order/init-order.js","./node_modules/dagre-d3-es/src/dagre/position/index.js","./node_modules/lodash-es/defaults.js","./node_modules/lodash-es/_baseRange.js","./node_modules/lodash-es/range.js","./node_modules/lodash-es/_createRange.js","./node_modules/lodash-es/_trimmedEndIndex.js","./node_modules/lodash-es/_baseTrim.js","./node_modules/lodash-es/toNumber.js","./node_modules/lodash-es/toFinite.js","./node_modules/lodash-es/_baseSet.js","./node_modules/lodash-es/_basePick.js","./node_modules/lodash-es/_basePickBy.js","./node_modules/lodash-es/pick.js","./node_modules/lodash-es/_flatRest.js","./node_modules/lodash-es/map.js","./node_modules/lodash-es/_baseMap.js"],"sourcesContent":["import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import baseProperty from './_baseProperty.js';\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nexport default asciiSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nexport default hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nexport default unicodeSize;\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72]}