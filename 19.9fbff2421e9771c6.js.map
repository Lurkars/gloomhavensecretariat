{"version":3,"file":"19.9fbff2421e9771c6.js","mappings":"wKAWIA,kCAAS,WACX,IAAIC,EAAI,SAASC,EAAGC,EAAGC,EAAIC,GACzB,IAAKD,EAAKA,GAAM,CAAC,EAAGC,EAAIH,EAAEI,OAAQD,IAAKD,EAAGF,EAAEG,IAAMF,GAElD,OAAOC,CACT,EAAGG,EAAM,CAAC,EAAG,EAAG,IACZC,EAAU,CACZC,MAAO,WACP,EACAC,GAAI,CAAC,EACLC,SAAU,CAAEC,MAAS,EAAGC,MAAS,EAAGC,KAAQ,EAAGC,SAAY,EAAGC,IAAO,EAAGC,KAAQ,EAAGC,UAAa,EAAGC,GAAM,EAAGC,SAAY,GAAIC,QAAW,EAAGC,KAAQ,GAClJC,WAAY,CAAE,EAAG,QAAS,EAAG,OAAQ,EAAG,MAAO,EAAG,KAAM,GAAI,YAC5DC,aAAc,CAAC,EAAG,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAC9DC,cAAe,SAAmBC,EAAQC,EAAQC,EAAUlB,EAAImB,EAASC,EAAIC,GAE3E,OAAQF,GACN,KAAK,EACH,OAAOnB,EACT,KAAK,EACH,MACF,KAAK,EACHA,EAAGsB,SAAQ,GAGjB,EACAC,MAAO,CAAC,CAAE,EAAG,EAAG,EAAG,CAAC,EAAG,IAAM,CAAE,EAAG,CAAC,IAAMhC,EAAEM,EAAK,CAAC,EAAG,GAAI,CAAE,EAAG,IAAM,CAAE,EAAG,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAAG,GAAI,GAAI,CAAC,EAAG,IAAM,CAAE,EAAG,CAAC,EAAG,IAAMN,EAAEM,EAAK,CAAC,EAAG,IAAKN,EAAEM,EAAK,CAAC,EAAG,IAAKN,EAAEM,EAAK,CAAC,EAAG,IAAKN,EAAEM,EAAK,CAAC,EAAG,KAC/L2B,eAAgB,CAAE,EAAG,CAAC,EAAG,IACzBC,WAAY,SAAoBC,EAAKC,GACnC,IAAIA,EAAKC,YAEF,CACL,IAAI1B,EAAQ,IAAI2B,MAAMH,GACtBxB,QAAMyB,KAAOA,EACPzB,CACR,CALE4B,KAAK/B,MAAM2B,EAMf,EACAK,MAAO,SAAeC,GACpB,IAAiBC,EAAQ,CAAC,GAAIC,EAAS,GAAIC,EAAS,CAAC,MAAOC,EAAS,GAAIb,EAAQO,KAAKP,MAAOP,EAAS,GAAIE,EAAW,EAAGD,EAAS,EAC7HoB,EAAOD,EAAOE,MAAMC,KAAKC,UAAW,GACpCC,EAASC,OAAOC,OAAOb,KAAKc,OAC5BC,EAAc,CAAE7C,GAAI,CAAC,GACzB,QAASR,KAAKsC,KAAK9B,GACb0C,OAAOI,UAAUC,eAAeR,KAAKT,KAAK9B,GAAIR,KAChDqD,EAAY7C,GAAGR,GAAKsC,KAAK9B,GAAGR,IAGhCiD,EAAOO,SAAShB,EAAOa,EAAY7C,IACnC6C,EAAY7C,GAAG4C,MAAQH,EACvBI,EAAY7C,GAAGV,OAASwC,YACbW,EAAOQ,OAAU,MAC1BR,EAAOQ,OAAS,CAAC,GAEnB,IAAIC,EAAQT,EAAOQ,OACnBb,EAAOe,KAAKD,GACZ,IAOME,EAPFC,EAASZ,EAAOa,SAAWb,EAAOa,QAAQD,OAE5CvB,KAAKL,WADkC,mBAA9BoB,EAAY7C,GAAGyB,WACNoB,EAAY7C,GAAGyB,WAEfiB,OAAOa,eAAezB,MAAML,WAehD,QADI+B,EAAQC,EAAOC,EAAQC,EAAeC,EAAGC,EAAeC,EAA9BC,EAAQ,CAAC,IAC1B,CAUX,GARIjC,KAAKN,eADTiC,EAAQxB,EAAMA,EAAMrC,OAAS,IAE3B8D,EAAS5B,KAAKN,eAAeiC,KAEd,OAAXD,UAA0BA,EAAU,OAjBtCJ,SAEiB,iBADrBA,EAAQlB,EAAO8B,OAASvB,EAAOwB,OAzBqH,KA2B9Ib,aAAiBc,QAEnBd,GADAlB,EAASkB,GACMY,OAEjBZ,EA/BOtB,KA+BM7B,SAASmD,IAAUA,GAW9BI,EATGJ,GAWLM,EAASnC,EAAMkC,IAAUlC,EAAMkC,GAAOD,WAE7BE,EAAW,MAAgBA,EAAO9D,SAAW8D,EAAO,GAAI,CACjE,IAAIS,EAEJ,IAAKP,KADLE,EAAW,GACDvC,EAAMkC,GACV3B,KAAKjB,WAAW+C,IAAMA,EAlD6G,GAmDrIE,EAASX,KAAK,IAAMrB,KAAKjB,WAAW+C,GAAK,KAI3CO,EADE1B,EAAO2B,aACA,wBAA0BlD,EAAW,GAAK,MAAQuB,EAAO2B,eAAiB,eAAiBN,EAASO,KAAK,MAAQ,WAAavC,KAAKjB,WAAW2C,IAAWA,GAAU,IAEnK,wBAA0BtC,EAAW,GAAK,iBAzD6F,GAyD1EsC,EAAgB,eAAiB,KAAO1B,KAAKjB,WAAW2C,IAAWA,GAAU,KAErJ1B,KAAKL,WAAW0C,EAAQ,CACtBG,KAAM7B,EAAO8B,MACbnB,MAAOtB,KAAKjB,WAAW2C,IAAWA,EAClCjD,KAAMkC,EAAOvB,SACbsD,IAAKtB,EACLY,YAEJ,CACA,GAAIJ,EAAO,aAAcQ,OAASR,EAAO9D,OAAS,EAChD,MAAM,IAAIiC,MAAM,oDAAsD4B,EAAQ,YAAcD,GAE9F,OAAQE,EAAO,IACb,KAAK,EACHzB,EAAMkB,KAAKK,GACXrB,EAAOgB,KAAKV,EAAOzB,QACnBoB,EAAOe,KAAKV,EAAOQ,QACnBhB,EAAMkB,KAAKO,EAAO,IAClBF,EAAS,KAEPvC,EAASwB,EAAOxB,OAChBD,EAASyB,EAAOzB,OAChBE,EAAWuB,EAAOvB,SAClBgC,EAAQT,EAAOQ,OAEjB,MACF,KAAK,EAwBH,GAtBAc,EAAMU,EAAItC,EAAOA,EAAOvC,QADxBiE,EAAM/B,KAAKhB,aAAa4C,EAAO,IAAI,KAEnCK,EAAM1C,GAAK,CACTqD,WAAYtC,EAAOA,EAAOxC,QAAUiE,GAAO,IAAIa,WAC/CC,UAAWvC,EAAOA,EAAOxC,OAAS,GAAG+E,UACrCC,aAAcxC,EAAOA,EAAOxC,QAAUiE,GAAO,IAAIe,aACjDC,YAAazC,EAAOA,EAAOxC,OAAS,GAAGiF,aAErCxB,IACFU,EAAM1C,GAAGyD,MAAQ,CACf1C,EAAOA,EAAOxC,QAAUiE,GAAO,IAAIiB,MAAM,GACzC1C,EAAOA,EAAOxC,OAAS,GAAGkF,MAAM,YAGpCnB,EAAI7B,KAAKf,cAAcgE,MAAMhB,EAAO,CAClC/C,EACAC,EACAC,EACA2B,EAAY7C,GACZ0D,EAAO,GACPvB,EACAC,GACA4C,OAAO3C,KACQ,IACf,OAAOsB,EAELE,IACF5B,EAAQA,EAAMK,MAAM,GAAG,EAAKuB,EAAM,GAClC1B,EAASA,EAAOG,MAAM,GAAG,EAAKuB,GAC9BzB,EAASA,EAAOE,MAAM,GAAG,EAAKuB,IAEhC5B,EAAMkB,KAAKrB,KAAKhB,aAAa4C,EAAO,IAAI,IACxCvB,EAAOgB,KAAKY,EAAMU,GAClBrC,EAAOe,KAAKY,EAAM1C,IAElBY,EAAMkB,KADK5B,EAAMU,EAAMA,EAAMrC,OAAS,IAAIqC,EAAMA,EAAMrC,OAAS,KAE/D,MACF,KAAK,EACH,OAAO,EAEb,CACA,OAAO,CACT,GAgTF,SAASqF,IACPnD,KAAK9B,GAAK,CAAC,CACb,CACAiF,OAJAnF,EAAQ8C,MA7SI,WA2SV,MA1Sa,CACXtC,IAAK,EACLmB,WAAY,SAAoBC,EAAKC,GACnC,IAAIG,KAAK9B,GAAGV,OAGV,MAAM,IAAIuC,MAAMH,GAFhBI,KAAK9B,GAAGV,OAAOmC,WAAWC,EAAKC,EAInC,EAEAqB,SAAU,SAAShB,EAAOhC,GACxB,OAAA8B,KAAK9B,GAAKA,GAAM8B,KAAK9B,IAAM,CAAC,EAC5B8B,KAAKoD,OAASlD,EACdF,KAAKqD,MAAQrD,KAAKsD,WAAatD,KAAKuD,MAAO,EAC3CvD,KAAKZ,SAAWY,KAAKb,OAAS,EAC9Ba,KAAKd,OAASc,KAAKwD,QAAUxD,KAAKyC,MAAQ,GAC1CzC,KAAKyD,eAAiB,CAAC,WACvBzD,KAAKmB,OAAS,CACZyB,WAAY,EACZE,aAAc,EACdD,UAAW,EACXE,YAAa,GAEX/C,KAAKwB,QAAQD,SACfvB,KAAKmB,OAAO6B,MAAQ,CAAC,EAAG,IAE1BhD,KAAK0D,OAAS,EACP1D,IACT,EAEAE,MAAO,WACL,IAAIyD,EAAK3D,KAAKoD,OAAO,GAOrB,OANApD,KAAKd,QAAUyE,EACf3D,KAAKb,SACLa,KAAK0D,SACL1D,KAAKyC,OAASkB,EACd3D,KAAKwD,SAAWG,EACJA,EAAGlB,MAAM,oBAEnBzC,KAAKZ,WACLY,KAAKmB,OAAO0B,aAEZ7C,KAAKmB,OAAO4B,cAEV/C,KAAKwB,QAAQD,QACfvB,KAAKmB,OAAO6B,MAAM,KAEpBhD,KAAKoD,OAASpD,KAAKoD,OAAO5C,MAAM,GACzBmD,CACT,EAEAC,MAAO,SAASD,GACd,IAAI5B,EAAM4B,EAAG7F,OACT+F,EAAQF,EAAGG,MAAM,iBACrB9D,KAAKoD,OAASO,EAAK3D,KAAKoD,OACxBpD,KAAKd,OAASc,KAAKd,OAAO6E,OAAO,EAAG/D,KAAKd,OAAOpB,OAASiE,GACzD/B,KAAK0D,QAAU3B,EACf,IAAIiC,EAAWhE,KAAKyC,MAAMqB,MAAM,iBAChC9D,KAAKyC,MAAQzC,KAAKyC,MAAMsB,OAAO,EAAG/D,KAAKyC,MAAM3E,OAAS,GACtDkC,KAAKwD,QAAUxD,KAAKwD,QAAQO,OAAO,EAAG/D,KAAKwD,QAAQ1F,OAAS,GACxD+F,EAAM/F,OAAS,IACjBkC,KAAKZ,UAAYyE,EAAM/F,OAAS,GAElC,IAAI+D,EAAI7B,KAAKmB,OAAO6B,MACpB,OAAAhD,KAAKmB,OAAS,CACZyB,WAAY5C,KAAKmB,OAAOyB,WACxBC,UAAW7C,KAAKZ,SAAW,EAC3B0D,aAAc9C,KAAKmB,OAAO2B,aAC1BC,YAAac,GAASA,EAAM/F,SAAWkG,EAASlG,OAASkC,KAAKmB,OAAO2B,aAAe,GAAKkB,EAASA,EAASlG,OAAS+F,EAAM/F,QAAQA,OAAS+F,EAAM,GAAG/F,OAASkC,KAAKmB,OAAO2B,aAAef,GAEtL/B,KAAKwB,QAAQD,SACfvB,KAAKmB,OAAO6B,MAAQ,CAACnB,EAAE,GAAIA,EAAE,GAAK7B,KAAKb,OAAS4C,IAElD/B,KAAKb,OAASa,KAAKd,OAAOpB,OACnBkC,IACT,EAEAiE,KAAM,WACJ,OAAAjE,KAAKqD,OAAQ,EACNrD,IACT,EAEAkE,OAAQ,WACN,OAAIlE,KAAKwB,QAAQ2C,iBACfnE,KAAKsD,YAAa,EAQbtD,MANEA,KAAKL,WAAW,0BAA4BK,KAAKZ,SAAW,GAAK,mIAAqIY,KAAKsC,eAAgB,CAChOE,KAAM,GACNlB,MAAO,KACP7C,KAAMuB,KAAKZ,UAIjB,EAEAgF,KAAM,SAASC,GACbrE,KAAK4D,MAAM5D,KAAKyC,MAAMjC,MAAM6D,GAC9B,EAEAC,UAAW,WACT,IAAIC,EAAOvE,KAAKwD,QAAQO,OAAO,EAAG/D,KAAKwD,QAAQ1F,OAASkC,KAAKyC,MAAM3E,QACnE,OAAQyG,EAAKzG,OAAS,GAAK,MAAQ,IAAMyG,EAAKR,QAAO,IAAKS,QAAQ,MAAO,GAC3E,EAEAC,cAAe,WACb,IAAIC,EAAO1E,KAAKyC,MAChB,OAAIiC,EAAK5G,OAAS,KAChB4G,GAAQ1E,KAAKoD,OAAOW,OAAO,EAAG,GAAKW,EAAK5G,UAElC4G,EAAKX,OAAO,EAAG,KAAOW,EAAK5G,OAAS,GAAK,MAAQ,KAAK0G,QAAQ,MAAO,GAC/E,EAEAlC,aAAc,WACZ,IAAIqC,EAAM3E,KAAKsE,YACXM,EAAI,IAAIxC,MAAMuC,EAAI7G,OAAS,GAAGyE,KAAK,KACvC,OAAOoC,EAAM3E,KAAKyE,gBAAkB,KAAOG,EAAI,GACjD,EAEAC,WAAY,SAASpC,EAAOqC,GAC1B,IAAIxD,EAAOuC,EAAOkB,EAmDlB,GAlDI/E,KAAKwB,QAAQ2C,kBACfY,EAAS,CACP3F,SAAUY,KAAKZ,SACf+B,OAAQ,CACNyB,WAAY5C,KAAKmB,OAAOyB,WACxBC,UAAW7C,KAAK6C,UAChBC,aAAc9C,KAAKmB,OAAO2B,aAC1BC,YAAa/C,KAAKmB,OAAO4B,aAE3B7D,OAAQc,KAAKd,OACbuD,MAAOzC,KAAKyC,MACZuC,QAAShF,KAAKgF,QACdxB,QAASxD,KAAKwD,QACdrE,OAAQa,KAAKb,OACbuE,OAAQ1D,KAAK0D,OACbL,MAAOrD,KAAKqD,MACZD,OAAQpD,KAAKoD,OACblF,GAAI8B,KAAK9B,GACTuF,eAAgBzD,KAAKyD,eAAejD,MAAM,GAC1C+C,KAAMvD,KAAKuD,MAETvD,KAAKwB,QAAQD,SACfwD,EAAO5D,OAAO6B,MAAQhD,KAAKmB,OAAO6B,MAAMxC,MAAM,MAGlDqD,EAAQpB,EAAM,GAAGA,MAAM,sBAErBzC,KAAKZ,UAAYyE,EAAM/F,QAEzBkC,KAAKmB,OAAS,CACZyB,WAAY5C,KAAKmB,OAAO0B,UACxBA,UAAW7C,KAAKZ,SAAW,EAC3B0D,aAAc9C,KAAKmB,OAAO4B,YAC1BA,YAAac,EAAQA,EAAMA,EAAM/F,OAAS,GAAGA,OAAS+F,EAAMA,EAAM/F,OAAS,GAAG2E,MAAM,UAAU,GAAG3E,OAASkC,KAAKmB,OAAO4B,YAAcN,EAAM,GAAG3E,QAE/IkC,KAAKd,QAAUuD,EAAM,GACrBzC,KAAKyC,OAASA,EAAM,GACpBzC,KAAKgF,QAAUvC,EACfzC,KAAKb,OAASa,KAAKd,OAAOpB,OACtBkC,KAAKwB,QAAQD,SACfvB,KAAKmB,OAAO6B,MAAQ,CAAChD,KAAK0D,OAAQ1D,KAAK0D,QAAU1D,KAAKb,SAExDa,KAAKqD,OAAQ,EACbrD,KAAKsD,YAAa,EAClBtD,KAAKoD,OAASpD,KAAKoD,OAAO5C,MAAMiC,EAAM,GAAG3E,QACzCkC,KAAKwD,SAAWf,EAAM,GACtBnB,EAAQtB,KAAKf,cAAcwB,KAAKT,KAAMA,KAAK9B,GAAI8B,KAAM8E,EAAc9E,KAAKyD,eAAezD,KAAKyD,eAAe3F,OAAS,IAChHkC,KAAKuD,MAAQvD,KAAKoD,SACpBpD,KAAKuD,MAAO,GAEVjC,EACF,OAAOA,EACF,GAAItB,KAAKsD,WAAY,CAC1B,QAAS5F,KAAKqH,EACZ/E,KAAKtC,GAAKqH,EAAOrH,GAEnB,OAAO,CACT,CACA,OAAO,CACT,EAEAgH,KAAM,WACJ,GAAI1E,KAAKuD,KACP,OAAOvD,KAAKxB,IAKd,IAAI8C,EAAOmB,EAAOwC,EAAWC,EAHxBlF,KAAKoD,SACRpD,KAAKuD,MAAO,GAGTvD,KAAKqD,QACRrD,KAAKd,OAAS,GACdc,KAAKyC,MAAQ,IAGf,QADI0C,EAAQnF,KAAKoF,gBACRC,EAAI,EAAGA,EAAIF,EAAMrH,OAAQuH,IAEhC,IADAJ,EAAYjF,KAAKoD,OAAOX,MAAMzC,KAAKmF,MAAMA,EAAME,SAC5B5C,GAASwC,EAAU,GAAGnH,OAAS2E,EAAM,GAAG3E,SAGzD,GAFA2E,EAAQwC,EACRC,EAAQG,EACJrF,KAAKwB,QAAQ2C,gBAAiB,CAEhC,IAAc,KADd7C,EAAQtB,KAAK6E,WAAWI,EAAWE,EAAME,KAEvC,OAAO/D,EACF,GAAItB,KAAKsD,WAAY,CAC1Bb,GAAQ,EACR,QACF,CACE,OAAO,CAEX,KAAYzC,KAAKwB,QAAQ8D,KACvB,MAIN,OAAI7C,GAEY,KADdnB,EAAQtB,KAAK6E,WAAWpC,EAAO0C,EAAMD,MAE5B5D,EAIS,KAAhBtB,KAAKoD,OACApD,KAAKxB,IAELwB,KAAKL,WAAW,0BAA4BK,KAAKZ,SAAW,GAAK,yBAA2BY,KAAKsC,eAAgB,CACtHE,KAAM,GACNlB,MAAO,KACP7C,KAAMuB,KAAKZ,UAGjB,EAEA+C,IAAK,WAEH,OADQnC,KAAK0E,QAIJ1E,KAAKmC,KAEhB,EAEAoD,MAAO,SAAeC,GACpBxF,KAAKyD,eAAepC,KAAKmE,EAC3B,EAEAC,SAAU,WAER,OADQzF,KAAKyD,eAAe3F,OAAS,EAC7B,EACCkC,KAAKyD,eAAevB,MAEpBlC,KAAKyD,eAAe,EAE/B,EAEA2B,cAAe,WACb,OAAIpF,KAAKyD,eAAe3F,QAAUkC,KAAKyD,eAAezD,KAAKyD,eAAe3F,OAAS,GAC1EkC,KAAK0F,WAAW1F,KAAKyD,eAAezD,KAAKyD,eAAe3F,OAAS,IAAIqH,MAErEnF,KAAK0F,WAAWC,QAAWR,KAEtC,EAEAS,SAAU,SAAkBvB,GAE1B,OADAA,EAAIrE,KAAKyD,eAAe3F,OAAS,EAAI+H,KAAKC,IAAIzB,GAAK,KAC1C,EACArE,KAAKyD,eAAeY,GAEpB,SAEX,EAEA0B,UAAW,SAAmBP,GAC5BxF,KAAKuF,MAAMC,EACb,EAEAQ,eAAgB,WACd,OAAOhG,KAAKyD,eAAe3F,MAC7B,EACA0D,QAAS,CAAE,oBAAoB,GAC/BvC,cAAe,SAAmBf,EAAI+H,EAAKC,EAA2BC,GACpE,OAAQD,GACN,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,OAAO,GACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,MAAO,MAEb,EACAf,MAAO,CAAC,eAAgB,kBAAmB,cAAe,mBAAoB,UAAW,WACzFO,WAAY,CAAEC,QAAW,CAAER,MAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIiB,WAAa,IAGzE,CA5SY,GAiTZjD,EAAOnC,UAAYhD,EACnBA,EAAQmF,OAASA,EACV,IAAIA,CACb,CA1da,IA2db3F,EAAOA,OAASA,EAKhB,IAAIc,EAFI,MAuBR,MAAM+H,EAAU,CACd7I,OA1BeA,EA2Bf8I,GAfS,CACTC,MAJYA,KACZjI,EARM,KAQiBA,EAIvBkB,QATegH,IACflI,EAAOkI,GASPC,QAPcA,IAAMnI,GAoBpBoI,SAJe,CAAEC,KAPNA,CAACnE,EAAMoE,EAAIC,KACtBC,IAAIC,MAAM,2BAA6BvE,GACvC,MAAMwE,KAAMC,KAAiBL,IAC7BM,OAAiBF,EAAK,IAAK,KAAK,GAClBA,EAAIG,OAAO,KACnBA,OAAO,QAAQC,KAAK,IAAK,KAAKA,KAAK,IAAK,IAAIA,KAAK,QAAS,WAAWA,KAAK,YAAa,IAAIC,MAAM,cAAe,UAAU7E,KAAK,IAAIqE,IAAS","names":["parser","o","k","v","o2","l","length","$V0","parser2","trace","yy","symbols_","error","start","info","document","EOF","line","statement","NL","showInfo","$accept","$end","terminals_","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","setInfo","table","defaultActions","parseError","str","hash","recoverable","Error","this","parse","input","stack","tstack","vstack","lstack","args","slice","call","arguments","lexer2","Object","create","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","token","ranges","options","getPrototypeOf","symbol","state","action","r","p","len","expected","yyval","pop","lex","Array","errStr","showPosition","join","text","match","loc","$","first_line","last_line","first_column","last_column","range","apply","concat","Parser","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","INITIAL","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","inclusive","diagram","db","clear","toggle","getInfo","renderer","draw","id","version","log","debug","svg","selectSvgElement","configureSvgSize","append","attr","style"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/mermaid/dist/infoDiagram-f8f76790.js"],"sourcesContent":["import { l as log, A as selectSvgElement, i as configureSvgSize } from \"./mermaid-b5860b54.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"d3\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [6, 9, 10];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"info\": 4, \"document\": 5, \"EOF\": 6, \"line\": 7, \"statement\": 8, \"NL\": 9, \"showInfo\": 10, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 4: \"info\", 6: \"EOF\", 9: \"NL\", 10: \"showInfo\" },\n    productions_: [0, [3, 3], [5, 0], [5, 2], [7, 1], [7, 1], [8, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      $$.length - 1;\n      switch (yystate) {\n        case 1:\n          return yy;\n        case 4:\n          break;\n        case 6:\n          yy.setInfo(true);\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: [1, 2] }, { 1: [3] }, o($V0, [2, 2], { 5: 3 }), { 6: [1, 4], 7: 5, 8: 6, 9: [1, 7], 10: [1, 8] }, { 1: [2, 1] }, o($V0, [2, 3]), o($V0, [2, 4]), o($V0, [2, 5]), o($V0, [2, 6])],\n    defaultActions: { 4: [2, 1] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return 4;\n          case 1:\n            return 9;\n          case 2:\n            return \"space\";\n          case 3:\n            return 10;\n          case 4:\n            return 6;\n          case 5:\n            return \"TXT\";\n        }\n      },\n      rules: [/^(?:info\\b)/i, /^(?:[\\s\\n\\r]+)/i, /^(?:[\\s]+)/i, /^(?:showInfo\\b)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: { \"INITIAL\": { \"rules\": [0, 1, 2, 3, 4, 5], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nconst DEFAULT_INFO_DB = {\n  info: false\n};\nlet info = DEFAULT_INFO_DB.info;\nconst setInfo = (toggle) => {\n  info = toggle;\n};\nconst getInfo = () => info;\nconst clear = () => {\n  info = DEFAULT_INFO_DB.info;\n};\nconst db = {\n  clear,\n  setInfo,\n  getInfo\n};\nconst draw = (text, id, version) => {\n  log.debug(\"rendering info diagram\\n\" + text);\n  const svg = selectSvgElement(id);\n  configureSvgSize(svg, 100, 400, true);\n  const group = svg.append(\"g\");\n  group.append(\"text\").attr(\"x\", 100).attr(\"y\", 40).attr(\"class\", \"version\").attr(\"font-size\", 32).style(\"text-anchor\", \"middle\").text(`v${version}`);\n};\nconst renderer = { draw };\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer\n};\nexport {\n  diagram\n};\n"],"x_google_ignoreList":[0]}