{"version":3,"file":"196.b033e33b2b1fe7e9.js","mappings":"sQAgCIA,GAAY,MACdC,cACEC,KAAKC,MAAQ,GACbD,KAAKE,OAAyB,IAAIC,IAClCH,KAAKI,WAAa,GAClBJ,KAAKK,QAA0B,IAAIF,IACnCH,KAAKM,YAAcA,KACnBN,KAAKO,YAAcA,KACnBP,KAAKQ,gBAAkBA,KACvBR,KAAKS,gBAAkBA,KACvBT,KAAKU,kBAAoBA,KACzBV,KAAKW,kBAAoBA,IAC3B,CAIAC,WACE,OAAOZ,KAAKC,KACd,CACAY,YACE,MAAMC,EAAgBC,KAChBC,KAAaH,QACnB,SAAOI,MAAc,IAChBH,EAAcI,WACdF,EAAWE,SAAW,CAAC,GAE9B,CACAC,QAAQC,EAAMC,GACZrB,KAAKC,MAAMqB,KAAKF,GAChBpB,KAAKE,OAAOqB,IAAIH,EAAMC,GACR,IAAVA,IACFrB,KAAKI,WAAWkB,KAAKF,GACrBpB,KAAKwB,OAASJ,EAElB,CACAK,UACE,MAAO,CAAEC,KAAM,GAAIC,SAAU3B,KAAKI,WACpC,CACAwB,SAASC,EAAIC,GACX,MAAMC,EAAa/B,KAAKK,QAAQ2B,IAAIH,IAAO,CAAEA,KAAII,OAAQ,GAAIC,WAAY,IACnED,EAASH,EAAOK,QAAQ,OAAQ,gBAAgBA,QAAQ,KAAM,KAAKA,QAAQ,gBAAQ,KAAKC,MAAM,KAChGH,GACFA,EAAOI,QAASC,KACd,EAAIC,MAAaD,KACXP,GAAYG,WACdH,EAAWG,WAAWZ,KAAKgB,GAE3BP,EAAWG,WAAa,CAACI,IAGzBP,GAAYE,OACdF,EAAWE,OAAOX,KAAKgB,GAEvBP,EAAWE,OAAS,CAACK,KAI3BtC,KAAKK,QAAQkB,IAAIM,EAAIE,EACvB,CACAS,aACE,OAAOxC,KAAKK,OACd,CACAoC,kBAAkBC,GAChB,OAAO1C,KAAKK,QAAQ2B,IAAIU,IAAgBT,QAAU,EACpD,CACAU,SACEA,UACA3C,KAAKC,MAAQ,GACbD,KAAKE,OAAyB,IAAIC,IAClCH,KAAKI,WAAa,GAClBJ,KAAKK,QAA0B,IAAIF,IACnCH,KAAKwB,UAAO,CACd,CAACoB,SAAAC,UAAAC,KAAA9C,KAAA,gBA1DC+C,MAAO/C,KAAM,aAAYA,OA2D5B6C,KAMD,SAASG,EAAeC,GACtB,IAAKA,EAAMC,OACT,MAAO,GAET,MAAM1B,EAAO,GACP2B,EAAQ,GACdF,SAAMZ,QAASe,IACb,MAAMhC,EAAO,CACXM,KAAM0B,EAAK1B,KACXC,SAAwB,SAAdyB,EAAKC,UAAkB,EAAS,IAS5C,IAPAjC,EAAKsB,cAAgBU,GAAMV,cACvBU,GAAME,oBACRlC,EAAKkC,kBAAoB,CAACF,EAAKE,oBAEf,SAAdF,EAAKC,WAAkC,IAAfD,EAAKG,QAC/BnC,EAAKmC,MAAQH,EAAKG,OAEbJ,EAAMD,OAAS,GAAKC,EAAMA,EAAMD,OAAS,GAAG7B,OAAS+B,EAAK/B,OAC/D8B,EAAMK,MAER,GAAqB,IAAjBL,EAAMD,OACR1B,EAAKF,KAAKF,OACL,CACL,MAAMqC,EAASN,EAAMA,EAAMD,OAAS,GAAG9B,KACnCqC,EAAO9B,SACT8B,EAAO9B,SAASL,KAAKF,GAErBqC,EAAO9B,SAAW,CAACP,EAEvB,CACkB,SAAdgC,EAAKC,MACPF,EAAM7B,KAAK,CAAEF,OAAMC,MAAO+B,EAAK/B,UAG5BG,CACT,EACAuB,QAAOC,EAAgB,kBAGvB,IAAIU,IAA2BX,QAAO,CAACY,EAAKC,MAC1CC,OAAiBF,EAAKC,GACtB,MAAMX,EAAQ,GACd,UAAWa,KAAOH,EAAII,aAAe,GACjB,sBAAdD,EAAIE,OACNJ,EAAGhC,SAASkC,EAAIG,WAAa,GAAIH,EAAII,WAAa,IAGtD,UAAWJ,KAAOH,EAAII,aAAe,GAAI,CACvC,MAAMX,EAAOU,EAAIV,KACjB,IAAKA,EACH,SAEF,MAAM/B,EAAQyC,EAAIK,OAASC,SAASN,EAAIK,QAAU,EAC5CzC,EAAO2C,GAAYjB,GACnBnB,EAASmB,EAAKV,cAAgBkB,EAAGnB,kBAAkBW,EAAKV,eAAiB,GACzEY,EAAoBrB,EAAOiB,OAAS,EAAIjB,EAAOqC,KAAK,UAAO,EASjErB,EAAM3B,KARW,CACfD,QACAK,OACA2B,KAAMD,EAAKY,MACXT,MAAOH,EAAKG,MACZb,cAAeU,EAAKV,cACpBY,qBAGJ,CACA,MAAMiB,EAAiBvB,EAAeC,GAChCuB,GAAsCzB,QAAO,CAAC9C,EAAOoB,KACzD,UAAWD,KAAQnB,EACjB2D,EAAGzC,QAAQC,EAAMC,GACbD,EAAKO,UAAYP,EAAKO,SAASuB,OAAS,GAC1CsB,EAAoBpD,EAAKO,SAAUN,EAAQ,IAG9C,uBACHmD,EAAoBD,EAAgB,IACnC,YACCF,IAA8BtB,QAAQK,GACjCA,EAAK1B,KAAO+C,OAAOrB,EAAK1B,MAAQ,GACtC,eACCgD,EAAS,CAEXA,OAAQ,CAAEC,QAAI,GACdC,OAAuB7B,QAAM,eAAA8B,KAAAC,KAAC,UAAOC,GACnC,IACE,MAAMC,EAAYJ,KACZjB,QAAYqB,EAAU,UAAWD,GACvCE,KAAIC,MAAM,eAAgBvB,GAC1B,MAAMC,EAAKc,EAAOA,QAAQC,GAC1B,KAAMf,aAAc9D,GAClB,MAAM,IAAIqF,MACR,yJAGJzB,GAASC,EAAKC,EAChB,OAASwB,GACPH,WAAIG,MAAM,yBAA0BA,GAC9BA,CACR,CACF,GAAC,gBAAAC,GAAA,OAAAR,EAAAS,MAAAtF,KAAAuF,UAAA,EAhB4B,GAgB1B,UAmSDC,GAAW,CAAEC,MA3RU1C,QAAO,CAAC2C,EAAO7D,EAAI8D,EAAUC,KACtD,MAAMC,EAAYD,EAAShC,GACrBkC,EAASD,EAAUhF,YACnBkF,EAAsBD,EAAOE,SANT,GAOpBC,EAAQJ,EAAUpF,kBAClBe,EAAOqE,EAAUpE,WACfyE,mBAAe,EAAIrF,QAC3B,IAAKW,EACH,OAEF,MAAM2E,EAAcF,EAAQ,GAAK,EAC3BG,KAAMC,KAAiBxE,GACvByE,EAAQR,EAAOS,UAdK,GAcOT,EAAOS,UAAoC,IACtEC,EAASV,EAAOW,WAfI,GAeSX,EAAOW,WAAqC,IACzEC,EAAWJ,EACXK,GAAYH,EAASL,EAG3B,IAAIS,EAFJR,EAAIS,KAAK,UAAW,OAAOH,KAAYC,OAAW,EAClDG,MAAiBV,EAAKO,GAAWD,EAAUZ,EAAOiB,aAElD,IACE,MAAMC,EAAYlB,EAAOc,aAAe,IACxC,GAAkB,SAAdI,EACFJ,GAA8B7D,QAAQQ,GAAU,OAAM0D,OAAO,IAAb,CAAkB1D,GAAQ,oBAAa,GAC9EyD,EAAUE,WAAW,MAAQF,EAAUG,SAAS,KAAM,CAC/D,MAAMC,EAAY,QAAQC,KAAKL,GACzBM,EAAeF,EAAYA,EAAU,GAAK,GAChDR,GAA8B7D,QAAQQ,GAAU,OAAM0D,OAAO,IAAMK,EAAnB,CAAiC/D,GAAQ,cAC3F,SAAWyD,EAAUE,WAAW,KAAM,CACpC,MAAMK,EAAeP,EAAUQ,UAAU,GACzCZ,GAA8B7D,QAAQQ,GAAU,OAAM0D,OAAOM,GAAgB,GAA7B,CAAiChE,GAAQ,cAC3F,MACEqD,KAAcK,OAAOD,EAEzB,OAAS5B,GACPH,KAAIG,MAAM,kCAAmCA,GAC7CwB,KAAcK,OAAO,IACvB,CACA,MAAMQ,KAAaC,SAAeC,MAAM,CACtC,cACAzB,EAAe0B,QACf1B,EAAe2B,QACf3B,EAAe4B,QACf5B,EAAe6B,QACf7B,EAAe8B,QACf9B,EAAe+B,QACf/B,EAAegC,QACfhC,EAAeiC,QACfjC,EAAekC,QACflC,EAAemC,QACfnC,EAAeoC,SACfpC,EAAeqC,WAEXC,MAAiBd,SAAeC,MAAM,CAC1C,cACAzB,EAAeuC,YACfvC,EAAewC,YACfxC,EAAeyC,YACfzC,EAAe0C,YACf1C,EAAe2C,YACf3C,EAAe4C,YACf5C,EAAe6C,YACf7C,EAAe8C,YACf9C,EAAe+C,YACf/C,EAAegD,YACfhD,EAAeiD,aACfjD,EAAekD,eAEXC,KAAkB3B,SAAeC,MAAM,CAC3CzB,EAAeoD,aACfpD,EAAeqD,aACfrD,EAAesD,aACftD,EAAeuD,aACfvD,EAAewD,aACfxD,EAAeyD,aACfzD,EAAe0D,aACf1D,EAAe2D,aACf3D,EAAe4D,aACf5D,EAAe6D,aACf7D,EAAe8D,cACf9D,EAAe+D,gBAEbhE,GACFG,EAAI8D,OAAO,QAAQrD,KAAK,IAAKH,EAAW,GAAGG,KAAK,IAAKV,EAAc,GAAGU,KAAK,QAAS,gBAAgBA,KAAK,cAAe,UAAUA,KAAK,oBAAqB,UAAU9B,KAAKkB,GAE7K,MAAMkE,GAAI/D,EAAI8D,OAAO,KAAKrD,KAAK,YAAa,gBAAgBV,MAAgBU,KAAK,QAAS,oBACpFuD,MAAgBC,OAAU7I,GAAM8I,IAAKC,GAAMA,EAAEhH,OAAS,GAAGiH,KAAK,CAACC,EAAGC,KAAOA,EAAEnH,OAAS,IAAMkH,EAAElH,OAAS,IAIrGoH,MAHgBzJ,SAAU0J,KAAK,CAACtE,EAAOE,IAASqE,WACnDN,GAAMA,EAAE5I,UAAY4I,EAAE5I,SAASuB,OAAS,EAAI4H,GAAgD,GAC7FC,aAAahF,GAAqBiF,YAAaT,GAAMA,EAAE5I,UAAY4I,EAAE5I,SAASuB,OAAS,EA1F/D,GA0F2F,GAAG+H,aAAcV,GAAMA,EAAE5I,UAAY4I,EAAE5I,SAASuB,OAAS,EA1FpJ,GA0FgL,GAAGgI,cAAeX,GAAMA,EAAE5I,UAAY4I,EAAE5I,SAASuB,OAAS,EA1F1O,GA0FsQ,GAAGiI,OAAM,EACnSR,CAA4BP,IAC5BgB,GAAcT,GAAYU,cAAcC,OAAQf,GAAMA,EAAE5I,UAAY4I,EAAE5I,SAASuB,OAAS,GACxFqI,EAAWpB,GAAEqB,UAAU,mBAAmBC,KAAKL,IAAaM,QAAQxB,OAAO,KAAKrD,KAAK,QAAS,kBAAkBA,KAAK,YAAc0D,GAAM,aAAaA,EAAEoB,MAAMpB,EAAEqB,OACtKL,EAASrB,OAAO,QAAQrD,KAAK,QAAU0D,GAAMA,EAAEsB,GAAKtB,EAAEoB,IAAI9E,KAAK,SA7FrC,IA6FsEA,KAAK,QAAS,wBAAwBA,KAAK,OAAQ,QAAQA,KAAK,eAAgB,IAAKA,KAAK,eAAgB,IAAKA,KAAK,QAAU0D,GAC5M,IAAZA,EAAEuB,MACG,iBAEF,IAETP,EAASrB,OAAO,YAAYrD,KAAK,KAAM,CAACkF,EAAIC,IAAM,gBAAgBnK,KAAMmK,KAAK9B,OAAO,QAAQrD,KAAK,QAAU0D,GAAM0B,KAAKC,IAAI,EAAG3B,EAAEsB,GAAKtB,EAAEoB,GAAK,KAAK9E,KAAK,SAnG3H,IAoG1B0E,EAASrB,OAAO,QAAQrD,KAAK,QAAU0D,GAAMA,EAAEsB,GAAKtB,EAAEoB,IAAI9E,KAAK,SAAW0D,GAAMA,EAAE4B,GAAK5B,EAAEqB,IAAI/E,KAAK,QAAS,CAACkF,EAAIC,IACvG,yBAAyBA,KAC/BnF,KAAK,OAAS0D,GAAM9C,EAAW8C,EAAEkB,KAAK/J,OAAOmF,KAAK,eAAgB,IAAKA,KAAK,SAAW0D,GAAM/B,GAAe+B,EAAEkB,KAAK/J,OAAOmF,KAAK,eAAgB,GAAGA,KAAK,iBAAkB,IAAKA,KAAK,QAAU0D,IAC9L,GAAgB,IAAZA,EAAEuB,MACJ,MAAO,iBAET,MAAM7J,KAASmK,MAAc,CAAE9I,kBAAmBiH,EAAEkB,KAAKnI,oBACzD,OAAOrB,EAAOoK,WAAa,IAAMpK,EAAOqK,aAAahI,KAAK,OAE5DiH,EAASrB,OAAO,QAAQrD,KAAK,QAAS,uBAAuBA,KAAK,IAAK,GAAGA,KAAK,IAAKiE,MAA2BjE,KAAK,oBAAqB,UAAU9B,KAAMwF,GAAkB,IAAZA,EAAEuB,MAAc,GAAKvB,EAAEkB,KAAK/J,MAAMmF,KAAK,cAAe,QAAQA,KAAK,QAAU0D,GAC1N,IAAZA,EAAEuB,MACG,iBAEW,oDAAsDzC,EAAgBkB,EAAEkB,KAAK/J,MAAQ,qEACnGO,EAASmK,MAAc,CAAE9I,kBAAmBiH,EAAEkB,KAAKnI,oBAC7BiJ,YAAYpK,QAAQ,SAAU,UACzDqK,KAAK,SAASjC,GACf,GAAgB,IAAZA,EAAEuB,MACJ,OAEF,MAAMW,KAAOC,OAAO1M,MACd2M,EAAepC,EAAEkB,KAAK/J,KAC5B+K,EAAK1H,KAAK4H,GACV,MAAMC,EAAmBrC,EAAEsB,GAAKtB,EAAEoB,GAElC,IAAIkB,EAMFA,GALwB,IAAtB/G,EAAOgH,YAAwBvC,EAAEhH,MACNqJ,EAAmB,GACV,GACN,GALX,EAUCA,EAVD,EAUqCG,EAG5D,MAAMC,EAAuBf,KAAKC,IADJ,GAC+BW,GACvDI,EAAWR,EAAKrL,OAEtB,GADiC6L,EAASC,wBACXF,EAAsB,CAEnD,IAAIG,EAAuBR,EAC3B,KAAOQ,EAAqBjK,OAAS,GAAG,CAEtC,GADAiK,EAAuBR,EAAanF,UAAU,EAAG2F,EAAqBjK,OAAS,GAC3C,IAAhCiK,EAAqBjK,OAAc,CACrCuJ,EAAK1H,KAAKqI,OACNH,EAASC,wBAA0BF,GACrCP,EAAK1H,KAAK,IAEZ,KACF,CAEA,GADA0H,EAAK1H,KAAKoI,EAAuBC,OAC7BH,EAASC,yBAA2BF,EACtC,KAEJ,CACF,CACF,IAC0B,IAAtBlH,EAAOgH,YACTvB,EAASrB,OAAO,QAAQrD,KAAK,QAAS,uBAAuBA,KAAK,IAAM0D,GAAMA,EAAEsB,GAAKtB,EAAEoB,GAAK,IAAI9E,KAAK,IAAKiE,MAA2BjE,KAAK,cAAe,OAAOA,KAAK,oBAAqB,UAAU9B,KAAMwF,GAAMA,EAAEhH,MAAQqD,EAAY2D,EAAEhH,OAAS,IAAIsD,KAAK,aAAc,UAAUA,KAAK,QAAU0D,GAC/Q,IAAZA,EAAEuB,MACG,iBAEW,sEAAwEzC,EAAgBkB,EAAEkB,KAAK/J,MAAQ,qEACrHO,EAASmK,MAAc,CAAE9I,kBAAmBiH,EAAEkB,KAAKnI,oBAC7BiJ,YAAYpK,QAAQ,SAAU,UAG9D,MAAMkL,GAAY1C,GAAY2C,SACxBC,EAAOpD,GAAEqB,UAAU,qBAAqBC,KAAK4B,IAAW3B,QAAQxB,OAAO,KAAKrD,KAAK,QAAS,CAAC0D,EAAGyB,IAC3F,oCAAoCA,IAAIzB,EAAEkB,KAAK/I,cAAgB,IAAI6H,EAAEkB,KAAK/I,gBAAkB,OAClGmE,KAAK,YAAc0D,GAAM,aAAaA,EAAEoB,MAAMpB,EAAEqB,OACnD2B,EAAKrD,OAAO,QAAQrD,KAAK,QAAU0D,GAAMA,EAAEsB,GAAKtB,EAAEoB,IAAI9E,KAAK,SAAW0D,GAAMA,EAAE4B,GAAK5B,EAAEqB,IAAI/E,KAAK,QAAS,eAAeA,KAAK,OAAS0D,GAChH9C,EAAX8C,EAAE9G,OAAoB8G,EAAE9G,OAAOgI,KAAK/J,KAAmB6I,EAAEkB,KAAK/J,OACpEmF,KAAK,QAAU0D,MACD6B,MAAc,CAAE9I,kBAAmBiH,EAAEkB,KAAKnI,oBAC3C+I,YACbxF,KAAK,eAAgB,IAAKA,KAAK,SAAW0D,GACzB9C,EAAX8C,EAAE9G,OAAoB8G,EAAE9G,OAAOgI,KAAK/J,KAAmB6I,EAAEkB,KAAK/J,OACpEmF,KAAK,eAAgB,GACxB0G,EAAKrD,OAAO,YAAYrD,KAAK,KAAM,CAACkF,EAAIC,IAAM,QAAQnK,KAAMmK,KAAK9B,OAAO,QAAQrD,KAAK,QAAU0D,GAAM0B,KAAKC,IAAI,EAAG3B,EAAEsB,GAAKtB,EAAEoB,GAAK,IAAI9E,KAAK,SAAW0D,GAAM0B,KAAKC,IAAI,EAAG3B,EAAE4B,GAAK5B,EAAEqB,GAAK,IAChK2B,EAAKrD,OAAO,QAAQrD,KAAK,QAAS,gBAAgBA,KAAK,IAAM0D,IAAOA,EAAEsB,GAAKtB,EAAEoB,IAAM,GAAG9E,KAAK,IAAM0D,IAAOA,EAAE4B,GAAK5B,EAAEqB,IAAM,GAAG/E,KAAK,QAAU0D,GACtI,wEAA0ElB,EAAgBkB,EAAEkB,KAAK/J,MAAQ,KACvHO,EAASmK,MAAc,CAAE9I,kBAAmBiH,EAAEkB,KAAKnI,oBAC7BiJ,YAAYpK,QAAQ,SAAU,UACzD0E,KAAK,YAAa,CAACkF,EAAIC,IAAM,aAAanK,KAAMmK,MAAMjH,KAAMwF,GAAMA,EAAEkB,KAAK/J,MACjE8K,KAAK,SAASjC,GACvB,MAAMkC,KAAOC,OAAO1M,MACduG,EAAYgE,EAAEsB,GAAKtB,EAAEoB,GACrBlF,EAAa8D,EAAE4B,GAAK5B,EAAEqB,GACtBqB,EAAWR,EAAKrL,OAEhBoM,EAAiBjH,EAAY,EAC7BkH,EAAkBhH,EAAa,EACrC,GAAI+G,EAAiB,IAAMC,EAAkB,GAE3C,YADAhB,EAAKiB,MAAM,UAAW,QAGxB,IAAIC,EAAuBvJ,SAASqI,EAAKiB,MAAM,aAAc,IAM7D,KAAOT,EAASC,wBAA0BM,GAAkBG,EALnC,GAMvBA,IACAlB,EAAKiB,MAAM,YAAa,GAAGC,OAE7B,IAAIC,EAA2B3B,KAAKC,IANX,EAQvBD,KAAK4B,IAV0B,GAUI5B,KAAKd,MATjB,GASuBwC,KAE5CG,EAAiBH,EATe,EASsCC,EAC1E,KAAOE,EAAiBL,GAAmBE,EAdlB,IAevBA,IACAC,EAA2B3B,KAAKC,IAbT,EAerBD,KAAK4B,IAjBwB,GAiBM5B,KAAKd,MAhBnB,GAgByBwC,OAE5CC,EAjBmB,GAHA,IAoB4BD,KAGnDlB,EAAKiB,MAAM,YAAa,GAAGC,OAC3BG,EAAiBH,EApBiB,EAoBoCC,EAIxEnB,EAAKiB,MAAM,YAAa,GAAGC,QACvBV,EAASC,wBAA0BM,GAAkBG,EA7BhC,GA6B2EF,EAAkBE,IACpHlB,EAAKiB,MAAM,UAAW,OAE1B,IAC0B,IAAtB5H,EAAOgH,YACUS,EAAKrD,OAAO,QAAQrD,KAAK,QAAS,gBAAgBA,KAAK,IAAM0D,IAAOA,EAAEsB,GAAKtB,EAAEoB,IAAM,GAAG9E,KAAK,IAAK,SAAS0D,GAC1H,OAAQA,EAAE4B,GAAK5B,EAAEqB,IAAM,CACzB,GAAG/E,KAAK,QAAU0D,GACI,yEAA2ElB,EAAgBkB,EAAEkB,KAAK/J,MAAQ,KACxHO,EAASmK,MAAc,CAAE9I,kBAAmBiH,EAAEkB,KAAKnI,oBAC7BiJ,YAAYpK,QAAQ,SAAU,UACzD0E,KAAK,YAAa,CAACkF,EAAIC,IAAM,aAAanK,KAAMmK,MAAMjH,KAAMwF,GAAMA,EAAEhH,MAAQqD,EAAY2D,EAAEhH,OAAS,IAC3FiJ,KAAK,SAASjC,GACvB,MAAMwD,KAAmBrB,OAAO1M,MAC1BgO,EAAiBhO,KAAKiO,WAC5B,IAAKD,EAEH,YADAD,EAAiBL,MAAM,UAAW,QAGpC,MAAMQ,KAAexB,OAAOsB,GAAgBtB,OAAO,iBACnD,GAAIwB,EAAaC,SAA6C,SAAlCD,EAAaR,MAAM,WAE7C,YADAK,EAAiBL,MAAM,UAAW,QAGpC,MAAMU,EAAqBC,WAAWH,EAAaR,MAAM,cAKnDY,EAAsBrC,KAAKC,IAFR,EAIvBD,KAAK4B,IANuB,GAMI5B,KAAKd,MALd,GAKoBiD,KAE7CL,EAAiBL,MAAM,YAAa,GAAGY,OAEvC,MAAMC,GADgBhE,EAAE4B,GAAK5B,EAAEqB,IAAM,EACEwC,EAAqB,EAPxB,EAQpCL,EAAiBlH,KAAK,IAAK0H,GAC3B,MAGMC,GAFkBjE,EAAE4B,GAAK5B,EAAEqB,GACP,EAEpB6C,GAJYlE,EAAEsB,GAAKtB,EAAEoB,GAIgB,EACvCoC,EAAiB3M,OAAO8L,wBAA0BuB,IAA0BF,EAAkBD,EAAsBE,IAAmBF,EAflH,EAgBvBP,EAAiBL,MAAM,UAAW,QAElCK,EAAiBL,MAAM,UAAW,KAEtC,IAGFgB,OAAoBtI,EADGN,EAAO6I,gBAAkB,EACP,YAAa7I,GAAQiB,cAAe,IAC5E,QAIoBvE,YAHUO,QAAO,SAAS2C,EAAOkJ,GACtD,OAAOA,EAAWhL,GAAGpB,YACvB,EAAG,eAICqM,GAA6B,CAC/BC,mBAAoB,QACpBC,mBAAoB,IACpBC,iBAAkB,UAClBC,gBAAiB,QACjBC,gBAAiB,IACjBC,cAAe,UACfC,WAAY,QACZC,cAAe,OACfC,cAAe,OACfC,WAAY,QACZC,WAAY,QACZC,cAAe,QA+BbC,IA7B4B3M,QAAO,EACrC7B,QAASyO,GACP,CAAC,KACH,MAAMC,KAAU3O,MAAc4N,GAA4Bc,GAC1D,MAAO,2CAEKC,EAAQd,0CACFc,EAAQb,kCAChBa,EAAQZ,8DAGNY,EAAQX,uCACFW,EAAQV,+BAChBU,EAAQT,qDAGRS,EAAQR,+BACHQ,EAAQP,qDAGbO,EAAQL,+BACHK,EAAQN,qDAGbM,EAAQJ,+BACHI,EAAQH,2BAGtB,aAICI,GAAU,CACZnL,SACA,MAAId,GACF,OAAO,IAAI9D,CACb,EACA0F,YACAvD,OAAQyN,oDCtiBNhB,GAAsC3L,QAAO,CAACqD,EAAKJ,EAAS8J,EAAY/I,KAC1EX,EAAIS,KAAK,QAASiJ,GAClB,MAAQxJ,QAAOE,SAAQuJ,IAAGC,KAAMC,EAA+B7J,EAAKJ,IACpEc,QAAiBV,EAAKI,EAAQF,EAAOS,GACrC,MAAMmJ,EAAUC,EAAcJ,EAAGC,EAAG1J,EAAOE,EAAQR,GACnDI,EAAIS,KAAK,UAAWqJ,GACpBjL,KAAIC,MAAM,uBAAuBgL,mBAAyBlK,MACzD,uBACCiK,GAAiDlN,QAAO,CAACqD,EAAKJ,KAChE,MAAMoK,EAAShK,EAAIhF,QAAQiP,WAAa,CAAE/J,MAAO,EAAGE,OAAQ,EAAGuJ,EAAG,EAAGC,EAAG,GACxE,MAAO,CACL1J,MAAO8J,EAAO9J,MAAkB,EAAVN,EACtBQ,OAAQ4J,EAAO5J,OAAmB,EAAVR,EACxB+J,EAAGK,EAAOL,EACVC,EAAGI,EAAOJ,IAEX,kCACCG,GAAgCpN,QAAO,CAACgN,EAAGC,EAAG1J,EAAOE,EAAQR,IACxD,GAAG+J,EAAI/J,KAAWgK,EAAIhK,KAAWM,KAASE,IAChD","names":["TreeMapDB","constructor","this","nodes","levels","Map","outerNodes","classes","setAccTitle","getAccTitle","setDiagramTitle","getDiagramTitle","getAccDescription","setAccDescription","getNodes","getConfig","defaultConfig","defaultConfig_default","userConfig","cleanAndMerge","treemap","addNode","node","level","push","set","root","getRoot","name","children","addClass","id","_style","styleClass","get","styles","textStyles","replace","split","forEach","s","isLabelStyle","getClasses","getStylesForClass","classSelector","clear","static","_staticBlock","_setFunctionName","__name","buildHierarchy","items","length","stack","item","type","cssCompiledStyles","value","pop","parent","populate","ast","db","populateCommonDb","row","TreemapRows","$type","className","styleText","indent","parseInt","getItemName","join","hierarchyNodes","addNodesRecursively","String","parser","yy","parse","_ref","_asyncToGenerator","text","parseFunc","log","debug","Error","error","_x","apply","arguments","renderer","draw","_text","_version","diagram2","treemapDb","config","treemapInnerPadding","padding","title","themeVariables","titleHeight","svg","selectSvgElement","width","nodeWidth","height","nodeHeight","svgWidth","svgHeight","valueFormat","attr","configureSvgSize","useMaxWidth","formatStr","format","startsWith","includes","precision","exec","precisionStr","restOfFormat","substring","colorScale","scaleOrdinal","range","cScale0","cScale1","cScale2","cScale3","cScale4","cScale5","cScale6","cScale7","cScale8","cScale9","cScale10","cScale11","colorScalePeer","cScalePeer0","cScalePeer1","cScalePeer2","cScalePeer3","cScalePeer4","cScalePeer5","cScalePeer6","cScalePeer7","cScalePeer8","cScalePeer9","cScalePeer10","cScalePeer11","colorScaleLabel","cScaleLabel0","cScaleLabel1","cScaleLabel2","cScaleLabel3","cScaleLabel4","cScaleLabel5","cScaleLabel6","cScaleLabel7","cScaleLabel8","cScaleLabel9","cScaleLabel10","cScaleLabel11","append","g","hierarchyRoot","hierarchy","sum","d","sort","a","b","treemapData","size","paddingTop","SECTION_HEADER_HEIGHT","paddingInner","paddingLeft","paddingRight","paddingBottom","round","branchNodes","descendants","filter","sections","selectAll","data","enter","x0","y0","x1","depth","_d","i","Math","max","y1","styles2String","nodeStyles","borderStyles","labelStyles","each","self","select","originalText","totalHeaderWidth","spaceForTextContent","showValues","labelOwnRightPadding","actualAvailableWidth","textNode","getComputedTextLength","currentTruncatedText","ellipsis","leafNodes","leaves","cell","availableWidth","availableHeight","style","currentLabelFontSize","prospectiveValueFontSize","min","combinedHeight","valueTextElement","parentCellNode","parentNode","labelElement","empty","finalLabelFontSize","parseFloat","actualValueFontSize","valueTopActualY","maxValueBottomY","availableWidthForValue","setupViewPortForSVG","diagramPadding","diagramObj","defaultTreemapStyleOptions","sectionStrokeColor","sectionStrokeWidth","sectionFillColor","leafStrokeColor","leafStrokeWidth","leafFillColor","labelColor","labelFontSize","valueFontSize","valueColor","titleColor","titleFontSize","styles_default","treemap2","options","diagram","cssDiagram","x","y","calculateDimensionsWithPadding","viewBox","createViewBox","bounds","getBBox"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/mermaid/dist/chunks/mermaid.core/diagram-4IRLE6MV.mjs","./node_modules/mermaid/dist/chunks/mermaid.core/chunk-NRVI72HA.mjs"],"sourcesContent":["import {\n  setupViewPortForSVG\n} from \"./chunk-NRVI72HA.mjs\";\nimport {\n  isLabelStyle,\n  styles2String\n} from \"./chunk-7RNWAQOT.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-ANTBXLJU.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-U37J5Y7L.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-T57MJCP2.mjs\";\nimport {\n  __name,\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-VIW5F6AA.mjs\";\n\n// src/diagrams/treemap/db.ts\nvar TreeMapDB = class {\n  constructor() {\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.setAccTitle = setAccTitle;\n    this.getAccTitle = getAccTitle;\n    this.setDiagramTitle = setDiagramTitle;\n    this.getDiagramTitle = getDiagramTitle;\n    this.getAccDescription = getAccDescription;\n    this.setAccDescription = setAccDescription;\n  }\n  static {\n    __name(this, \"TreeMapDB\");\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  getConfig() {\n    const defaultConfig = defaultConfig_default;\n    const userConfig = getConfig();\n    return cleanAndMerge({\n      ...defaultConfig.treemap,\n      ...userConfig.treemap ?? {}\n    });\n  }\n  addNode(node, level) {\n    this.nodes.push(node);\n    this.levels.set(node, level);\n    if (level === 0) {\n      this.outerNodes.push(node);\n      this.root ??= node;\n    }\n  }\n  getRoot() {\n    return { name: \"\", children: this.outerNodes };\n  }\n  addClass(id, _style) {\n    const styleClass = this.classes.get(id) ?? { id, styles: [], textStyles: [] };\n    const styles = _style.replace(/\\\\,/g, \"\\xA7\\xA7\\xA7\").replace(/,/g, \";\").replace(/§§§/g, \",\").split(\";\");\n    if (styles) {\n      styles.forEach((s) => {\n        if (isLabelStyle(s)) {\n          if (styleClass?.textStyles) {\n            styleClass.textStyles.push(s);\n          } else {\n            styleClass.textStyles = [s];\n          }\n        }\n        if (styleClass?.styles) {\n          styleClass.styles.push(s);\n        } else {\n          styleClass.styles = [s];\n        }\n      });\n    }\n    this.classes.set(id, styleClass);\n  }\n  getClasses() {\n    return this.classes;\n  }\n  getStylesForClass(classSelector) {\n    return this.classes.get(classSelector)?.styles ?? [];\n  }\n  clear() {\n    clear();\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.root = void 0;\n  }\n};\n\n// src/diagrams/treemap/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/treemap/utils.ts\nfunction buildHierarchy(items) {\n  if (!items.length) {\n    return [];\n  }\n  const root = [];\n  const stack = [];\n  items.forEach((item) => {\n    const node = {\n      name: item.name,\n      children: item.type === \"Leaf\" ? void 0 : []\n    };\n    node.classSelector = item?.classSelector;\n    if (item?.cssCompiledStyles) {\n      node.cssCompiledStyles = [item.cssCompiledStyles];\n    }\n    if (item.type === \"Leaf\" && item.value !== void 0) {\n      node.value = item.value;\n    }\n    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {\n      stack.pop();\n    }\n    if (stack.length === 0) {\n      root.push(node);\n    } else {\n      const parent = stack[stack.length - 1].node;\n      if (parent.children) {\n        parent.children.push(node);\n      } else {\n        parent.children = [node];\n      }\n    }\n    if (item.type !== \"Leaf\") {\n      stack.push({ node, level: item.level });\n    }\n  });\n  return root;\n}\n__name(buildHierarchy, \"buildHierarchy\");\n\n// src/diagrams/treemap/parser.ts\nvar populate = /* @__PURE__ */ __name((ast, db) => {\n  populateCommonDb(ast, db);\n  const items = [];\n  for (const row of ast.TreemapRows ?? []) {\n    if (row.$type === \"ClassDefStatement\") {\n      db.addClass(row.className ?? \"\", row.styleText ?? \"\");\n    }\n  }\n  for (const row of ast.TreemapRows ?? []) {\n    const item = row.item;\n    if (!item) {\n      continue;\n    }\n    const level = row.indent ? parseInt(row.indent) : 0;\n    const name = getItemName(item);\n    const styles = item.classSelector ? db.getStylesForClass(item.classSelector) : [];\n    const cssCompiledStyles = styles.length > 0 ? styles.join(\";\") : void 0;\n    const itemData = {\n      level,\n      name,\n      type: item.$type,\n      value: item.value,\n      classSelector: item.classSelector,\n      cssCompiledStyles\n    };\n    items.push(itemData);\n  }\n  const hierarchyNodes = buildHierarchy(items);\n  const addNodesRecursively = /* @__PURE__ */ __name((nodes, level) => {\n    for (const node of nodes) {\n      db.addNode(node, level);\n      if (node.children && node.children.length > 0) {\n        addNodesRecursively(node.children, level + 1);\n      }\n    }\n  }, \"addNodesRecursively\");\n  addNodesRecursively(hierarchyNodes, 0);\n}, \"populate\");\nvar getItemName = /* @__PURE__ */ __name((item) => {\n  return item.name ? String(item.name) : \"\";\n}, \"getItemName\");\nvar parser = {\n  // @ts-expect-error - TreeMapDB is not assignable to DiagramDB\n  parser: { yy: void 0 },\n  parse: /* @__PURE__ */ __name(async (text) => {\n    try {\n      const parseFunc = parse;\n      const ast = await parseFunc(\"treemap\", text);\n      log.debug(\"Treemap AST:\", ast);\n      const db = parser.parser?.yy;\n      if (!(db instanceof TreeMapDB)) {\n        throw new Error(\n          \"parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.\"\n        );\n      }\n      populate(ast, db);\n    } catch (error) {\n      log.error(\"Error parsing treemap:\", error);\n      throw error;\n    }\n  }, \"parse\")\n};\n\n// src/diagrams/treemap/renderer.ts\nimport { scaleOrdinal, treemap, hierarchy, format, select } from \"d3\";\nvar DEFAULT_INNER_PADDING = 10;\nvar SECTION_INNER_PADDING = 10;\nvar SECTION_HEADER_HEIGHT = 25;\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const treemapDb = diagram2.db;\n  const config = treemapDb.getConfig();\n  const treemapInnerPadding = config.padding ?? DEFAULT_INNER_PADDING;\n  const title = treemapDb.getDiagramTitle();\n  const root = treemapDb.getRoot();\n  const { themeVariables } = getConfig();\n  if (!root) {\n    return;\n  }\n  const titleHeight = title ? 30 : 0;\n  const svg = selectSvgElement(id);\n  const width = config.nodeWidth ? config.nodeWidth * SECTION_INNER_PADDING : 960;\n  const height = config.nodeHeight ? config.nodeHeight * SECTION_INNER_PADDING : 500;\n  const svgWidth = width;\n  const svgHeight = height + titleHeight;\n  svg.attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  let valueFormat;\n  try {\n    const formatStr = config.valueFormat || \",\";\n    if (formatStr === \"$0,0\") {\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\")(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\") && formatStr.includes(\",\")) {\n      const precision = /\\.\\d+/.exec(formatStr);\n      const precisionStr = precision ? precision[0] : \"\";\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\" + precisionStr)(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\")) {\n      const restOfFormat = formatStr.substring(1);\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(restOfFormat || \"\")(value), \"valueFormat\");\n    } else {\n      valueFormat = format(formatStr);\n    }\n  } catch (error) {\n    log.error(\"Error creating format function:\", error);\n    valueFormat = format(\",\");\n  }\n  const colorScale = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScale0,\n    themeVariables.cScale1,\n    themeVariables.cScale2,\n    themeVariables.cScale3,\n    themeVariables.cScale4,\n    themeVariables.cScale5,\n    themeVariables.cScale6,\n    themeVariables.cScale7,\n    themeVariables.cScale8,\n    themeVariables.cScale9,\n    themeVariables.cScale10,\n    themeVariables.cScale11\n  ]);\n  const colorScalePeer = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScalePeer0,\n    themeVariables.cScalePeer1,\n    themeVariables.cScalePeer2,\n    themeVariables.cScalePeer3,\n    themeVariables.cScalePeer4,\n    themeVariables.cScalePeer5,\n    themeVariables.cScalePeer6,\n    themeVariables.cScalePeer7,\n    themeVariables.cScalePeer8,\n    themeVariables.cScalePeer9,\n    themeVariables.cScalePeer10,\n    themeVariables.cScalePeer11\n  ]);\n  const colorScaleLabel = scaleOrdinal().range([\n    themeVariables.cScaleLabel0,\n    themeVariables.cScaleLabel1,\n    themeVariables.cScaleLabel2,\n    themeVariables.cScaleLabel3,\n    themeVariables.cScaleLabel4,\n    themeVariables.cScaleLabel5,\n    themeVariables.cScaleLabel6,\n    themeVariables.cScaleLabel7,\n    themeVariables.cScaleLabel8,\n    themeVariables.cScaleLabel9,\n    themeVariables.cScaleLabel10,\n    themeVariables.cScaleLabel11\n  ]);\n  if (title) {\n    svg.append(\"text\").attr(\"x\", svgWidth / 2).attr(\"y\", titleHeight / 2).attr(\"class\", \"treemapTitle\").attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(title);\n  }\n  const g = svg.append(\"g\").attr(\"transform\", `translate(0, ${titleHeight})`).attr(\"class\", \"treemapContainer\");\n  const hierarchyRoot = hierarchy(root).sum((d) => d.value ?? 0).sort((a, b) => (b.value ?? 0) - (a.value ?? 0));\n  const treemapLayout = treemap().size([width, height]).paddingTop(\n    (d) => d.children && d.children.length > 0 ? SECTION_HEADER_HEIGHT + SECTION_INNER_PADDING : 0\n  ).paddingInner(treemapInnerPadding).paddingLeft((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingRight((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingBottom((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).round(true);\n  const treemapData = treemapLayout(hierarchyRoot);\n  const branchNodes = treemapData.descendants().filter((d) => d.children && d.children.length > 0);\n  const sections = g.selectAll(\".treemapSection\").data(branchNodes).enter().append(\"g\").attr(\"class\", \"treemapSection\").attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", SECTION_HEADER_HEIGHT).attr(\"class\", \"treemapSectionHeader\").attr(\"fill\", \"none\").attr(\"fill-opacity\", 0.6).attr(\"stroke-width\", 0.6).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    return \"\";\n  });\n  sections.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-section-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 12)).attr(\"height\", SECTION_HEADER_HEIGHT);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", (_d, i) => {\n    return `treemapSection section${i}`;\n  }).attr(\"fill\", (d) => colorScale(d.data.name)).attr(\"fill-opacity\", 0.6).attr(\"stroke\", (d) => colorScalePeer(d.data.name)).attr(\"stroke-width\", 2).attr(\"stroke-opacity\", 0.4).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles + \";\" + styles.borderStyles.join(\";\");\n  });\n  sections.append(\"text\").attr(\"class\", \"treemapSectionLabel\").attr(\"x\", 6).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"dominant-baseline\", \"middle\").text((d) => d.depth === 0 ? \"\" : d.data.name).attr(\"font-weight\", \"bold\").attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const labelStyles = \"dominant-baseline: middle; font-size: 12px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).each(function(d) {\n    if (d.depth === 0) {\n      return;\n    }\n    const self = select(this);\n    const originalText = d.data.name;\n    self.text(originalText);\n    const totalHeaderWidth = d.x1 - d.x0;\n    const labelXPosition = 6;\n    let spaceForTextContent;\n    if (config.showValues !== false && d.value) {\n      const valueEndsAtXRelative = totalHeaderWidth - 10;\n      const estimatedValueTextActualWidth = 30;\n      const gapBetweenLabelAndValue = 10;\n      const labelMustEndBeforeX = valueEndsAtXRelative - estimatedValueTextActualWidth - gapBetweenLabelAndValue;\n      spaceForTextContent = labelMustEndBeforeX - labelXPosition;\n    } else {\n      const labelOwnRightPadding = 6;\n      spaceForTextContent = totalHeaderWidth - labelXPosition - labelOwnRightPadding;\n    }\n    const minimumWidthToDisplay = 15;\n    const actualAvailableWidth = Math.max(minimumWidthToDisplay, spaceForTextContent);\n    const textNode = self.node();\n    const currentTextContentLength = textNode.getComputedTextLength();\n    if (currentTextContentLength > actualAvailableWidth) {\n      const ellipsis = \"...\";\n      let currentTruncatedText = originalText;\n      while (currentTruncatedText.length > 0) {\n        currentTruncatedText = originalText.substring(0, currentTruncatedText.length - 1);\n        if (currentTruncatedText.length === 0) {\n          self.text(ellipsis);\n          if (textNode.getComputedTextLength() > actualAvailableWidth) {\n            self.text(\"\");\n          }\n          break;\n        }\n        self.text(currentTruncatedText + ellipsis);\n        if (textNode.getComputedTextLength() <= actualAvailableWidth) {\n          break;\n        }\n      }\n    }\n  });\n  if (config.showValues !== false) {\n    sections.append(\"text\").attr(\"class\", \"treemapSectionValue\").attr(\"x\", (d) => d.x1 - d.x0 - 10).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"text-anchor\", \"end\").attr(\"dominant-baseline\", \"middle\").text((d) => d.value ? valueFormat(d.value) : \"\").attr(\"font-style\", \"italic\").attr(\"style\", (d) => {\n      if (d.depth === 0) {\n        return \"display: none;\";\n      }\n      const labelStyles = \"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    });\n  }\n  const leafNodes = treemapData.leaves();\n  const cell = g.selectAll(\".treemapLeafGroup\").data(leafNodes).enter().append(\"g\").attr(\"class\", (d, i) => {\n    return `treemapNode treemapLeafGroup leaf${i}${d.data.classSelector ? ` ${d.data.classSelector}` : \"\"}x`;\n  }).attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  cell.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", \"treemapLeaf\").attr(\"fill\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"style\", (d) => {\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles;\n  }).attr(\"fill-opacity\", 0.3).attr(\"stroke\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"stroke-width\", 3);\n  cell.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 4)).attr(\"height\", (d) => Math.max(0, d.y1 - d.y0 - 4));\n  const leafLabels = cell.append(\"text\").attr(\"class\", \"treemapLabel\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", (d) => (d.y1 - d.y0) / 2).attr(\"style\", (d) => {\n    const labelStyles = \"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.data.name);\n  leafLabels.each(function(d) {\n    const self = select(this);\n    const nodeWidth = d.x1 - d.x0;\n    const nodeHeight = d.y1 - d.y0;\n    const textNode = self.node();\n    const padding = 4;\n    const availableWidth = nodeWidth - 2 * padding;\n    const availableHeight = nodeHeight - 2 * padding;\n    if (availableWidth < 10 || availableHeight < 10) {\n      self.style(\"display\", \"none\");\n      return;\n    }\n    let currentLabelFontSize = parseInt(self.style(\"font-size\"), 10);\n    const minLabelFontSize = 8;\n    const originalValueRelFontSize = 28;\n    const valueScaleFactor = 0.6;\n    const minValueFontSize = 6;\n    const spacingBetweenLabelAndValue = 2;\n    while (textNode.getComputedTextLength() > availableWidth && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n    }\n    let prospectiveValueFontSize = Math.max(\n      minValueFontSize,\n      Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n    );\n    let combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n    while (combinedHeight > availableHeight && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      prospectiveValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n      );\n      if (prospectiveValueFontSize < minValueFontSize && currentLabelFontSize === minLabelFontSize) {\n        break;\n      }\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n      combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n      if (prospectiveValueFontSize <= minValueFontSize && combinedHeight > availableHeight) {\n      }\n    }\n    self.style(\"font-size\", `${currentLabelFontSize}px`);\n    if (textNode.getComputedTextLength() > availableWidth || currentLabelFontSize < minLabelFontSize || availableHeight < currentLabelFontSize) {\n      self.style(\"display\", \"none\");\n    }\n  });\n  if (config.showValues !== false) {\n    const leafValues = cell.append(\"text\").attr(\"class\", \"treemapValue\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", function(d) {\n      return (d.y1 - d.y0) / 2;\n    }).attr(\"style\", (d) => {\n      const labelStyles = \"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.value ? valueFormat(d.value) : \"\");\n    leafValues.each(function(d) {\n      const valueTextElement = select(this);\n      const parentCellNode = this.parentNode;\n      if (!parentCellNode) {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const labelElement = select(parentCellNode).select(\".treemapLabel\");\n      if (labelElement.empty() || labelElement.style(\"display\") === \"none\") {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const finalLabelFontSize = parseFloat(labelElement.style(\"font-size\"));\n      const originalValueFontSize = 28;\n      const valueScaleFactor = 0.6;\n      const minValueFontSize = 6;\n      const spacingBetweenLabelAndValue = 2;\n      const actualValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueFontSize, Math.round(finalLabelFontSize * valueScaleFactor))\n      );\n      valueTextElement.style(\"font-size\", `${actualValueFontSize}px`);\n      const labelCenterY = (d.y1 - d.y0) / 2;\n      const valueTopActualY = labelCenterY + finalLabelFontSize / 2 + spacingBetweenLabelAndValue;\n      valueTextElement.attr(\"y\", valueTopActualY);\n      const nodeWidth = d.x1 - d.x0;\n      const nodeTotalHeight = d.y1 - d.y0;\n      const cellBottomPadding = 4;\n      const maxValueBottomY = nodeTotalHeight - cellBottomPadding;\n      const availableWidthForValue = nodeWidth - 2 * 4;\n      if (valueTextElement.node().getComputedTextLength() > availableWidthForValue || valueTopActualY + actualValueFontSize > maxValueBottomY || actualValueFontSize < minValueFontSize) {\n        valueTextElement.style(\"display\", \"none\");\n      } else {\n        valueTextElement.style(\"display\", null);\n      }\n    });\n  }\n  const diagramPadding = config.diagramPadding ?? 8;\n  setupViewPortForSVG(svg, diagramPadding, \"flowchart\", config?.useMaxWidth || false);\n}, \"draw\");\nvar getClasses = /* @__PURE__ */ __name(function(_text, diagramObj) {\n  return diagramObj.db.getClasses();\n}, \"getClasses\");\nvar renderer = { draw, getClasses };\n\n// src/diagrams/treemap/styles.ts\nvar defaultTreemapStyleOptions = {\n  sectionStrokeColor: \"black\",\n  sectionStrokeWidth: \"1\",\n  sectionFillColor: \"#efefef\",\n  leafStrokeColor: \"black\",\n  leafStrokeWidth: \"1\",\n  leafFillColor: \"#efefef\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  valueFontSize: \"10px\",\n  valueColor: \"black\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\"\n};\nvar getStyles = /* @__PURE__ */ __name(({\n  treemap: treemap2\n} = {}) => {\n  const options = cleanAndMerge(defaultTreemapStyleOptions, treemap2);\n  return `\n  .treemapNode.section {\n    stroke: ${options.sectionStrokeColor};\n    stroke-width: ${options.sectionStrokeWidth};\n    fill: ${options.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${options.leafStrokeColor};\n    stroke-width: ${options.leafStrokeWidth};\n    fill: ${options.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${options.labelColor};\n    font-size: ${options.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${options.valueColor};\n    font-size: ${options.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${options.titleColor};\n    font-size: ${options.titleFontSize};\n  }\n  `;\n}, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/treemap/diagram.ts\nvar diagram = {\n  parser,\n  get db() {\n    return new TreeMapDB();\n  },\n  renderer,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n","import {\n  __name,\n  configureSvgSize,\n  log\n} from \"./chunk-VIW5F6AA.mjs\";\n\n// src/rendering-util/setupViewPortForSVG.ts\nvar setupViewPortForSVG = /* @__PURE__ */ __name((svg, padding, cssDiagram, useMaxWidth) => {\n  svg.attr(\"class\", cssDiagram);\n  const { width, height, x, y } = calculateDimensionsWithPadding(svg, padding);\n  configureSvgSize(svg, height, width, useMaxWidth);\n  const viewBox = createViewBox(x, y, width, height, padding);\n  svg.attr(\"viewBox\", viewBox);\n  log.debug(`viewBox configured: ${viewBox} with padding: ${padding}`);\n}, \"setupViewPortForSVG\");\nvar calculateDimensionsWithPadding = /* @__PURE__ */ __name((svg, padding) => {\n  const bounds = svg.node()?.getBBox() || { width: 0, height: 0, x: 0, y: 0 };\n  return {\n    width: bounds.width + padding * 2,\n    height: bounds.height + padding * 2,\n    x: bounds.x,\n    y: bounds.y\n  };\n}, \"calculateDimensionsWithPadding\");\nvar createViewBox = /* @__PURE__ */ __name((x, y, width, height, padding) => {\n  return `${x - padding} ${y - padding} ${width} ${height}`;\n}, \"createViewBox\");\n\nexport {\n  setupViewPortForSVG\n};\n"],"x_google_ignoreList":[0,1]}