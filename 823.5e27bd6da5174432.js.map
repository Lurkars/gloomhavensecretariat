{"version":3,"file":"823.5e27bd6da5174432.js","mappings":"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","names":["GRAPH_NODE","Graph","constructor","opts","this","_isDirected","Object","prototype","hasOwnProperty","call","directed","_isMultigraph","multigraph","_isCompound","compound","_label","undefined","_defaultNodeLabelFn","_","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","isDirected","isMultigraph","isCompound","setGraph","label","graph","setDefaultNodeLabel","newDefault","nodeCount","_nodeCount","nodes","sources","self","v","sinks","setNodes","vs","value","args","arguments","length","setNode","node","hasNode","removeNode","removeEdge","e","_removeFromParentsChildList","children","child","setParent","parent","Error","ancestor","predecessors","predsV","successors","sucsV","neighbors","preds","isLeaf","filterNodes","filter","copy","w","setEdge","edge","parents","findParent","setDefaultEdgeLabel","edgeCount","_edgeCount","edges","setPath","name","valueSpecified","arg0","edgeArgsToId","edgeObj","edgeArgsToObj","v_","w_","tmp","freeze","incrementOrInitEntry","edgeObjToId","hasEdge","decrementOrRemoveEntry","inEdges","u","inV","outEdges","outV","nodeEdges","concat","map","k"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/dagre-d3-es/src/graphlib/graph.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = Object.prototype.hasOwnProperty.call(opts, 'directed')\n      ? opts.directed\n      : true;\n    this._isMultigraph = Object.prototype.hasOwnProperty.call(opts, 'multigraph')\n      ? opts.multigraph\n      : false;\n    this._isCompound = Object.prototype.hasOwnProperty.call(opts, 'compound')\n      ? opts.compound\n      : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (Object.prototype.hasOwnProperty.call(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return Object.prototype.hasOwnProperty.call(this._nodes, v);\n  }\n  removeNode(v) {\n    if (Object.prototype.hasOwnProperty.call(this._nodes, v)) {\n      var removeEdge = (e) => this.removeEdge(this._edgeObjs[e]);\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), (child) => {\n          this.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (Object.prototype.hasOwnProperty.call(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return Object.prototype.hasOwnProperty.call(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n"],"x_google_ignoreList":[0]}